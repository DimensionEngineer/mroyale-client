var WEBSOCKET_SERVER = "wss://" + window.location.host + ":9000/royale/ws";
var DISCLAIMER_SCREEN_TIMEOUT = 3200;
var LOBBY_MUSIC_URL = ASSETS_URL + "audio/music/lobby.mp3";
var MENU_MUSIC_URL = ASSETS_URL + "audio/music/menu.mp3";
var SKINCOUNT = 1;
var SKIN_MUSIC_URL = {};
var TILE_ANIMATION = {};
var OBJ_ANIMATION = {};
var GUEST_SKINS = [];
(function() {
    var e = resources[ASSETS_URL + "assets.json"];
    if (e.skins.count != undefined) // e.skins.count
        SKINCOUNT = e.skins.count;
    if (SKINCOUNT > 1201) {
        SKINCOUNT = 1201
    }
    for (i in e.skins.properties) {
        var t = e.skins.properties;
        var s = t[i].music;
        if (s != undefined)
            SKIN_MUSIC_URL[t[i].id] = s;
        if (t[i].forGuests)
            GUEST_SKINS.push(t[i].id)
    }
    if (e.tileAnim) {
        for (var o of e.tileAnim) {
            var a = {};
            a.tiles = o.tiles;
            a.delay = o.delay;
            a.tilesets = o.tilesets || [];
            TILE_ANIMATION[o.startTile] = a
        }
    }
    if (e.objAnim) {
        for (var o of e.objAnim) {
            var a = {};
            a.tiles = o.tiles;
            a.delay = o.delay;
            a.tilesets = o.tilesets || [];
            OBJ_ANIMATION[o.startTile] = a
        }
    }
}
)();
var GAMEMODES = ["vanilla", "pvp", "hell"];
var DEV_SKINS = [4];
var DEFAULT_PLAYER_NAME = "INFRINGIO";
var levelSelectors = [];
var TILE_ANIMATION_FILTERED = {};
var OBJ_ANIMATION_FILTERED = {};
var PERFORMANCE_HACK = true;
var util = {}
  , vec2 = {
    make: function(e, t) {
        return {
            x: e,
            y: t
        }
    },
    random: function() {
        return vec2.normalize({
            x: 2 * Math.random() - 1,
            y: 2 * Math.random() - 1
        })
    },
    copy: function(e) {
        return {
            x: e.x,
            y: e.y
        }
    },
    add: function(e, t) {
        return {
            x: e.x + t.x,
            y: e.y + t.y
        }
    },
    subtract: function(e, t) {
        return {
            x: e.x - t.x,
            y: e.y - t.y
        }
    },
    scale: function(e, t) {
        return {
            x: e.x * t,
            y: e.y * t
        }
    },
    multiply: function(e, t) {
        return {
            x: e.x * t.x,
            y: e.y * t.y
        }
    },
    divide: function(e, t) {
        return {
            x: e.x / t.x,
            y: e.y / t.y
        }
    },
    magnitude: function(e) {
        return Math.sqrt(e.x * e.x + e.y * e.y)
    },
    normalize: function(e) {
        var t = vec2.magnitude(e);
        return 0 !== t ? {
            x: e.x / t,
            y: e.y / t
        } : {
            x: 0,
            y: 1
        }
    },
    distance: function(e, t) {
        return vec2.magnitude(vec2.subtract(e, t))
    },
    dot: function(e, t) {
        return e.x * t.x + e.y * t.y
    },
    inverse: function(e) {
        return {
            x: -1 * e.x,
            y: -1 * e.y
        }
    },
    lerp: function(e, t, i) {
        return vec2.add(vec2.scale(e, 1 - i), vec2.scale(t, i))
    },
    rotate: function(e, t) {
        var i = Math.cos(t);
        t = Math.sin(t);
        return {
            x: e.x * i + e.y * t,
            y: e.x * -t + e.y * i
        }
    },
    angle: function(e, t) {
        var i = vec2.dot(e, t);
        return Math.acos(i / (Math.sqrt(e.x * e.x + e.y * e.y) * Math.sqrt(t.x * t.x + t.y * t.y)))
    },
    average: function(e) {
        for (var t = vec2.create(), i = 0; i < e.length; i++)
            t = vec2.add(t, e[i]);
        return vec2.scale(t, 1 / e.length)
    },
    chop: function(e) {
        return vec2.make(parseInt(e.x), parseInt(e.y))
    },
    equals: function(e, t) {
        return e.x === t.x && e.y === t.y
    },
    toArray: function(e) {
        return [e.x, e.y]
    }
}
  , vec4 = {};
vec4.make = function(e, t, i, s) {
    return {
        x: e,
        y: t,
        z: i,
        w: s
    }
}
;
vec4.copy = function(e) {
    return {
        x: e.x,
        y: e.y,
        z: e.z,
        w: e.w
    }
}
;
vec4.add = function(e, t) {
    return {
        x: e.x + t.x,
        y: e.y + t.y,
        z: e.z + t.z,
        w: e.w + t.w
    }
}
;
vec4.subtract = function(e, t) {
    return {
        x: e.x - t.x,
        y: e.y - t.y,
        z: e.z - t.z,
        w: e.w - t.w
    }
}
;
vec4.scale = function(e, t) {
    return {
        x: e.x * t,
        y: e.y * t,
        z: e.z * t,
        w: e.w * t
    }
}
;
vec4.multiply = function(e, t) {
    return {
        x: e.x * t.x,
        y: e.y * t.y,
        z: e.z * t.z,
        w: e.w * t.w
    }
}
;
vec4.lerp = function(e, t, i) {
    return vec4.add(vec4.scale(e, 1 - i), vec4.scale(t, i))
}
;
vec4.toArray = function(e) {
    return [e.x, e.y, e.z, e.w]
}
;
util.line2 = {};
util.intersection = {};
util.time = {};
util.sprite = {};
util.line2.normal = function(e) {
    return vec2.normalize({
        x: e.b.y - e.a.y,
        y: -1 * (e.b.x - e.a.x)
    })
}
;
util.intersection.pointRectangle = function(e, t, i) {
    return t.x <= e.x && t.x + i.x > e.x && t.y <= e.y && t.y + i.y > e.y
}
;
util.intersection.pointPoly = function(e, t) {
    var i, s, o = false, a = t.length;
    i = 0;
    for (s = a - 1; i < a; s = i++)
        t[i].y > e.y !== t[s].y > e.y && e.x < (t[s].x - t[i].x) * (e.y - t[i].y) / (t[s].y - t[i].y) + t[i].x && (o = !o);
    return o
}
;
util.intersection.lineLine = function(e, t) {
    var i, s, o, a;
    i = e.b.x - e.a.x;
    s = e.b.y - e.a.y;
    o = t.b.x - t.a.x;
    a = t.b.y - t.a.y;
    var r;
    r = (-s * (e.a.x - t.a.x) + i * (e.a.y - t.a.y)) / (-o * s + i * a);
    o = (o * (e.a.y - t.a.y) - a * (e.a.x - t.a.x)) / (-o * s + i * a);
    if (0 <= r && 1 >= r && 0 <= o && 1 >= o)
        return i = e.a.x + o * i,
        s = e.a.y + o * s,
        s = {},
        t = util.line2.normal(t),
        {
            intersection: s,
            normal: t,
            distance: vec2.distance(s, e.a)
        };
    s.x = i;
    s.y = s
}
;
util.intersection.lineCircle = function(e, t, i) {
    var s = util.intersection.lineNearestPoint(e, t);
    if (vec2.equals(s, t.a)) {
        var o = vec2.subtract(e, t.a);
        e = vec2.magnitude(o);
        if (!(e >= i))
            return i = vec2.normalize(o),
            {
                intersection: t.a,
                normal: i,
                dist: e
            }
    } else {
        if (vec2.equals(s, t.b)) {
            o = vec2.subtract(e, t.b);
            e = vec2.magnitude(o);
            if (e >= i)
                return;
            i = vec2.normalize(o);
            return {
                intersection: t.b,
                normal: i,
                distance: e
            }
        }
        o = vec2.subtract(e, s);
        e = vec2.magnitude(o);
        if (!(e >= i))
            return i = vec2.normalize(o),
            {
                intersection: s,
                normal: i,
                distance: e
            }
    }
}
;
util.intersection.polygonLine = function(e, t) {
    for (var i = [], s = 0; s < t.v.length; s++) {
        var o = util.intersection.lineLine(e, {
            a: t.v[s],
            b: t.v[s + 1 < t.v.length ? s + 1 : 0]
        });
        o && i.push(o)
    }
    if (!(1 > i.length)) {
        e = i[0];
        for (s = 1; s < i.length; s++)
            i[s].distance < e.distance && (e = i[s]);
        return e
    }
}
;
util.intersection.polygonCircle = function(e, t, i) {
    for (var s = [], o = 0; o < t.v.length; o++) {
        var a = util.intersection.lineCircle(e, {
            a: t.v[o],
            b: t.v[o + 1 < t.v.length ? o + 1 : 0]
        }, i);
        a && s.push(a)
    }
    if (!(1 > s.length)) {
        e = s[0];
        for (o = 1; o < s.length; o++)
            s[o].distance < e.distance && (e = s[o]);
        return e
    }
}
;
util.intersection.lineNearestPoint = function(e, t) {
    var i = vec2.subtract(t.b, t.a);
    e = vec2.subtract(e, t.a);
    e = vec2.dot(e, i);
    if (0 >= e)
        return t.a;
    var s = vec2.dot(i, i);
    return s <= e ? t.b : vec2.add(t.a, vec2.scale(i, e / s))
}
;
util.time.now = function() {
    return Date.now()
}
;
util.sprite.getSprite = function(e, t) {
    var i = e.width;
    var s = e.height;
    t *= Display.TEXRES;
    var o = parseInt(Math.floor(t / i) * Display.TEXRES);
    return o > s ? [0, 0] : [t % i, o]
}
;
var requestAnimFrameFunc = function() {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(e) {
        window.setTimeout(e, 33)
    }
}()
  , _0x2a6b41 = function() {
    return window.cancelAnimationFrame || window.webkitCancelRequestAnimationFrame || window.mozCancelRequestAnimationFrame || window.oCancelRequestAnimationFrame || window.msCancelRequestAnimationFrame || clearTimeout
}();
"use strict";
var shor2 = {};
shor2.encode = function(e, t) {
    return 0 | parseInt(e) & 65535 | parseInt(t) << 16 & 4294901760
}
;
shor2.decode = function(e) {
    return vec2.make(e & 65535, e >> 16 & 65535)
}
;
shor2.asArray = function(e) {
    return [e & 65535, e >> 16 & 65535]
}
;
var td32 = {};
td32.encode = function(e, t, i, s, o) {
    return 0 | parseInt(e) & 2047 | parseInt(t) << 11 & 30720 | (i ? 1 : 0) << 15 & 32768 | parseInt(s) << 16 & 16711680 | parseInt(o) << 24 & 4278190080
}
;
td32.decode16 = function(e) {
    return {
        index: e & 2047,
        bump: e >> 11 & 15,
        depth: (e >> 15 & 1) === 1
    }
}
;
td32.decode = function(e) {
    var t = e >> 16 & 255;
    var i = !td32.TILE_PROPERTIES[t] ? td32.TILE_PROPERTIES[0] : td32.TILE_PROPERTIES[t];
    return {
        index: e & 2047,
        bump: e >> 11 & 15,
        depth: (e >> 15 & 1) === 1,
        definition: i,
        data: e >> 24 & 255
    }
}
;
td32.bump = function(e, t) {
    return e & 4294936575 | t << 11 & 30720
}
;
td32.data = function(e, t) {
    return e & 16777215 | t << 24 & 4278190080
}
;
td32.asArray = function(e) {
    return [e & 2047, e >> 11 & 15, (e >> 15 & 1) === 1, e >> 16 & 255, e >> 24 & 255]
}
;
td32.TRIGGER = {
    TYPE: {
        TOUCH: 0,
        DOWN: 1,
        PUSH: 2,
        SMALL_BUMP: 16,
        BIG_BUMP: 17
    }
};
td32.GEN_FUNC = {};
td32.GEN_FUNC.BUMP = function(e, t, i, s, o, a, r, n) {
    e.world.getZone(s, o).bump(a, r);
    var p = vec2.make(1, .15);
    var c = vec2.make(a, r + 1);
    for (var l = 0; l < e.objects.length; l++) {
        var h = e.objects[l];
        if (!h.dead && h.level === s && h.zone === o && h.dim) {
            if (squar.intersection(c, p, h.pos, h.dim)) {
                if (h instanceof PlayerObject) {
                    h.bounce()
                } else if (h.bounce) {
                    h.bounce()
                } else if (h.bonk) {
                    h.bonk()
                } else if (h instanceof CoinObject) {
                    if (e.pid === t) {
                        h.playerCollide(e.getPlayer());
                        e.world.getZone(s, o).coin(h.pos.x, h.pos.y)
                    }
                }
            }
        }
    }
}
;
td32.GEN_FUNC.BREAK = function(e, t, i, s, o, a, r, n) {
    var p = 30;
    e.world.getZone(s, o).break(a, r, p);
    var c = vec2.make(1, .15);
    var l = vec2.make(a, r + 1);
    for (var h = 0; h < e.objects.length; h++) {
        var d = e.objects[h];
        if (!d.dead && d.level === s && d.zone === o && d.dim) {
            if (squar.intersection(l, c, d.pos, d.dim)) {
                if (d instanceof PlayerObject) {
                    d.bounce()
                } else if (d.bounce) {
                    d.bounce()
                } else if (d.bonk) {
                    d.bonk()
                } else if (d instanceof CoinObject) {
                    if (e.pid === t) {
                        d.playerCollide(e.getPlayer());
                        e.world.getZone(s, o).coin(d.pos.x, d.pos.y)
                    }
                }
            }
        }
    }
}
;
td32.TILE_PROPERTIES = {
    0: {
        COLLIDE: false,
        HIDDEN: false,
        ASYNC: true,
        TRIGGER: function(e, t, i, s, o, a, r, n) {}
    },
    1: {
        COLLIDE: true,
        HIDDEN: false,
        ASYNC: true,
        TRIGGER: function(e, t, i, s, o, a, r, n) {}
    },
    2: {
        COLLIDE: true,
        HIDDEN: false,
        ASYNC: false,
        TRIGGER: function(e, t, i, s, o, a, r, n) {
            switch (n) {
            case 16:
            case 17:
                {
                    if (e.pid === t) {
                        e.out.push(NET030.encode(s, o, shor2.encode(a, r), n))
                    }
                    td32.GEN_FUNC.BUMP(e, t, i, s, o, a, r, n);
                    break
                }
            }
        }
    },
    3: {
        COLLIDE: true,
        HIDDEN: false,
        ASYNC: false,
        TRIGGER: function(e, t, i, s, o, a, r, n) {
            switch (n) {
            case 16:
                {
                    if (e.pid === t) {
                        e.out.push(NET030.encode(s, o, shor2.encode(a, r), n))
                    }
                    td32.GEN_FUNC.BUMP(e, t, i, s, o, a, r, n);
                    break
                }
            case 17:
                {
                    if (e.pid === t) {
                        e.out.push(NET030.encode(s, o, shor2.encode(a, r), n))
                    }
                    td32.GEN_FUNC.BREAK(e, t, i, s, o, a, r, n);
                    break
                }
            }
        }
    },
    4: {
        COLLIDE: true,
        HIDDEN: false,
        ASYNC: true,
        TRIGGER: function(e, t, i, s, o, a, r, n) {
            switch (n) {
            case 0:
                {
                    if (e.pid === t) {
                        e.getPlayer().damage()
                    }
                }
            }
        }
    },
    5: {
        COLLIDE: true,
        PLATFORM: true,
        HIDDEN: false,
        ASYNC: true,
        TRIGGER: function(e, t, i, s, o, a, r, n) {}
    },
    6: {
        COLLIDE: true,
        PLATFORM: "WEAK",
        HIDDEN: false,
        ASYNC: true,
        TRIGGER: function(e, t, i, s, o, a, r, n) {}
    },
    7: {
        COLLIDE: false,
        HIDDEN: false,
        ASYNC: true,
        WATER: 1,
        TRIGGER: function(e, t, i, s, o, a, r, n) {}
    },
    8: {
        COLLIDE: false,
        HIDDEN: false,
        ASYNC: true,
        WATER: 2,
        TRIGGER: function(e, t, i, s, o, a, r, n) {}
    },
    9: {
        COLLIDE: false,
        HIDDEN: false,
        ASYNC: true,
        WATER: 1,
        WATER_CURRENT: true,
        TRIGGER: function(e, t, i, s, o, a, r, n) {}
    },
    17: {
        COLLIDE: true,
        HIDDEN: false,
        ASYNC: false,
        TRIGGER: function(e, t, i, s, o, a, r, n) {
            if ((app.net.gameMode === 1 || app.net.gameMode === 2) && e.pid !== t)
                return;
            switch (n) {
            case 16:
            case 17:
                {
                    if (e.pid === t) {
                        e.out.push(NET030.encode(s, o, shor2.encode(a, r), n))
                    }
                    var p = 98331;
                    e.world.getZone(s, o).replace(a, r, p);
                    e.createObject(i.data, s, o, vec2.make(a, r), [shor2.encode(a, r)]);
                    td32.GEN_FUNC.BUMP(e, t, i, s, o, a, r, n);
                    e.world.getZone(s, o).play(a, r, "item.mp3", 1, .04);
                    break
                }
            }
        }
    },
    25: {
        COLLIDE: true,
        HIDDEN: false,
        ASYNC: false,
        TRIGGER: function(e, t, i, s, o, a, r, n) {
            if ((app.net.gameMode === 1 || app.net.gameMode === 2) && e.pid !== t)
                return;
            switch (n) {
            case 16:
            case 17:
                {
                    if (e.pid === t) {
                        e.out.push(NET030.encode(s, o, shor2.encode(a, r), n))
                    }
                    e.createObject(i.data, s, o, vec2.make(a, r), [shor2.encode(a, r)]);
                    td32.GEN_FUNC.BUMP(e, t, i, s, o, a, r, n);
                    e.world.getZone(s, o).play(a, r, "item.mp3", 1, .04);
                    break
                }
            }
        }
    },
    18: {
        COLLIDE: true,
        HIDDEN: false,
        ASYNC: false,
        TRIGGER: function(e, t, i, s, o, a, r, n) {
            switch (n) {
            case 16:
            case 17:
                {
                    if (e.pid === t) {
                        e.out.push(NET030.encode(s, o, shor2.encode(a, r), n));
                        e.addCoin(false, true)
                    }
                    var p = 98331;
                    e.world.getZone(s, o).replace(a, r, p);
                    td32.GEN_FUNC.BUMP(e, t, i, s, o, a, r, n);
                    e.world.getZone(s, o).coin(a, r + 1);
                    break
                }
            }
        }
    },
    19: {
        COLLIDE: true,
        HIDDEN: false,
        ASYNC: false,
        TRIGGER: function(e, t, i, s, o, a, r, n) {
            switch (n) {
            case 16:
            case 17:
                {
                    if (e.pid === t) {
                        e.out.push(NET030.encode(s, o, shor2.encode(a, r), n));
                        e.addCoin(false, true)
                    }
                    if (i.data > 1) {
                        var p = e.world.getZone(s, o).tile(a, r);
                        var c = td32.data(p, i.data - 1);
                        e.world.getZone(s, o).replace(a, r, c);
                        e.world.getZone(s, o).coin(a, r + 1);
                        td32.GEN_FUNC.BUMP(e, t, i, s, o, a, r, n)
                    } else {
                        var c = 98331;
                        e.world.getZone(s, o).replace(a, r, c);
                        e.world.getZone(s, o).coin(a, r + 1);
                        td32.GEN_FUNC.BUMP(e, t, i, s, o, a, r, n)
                    }
                    break
                }
            }
        }
    },
    24: {
        COLLIDE: true,
        HIDDEN: false,
        ASYNC: false,
        TRIGGER: function(e, t, i, s, o, a, r, n) {
            switch (n) {
            case 16:
            case 17:
                {
                    if (e.pid === t) {
                        e.out.push(NET030.encode(s, o, shor2.encode(a, r), n))
                    }
                    var p = 98331;
                    var c = td32.data(10813796, i.data);
                    e.world.getZone(s, o).replace(a, r, p);
                    e.world.getZone(s, o).grow(a, r + 1, c);
                    td32.GEN_FUNC.BUMP(e, t, i, s, o, a, r, n);
                    e.world.getZone(s, o).play(a, r, "vine.mp3", 1, .04);
                    break
                }
            }
        }
    },
    21: {
        COLLIDE: true,
        HIDDEN: true,
        ASYNC: false,
        TRIGGER: function(e, t, i, s, o, a, r, n) {
            if ((app.net.gameMode === 1 || app.net.gameMode === 2) && e.pid !== t)
                return;
            switch (n) {
            case 16:
            case 17:
                {
                    if (e.pid === t) {
                        e.out.push(NET030.encode(s, o, shor2.encode(a, r), n))
                    }
                    var p = 98331;
                    e.world.getZone(s, o).replace(a, r, p);
                    e.createObject(i.data, s, o, vec2.make(a, r), [shor2.encode(a, r)]);
                    td32.GEN_FUNC.BUMP(e, t, i, s, o, a, r, n);
                    e.world.getZone(s, o).play(a, r, "item.mp3", 1, .04);
                    break
                }
            }
        }
    },
    22: {
        COLLIDE: true,
        HIDDEN: true,
        ASYNC: false,
        TRIGGER: function(e, t, i, s, o, a, r, n) {
            switch (n) {
            case 16:
            case 17:
                {
                    if (e.pid === t) {
                        e.out.push(NET030.encode(s, o, shor2.encode(a, r), n));
                        e.addCoin(false, true)
                    }
                    var p = 98331;
                    e.world.getZone(s, o).replace(a, r, p);
                    e.world.getZone(s, o).coin(a, r + 1);
                    td32.GEN_FUNC.BUMP(e, t, i, s, o, a, r, n);
                    break
                }
            }
        }
    },
    81: {
        COLLIDE: false,
        HIDDEN: false,
        ASYNC: true,
        TRIGGER: function(e, t, i, s, o, a, r, n) {
            switch (n) {
            case 0:
                {
                    if (e.pid === t) {
                        e.getPlayer().warp(i.data)
                    }
                }
            }
        }
    },
    82: {
        COLLIDE: true,
        HIDDEN: false,
        ASYNC: true,
        TRIGGER: function(e, t, i, s, o, a, r, n) {
            switch (n) {
            case 1:
                {
                    if (e.pid === t) {
                        var p = e.getPlayer();
                        var c = e.world.getZone(s, o).getTile(vec2.make(a - 1, r));
                        var l = e.world.getZone(s, o).getTile(vec2.make(a + 1, r));
                        var h;
                        if (c.definition === this) {
                            h = a
                        } else if (l.definition === this) {
                            h = a + 1
                        } else {
                            return
                        }
                        if (Math.abs(p.pos.x + p.dim.x * .5 - h) <= .45) {
                            p.pipe(2, i.data, 50)
                        }
                    }
                }
            }
        }
    },
    83: {
        COLLIDE: true,
        HIDDEN: false,
        ASYNC: true,
        TRIGGER: function(e, t, i, s, o, a, r, n) {
            switch (n) {
            case 2:
                {
                    if (e.pid === t) {
                        e.getPlayer().pipe(4, i.data, 50)
                    }
                }
            }
        }
    },
    84: {
        COLLIDE: true,
        HIDDEN: false,
        ASYNC: true,
        TRIGGER: function(e, t, i, s, o, a, r, n) {
            switch (n) {
            case 1:
                {
                    if (e.pid === t) {
                        var p = e.getPlayer();
                        var c = e.world.getZone(s, o).getTile(vec2.make(a - 1, r));
                        var l = e.world.getZone(s, o).getTile(vec2.make(a + 1, r));
                        var h;
                        if (c.definition === this) {
                            h = a
                        } else if (l.definition === this) {
                            h = a + 1
                        } else {
                            return
                        }
                        if (Math.abs(p.pos.x + p.dim.x * .5 - h) <= .45) {
                            p.pipe(2, i.data, 0)
                        }
                    }
                }
            }
        }
    },
    85: {
        COLLIDE: true,
        HIDDEN: false,
        ASYNC: true,
        TRIGGER: function(e, t, i, s, o, a, r, n) {
            switch (n) {
            case 2:
                {
                    if (e.pid === t) {
                        e.getPlayer().pipe(4, i.data, 0)
                    }
                }
            }
        }
    },
    86: {
        COLLIDE: false,
        HIDDEN: false,
        ASYNC: true,
        TRIGGER: function(e, t, i, s, o, a, r, n) {
            switch (n) {
            case 0:
                {
                    if (e.pid === t) {
                        e.levelWarp(i.data)
                    }
                }
            }
        }
    },
    160: {
        COLLIDE: false,
        HIDDEN: false,
        ASYNC: true,
        TRIGGER: function(e, t, i, s, o, a, r, n) {
            switch (n) {
            case 0:
                {
                    if (e.pid === t) {
                        var p = e.getPlayer();
                        if (p.pos.x >= a) {
                            p.pole(vec2.make(a, r))
                        }
                    }
                }
            }
        }
    },
    165: {
        COLLIDE: false,
        HIDDEN: false,
        ASYNC: true,
        TRIGGER: function(e, t, i, s, o, a, r, n) {
            switch (n) {
            case 0:
                {
                    if (e.pid === t) {
                        var p = e.getPlayer();
                        if (p.pos.x >= a && p.pos.x <= a + 1) {
                            p.vine(vec2.make(a, r), i.data)
                        }
                    }
                }
            }
        }
    },
    240: {
        COLLIDE: true,
        HIDDEN: false,
        ASYNC: false,
        TRIGGER: function(e, t, i, s, o, a, r, n) {
            switch (n) {
            case 16:
            case 17:
                {
                    if (e.pid === t) {
                        e.send({
                            type: "g50"
                        })
                    }
                    var p = 98331;
                    e.world.getZone(s, o).replace(a, r, p);
                    e.createObject(CheckObject.ID, s, o, vec2.make(a, r + 1), [shor2.encode(a, r)]);
                    td32.GEN_FUNC.BUMP(e, t, i, s, o, a, r, n);
                    break
                }
            }
        }
    }
};
var NETX = {};
NETX.decode = function(e) {
    var t = [];
    var i = 0;
    while (i < e.length) {
        var s = e.slice(i++, i)[0];
        switch (s) {
        case 2:
            {
                t.push(NET001.decode(e.slice(i, i += NET001.BYTES - 1)));
                break
            }
        case 16:
            {
                t.push(NET010.decode(e.slice(i, i += NET010.BYTES - 1)));
                break
            }
        case 17:
            {
                t.push(NET011.decode(e.slice(i, i += NET011.BYTES - 1)));
                break
            }
        case 18:
            {
                t.push(NET012.decode(e.slice(i, i += NET012.BYTES - 1)));
                break
            }
        case 19:
            {
                t.push(NET013.decode(e.slice(i, i += NET013.BYTES - 1)));
                break
            }
        case 23:
            {
                t.push(NET017.decode(e.slice(i, i += NET017.BYTES - 1)));
                break
            }
        case 24:
            {
                t.push(NET018.decode(e.slice(i, i += NET018.BYTES - 1)));
                break
            }
        case 32:
            {
                t.push(NET020.decode(e.slice(i, i += NET020.BYTES - 1)));
                break
            }
        case 33:
            {
                t.push(NET021.decode(e.slice(i, i += NET021.BYTES - 1)));
                break
            }
        case 34:
            {
                t.push(NET022.decode(e.slice(i, i += NET022.BYTES - 1)));
                break
            }
        case 48:
            {
                t.push(NET030.decode(e.slice(i, i += NET030.BYTES - 1)));
                break
            }
        default:
            {
                if (app) {
                    app.menu.warn.show("Error decoding binary data! desig=" + s)
                }
                return t
            }
        }
    }
    return t
}
;
var NET001 = {};
NET001.DESIGNATION = 2;
NET001.BYTES = 6;
NET001.decode = function(e) {
    return {
        designation: NET001.DESIGNATION,
        pid: e[1] & 255 | e[0] << 8 & 65280,
        skin: e[3] & 255 | e[2] << 8 & 65280,
        isDev: e[4]
    }
}
;
var NET010 = {};
NET010.DESIGNATION = 16;
NET010.BYTES = 12;
NET010.encode = function(e, t, i) {
    return new Uint8Array([NET010.DESIGNATION, e, t, i >> 24 & 255, i >> 16 & 255, i >> 8 & 255, i & 255])
}
;
NET010.decode = function(e) {
    return {
        designation: NET010.DESIGNATION,
        pid: e[1] & 255 | e[0] << 8 & 65280,
        level: e[2],
        zone: e[3],
        pos: e[7] & 255 | e[6] << 8 & 65280 | e[5] << 16 & 16711680 | e[4] << 24 & 16711680,
        skin: e[9] & 255 | e[8] << 8,
        isDev: e[10]
    }
}
;
var NET011 = {};
NET011.DESIGNATION = 17;
NET011.BYTES = 3;
NET011.encode = function() {
    return new Uint8Array([NET011.DESIGNATION])
}
;
NET011.decode = function(e) {
    return {
        designation: NET011.DESIGNATION,
        pid: e[1] & 255 | e[0] << 8 & 65280
    }
}
;
var NET012 = {};
NET012.DESIGNATION = 18;
NET012.BYTES = 15;
NET012.encode = function(e, t, i, s, o) {
    var a = new Float32Array([i.x, i.y]);
    var r = new Uint8Array(a.buffer);
    return new Uint8Array([NET012.DESIGNATION, e, t, r[3], r[2], r[1], r[0], r[7], r[6], r[5], r[4], s, o])
}
;
NET012.decode = function(e) {
    var t = new Uint8Array([e[4], e[5], e[6], e[7]]);
    var i = new Uint8Array([e[8], e[9], e[10], e[11]]);
    var s = new DataView(t.buffer);
    var o = new DataView(i.buffer);
    return {
        designation: NET012.DESIGNATION,
        pid: e[1] & 255 | e[0] << 8 & 65280,
        level: e[2],
        zone: e[3],
        pos: vec2.make(s.getFloat32(0), o.getFloat32(0)),
        sprite: e[12],
        reverse: e[13] !== 0
    }
}
;
var NET013 = {};
NET013.DESIGNATION = 19;
NET013.BYTES = 4;
NET013.encode = function(e) {
    return new Uint8Array([NET013.DESIGNATION, e])
}
;
NET013.decode = function(e) {
    return {
        designation: NET013.DESIGNATION,
        pid: e[1] & 255 | e[0] << 8 & 65280,
        type: e[2]
    }
}
;
var NET015 = {};
NET015.DESIGNATION = 21;
NET015.BYTES = 3;
NET015.encode = function() {
    return new Uint8Array([NET015.DESIGNATION])
}
;
var NET017 = {};
NET017.DESIGNATION = 23;
NET017.BYTES = 5;
NET017.encode = function(e) {
    return new Uint8Array([NET017.DESIGNATION, e >> 8 & 255, e & 255])
}
;
NET017.decode = function(e) {
    return {
        designation: NET017.DESIGNATION,
        pid: e[1] & 255 | e[0] << 8 & 65280,
        killer: e[3] & 255 | e[2] << 8 & 65280
    }
}
;
var NET018 = {};
NET018.DESIGNATION = 24;
NET018.BYTES = 5;
NET018.encode = function() {
    return new Uint8Array([NET018.DESIGNATION])
}
;
NET018.decode = function(e) {
    return {
        designation: NET018.DESIGNATION,
        pid: e[1] & 255 | e[0] << 8 & 65280,
        result: e[2],
        extra: e[3]
    }
}
;
var NET019 = {};
NET019.DESIGNATION = 25;
NET019.BYTES = 3;
NET019.encode = function() {
    return new Uint8Array([NET019.DESIGNATION])
}
;
var NET020 = {};
NET020.DESIGNATION = 32;
NET020.BYTES = 10;
NET020.encode = function(e, t, i, s) {
    return new Uint8Array([NET020.DESIGNATION, e, t, i >> 24 & 255, i >> 16 & 255, i >> 8 & 255, i & 255, s])
}
;
NET020.decode = function(e) {
    return {
        designation: NET020.DESIGNATION,
        pid: e[1] & 255 | e[0] << 8 & 65280,
        level: e[2],
        zone: e[3],
        oid: e[7] & 255 | e[6] << 8 & 65280 | e[5] << 16 & 16711680 | e[4] << 24 & 16711680,
        type: e[8]
    }
}
;
var NET021 = {};
NET021.DESIGNATION = 33;
NET021.BYTES = 2;
NET021.decode = function(e) {
    return {
        designation: NET021.DESIGNATION,
        type: e[0]
    }
}
;
var NET022 = {};
NET022.DESIGNATION = 34;
NET022.BYTES = 5;
NET022.decode = function(e) {
    return {
        designation: NET022.DESIGNATION,
        coins: e[3] & 255 | e[2] << 8 & 65280 | e[1] << 16 & 16711680 | e[0] << 24 & 4278190080
    }
}
;
var NET030 = {};
NET030.DESIGNATION = 48;
NET030.BYTES = 10;
NET030.encode = function(e, t, i, s) {
    return new Uint8Array([NET030.DESIGNATION, e, t, i >> 24 & 255, i >> 16 & 255, i >> 8 & 255, i & 255, s])
}
;
NET030.decode = function(e) {
    return {
        designation: NET030.DESIGNATION,
        pid: e[1] & 255 | e[0] << 8 & 65280,
        level: e[2],
        zone: e[3],
        pos: shor2.decode(e[7] & 255 | e[6] << 8 & 65280 | e[5] << 16 & 16711680 | e[4] << 24 & 16711680),
        type: e[8]
    }
}
;
var MERGE_BYTE = function(e) {
    var t = [];
    for (var i = 0; i < e.length; i++) {
        for (var s = 0; s < e[i].length; s++) {
            t.push(e[i][s])
        }
    }
    return new Uint8Array(t)
};
"use strict";
var squar = {};
squar.intersection = function(e, t, i, s) {
    return i.x < e.x + t.x && i.x + s.x > e.x && i.y < e.y + t.y && i.y + s.y > e.y
}
;
squar.inside = function(e, t, i) {
    return t.x < e.x && t.x + i.x > e.x && t.y < e.y && t.y + i.y > e.y
}
;
"use strict";
function Menu() {
    this.body = document.getElementsByTagName("BODY")[0];
    window.history.pushState({
        html: "index.html",
        pageTitle: "Mario Royale"
    }, "", "#");
    var e = [{
        id: "warn",
        obj: new WarnScreen
    }, {
        id: "error",
        obj: new ErrorScreen
    }, {
        id: "load",
        obj: new LoadScreen
    }, {
        id: "disclaim",
        obj: new DisclaimScreen
    }, {
        id: "main",
        obj: new MainScreen
    }, {
        id: "mainAsMember",
        obj: new MainAsMemberScreen
    }, {
        id: "profile",
        obj: new ProfileScreen
    }, {
        id: "pwdChange",
        obj: new PwdChangeScreen
    }, {
        id: "name",
        obj: new NameScreen
    }, {
        id: "login",
        obj: new LoginScreen
    }, {
        id: "register",
        obj: new RegisterScreen
    }, {
        id: "game",
        obj: new GameScreen
    }];
    this.menus = [];
    for (var t = 0; t < e.length; t++)
        this.menus[t] = e[t].obj,
        this[e[t].id] = e[t].obj;
    this.lastNav = "";
    var i = this;
    window.onpopstate = function(e) {
        if (i[i.lastNav] && i[i.lastNav].onBack)
            i.onBack();
        else
            e.state && "Mario Royale" !== e.state.pageTitle ? (document.getElementById("content").innerHTML = e.state.html,
            document.title = e.state.pageTitle) : e.state && "Mario Royale" === e.state.pageTitle && window.history.back()
    }
    ;
    this.hideAll();
    this.background("c");
    this.body.style.display = "block"
}
Menu.prototype.hideAll = function() {
    for (var e = 1; e < this.menus.length; e++)
        this.menus[e].hide()
}
;
Menu.prototype.background = function(e) {
    if (e !== this.bid) {
        switch (e) {
        case "b":
            e = "background-b";
            break;
        case "c":
            e = "background-c";
            break;
        default:
            e = "background-a"
        }
        this.body.classList.remove("background-a");
        this.body.classList.remove("background-b");
        this.body.classList.remove("background-c");
        this.body.classList.add(e)
    }
}
;
Menu.prototype.navigation = function(e, t) {
    this.lastNav = e;
    window.history.replaceState({
        html: "index.html",
        pageTitle: "Mario Royale"
    }, t, "#" + t)
}
;
Menu.prototype.onBack = function() {
    window.history.pushState({
        html: "index.html",
        pageTitle: "Mario Royale"
    }, "", "#");
    this[this.lastNav].onBack()
}
;
"use strict";
function WarnScreen() {
    this.element = document.getElementById("warn");
    this.hide();
    this.timeout = undefined
}
WarnScreen.prototype.show = function(e) {
    this.element.innerHTML = "<img src='" + ASSETS_URL + "img/home/warn.png' class='warn-ico'/> " + e;
    console.warn("##WARN## " + e);
    this.timeout && clearTimeout(this.timeout);
    var t = this.element;
    this.timeout = setTimeout((function() {
        t.style.display = "none"
    }
    ), 5e3);
    this.element.style.display = "block"
}
;
WarnScreen.prototype.hide = function() {
    this.element.style.display = "none"
}
;
"use strict";
function ErrorScreen() {
    this.element = document.getElementById("error");
    this.error = document.getElementById("error-message")
}
ErrorScreen.prototype.show = function(e, t, i) {
    app.net.close();
    app.menu.hideAll();
    app.menu.navigation("error", "error");
    app.menu.background("b");
    this.error.innerHTML = e;
    e && console.error("##ERROR## " + e);
    t && console.warn("##ERROR## " + t);
    i && console.warn("##TRACE## " + i);
    this.element.style.display = "block"
}
;
ErrorScreen.prototype.hide = function() {
    this.element.style.display = "none"
}
;
"use strict";
function LoadScreen() {
    this.element = document.getElementById("load")
}
LoadScreen.prototype.show = function() {
    app.menu.hideAll();
    app.menu.background("a");
    this.element.style.display = "block"
}
;
LoadScreen.prototype.hide = function() {
    this.element.style.display = "none"
}
;
"use strict";
function DisclaimScreen() {
    this.element = document.getElementById("disclaim");
    this.linkElement = document.getElementById("link")
}
DisclaimScreen.prototype.show = function(e) {
    app.menu.hideAll();
    app.menu.background("c");
    this.linkElement.style.display = "block";
    this.element.style.display = "block"
}
;
DisclaimScreen.prototype.hide = function() {
    this.linkElement.style.display = "none";
    this.element.style.display = "none"
}
;
"use strict";
function MainScreen() {
    this.element = document.getElementById("main");
    this.linkElement = document.getElementById("link");
    this.winElement = document.getElementById("win");
    this.launchBtn = document.getElementById("main-launch");
    this.loginBtn = document.getElementById("main-login");
    this.registerBtn = document.getElementById("main-register");
    this.onlineNum = document.getElementById("main-number");
    this.numberFull = document.getElementById("main-numberFull");
    this.maintenance = document.getElementById("main-maintenance");
    this.padLoop = undefined;
    var e = this;
    this.launchBtn.onclick = function() {
        e.launch()
    }
    ;
    this.loginBtn.onclick = function() {
        e.showLogin()
    }
    ;
    this.registerBtn.onclick = function() {
        e.showRegister()
    }
}
MainScreen.prototype.launch = function() {
    app.menu.name.show()
}
;
MainScreen.prototype.showLogin = function() {
    app.menu.login.show()
}
;
MainScreen.prototype.showRegister = function() {
    app.menu.register.show();
    app.requestCaptcha()
}
;
function genStartPad(e) {
    var t = isNaN(parseInt(Cookies.get("g_a"))) ? 0 : parseInt(Cookies.get("g_a"));
    var i = false;
    var s = function() {
        var o;
        navigator && (o = navigator.getGamepads()[0]);
        o && !o.buttons[t].pressed && i && e.launch();
        o && (i = o.buttons[t].pressed);
        e.padLoop = setTimeout(s, 33)
    };
    s()
}
MainScreen.prototype.startPad = function() {
    genStartPad(this)
}
;
function setUpdatePlayerNumber(e) {
    e.updateStatus = function(t) {
        $.ajax({
            url: "status.json",
            type: "GET",
            timeout: 3e3,
            success: function(i) {
                if (i.result) {
                    t && e.menu.error.show(i.result)
                } else {
                    if (i.maintenance) {
                        e.numberFull.style.display = "none";
                        e.maintenance.style.display = ""
                    } else {
                        e.onlineNum.innerHTML = i.active;
                        e.maintenance.style.display = "none";
                        e.numberFull.style.display = ""
                    }
                }
            },
            cache: false
        })
    }
}
MainScreen.prototype.show = function() {
    app.menu.hideAll();
    app.menu.navigation("main", "main");
    app.menu.background("a");
    this.updateStatsBar();
    this.winElement.style.display = "block";
    this.startPad();
    this.linkElement.style.display = "block";
    this.element.style.display = "block";
    session = Cookies.get("session");
    if (session != undefined) {
        app.resumeSession(session)
    }
    setUpdatePlayerNumber(this);
    this.updateStatus(true);
    app.statusUpdater = setInterval(this.updateStatus, 1e3)
}
;
MainScreen.prototype.hide = function() {
    this.padLoop && clearTimeout(this.padLoop);
    this.linkElement.style.display = "none";
    this.element.style.display = "none";
    if (app && app.statusUpdater) {
        clearInterval(app.statusUpdater);
        app.statusUpdater = null
    }
}
;
MainScreen.prototype.updateStatsBar = function() {
    this.winElement.innerHTML = "Login to track statistics"
}
;
"use strict";
function MainAsMemberScreen() {
    this.element = document.getElementById("mainAsMember");
    this.linkElement = document.getElementById("link");
    this.charMusicToggle = document.getElementById("mainAsMember-char-music-toggle");
    this.launchBtn = document.getElementById("mainAsMember-launch");
    this.profileBtn = document.getElementById("mainAsMember-profile");
    this.pwdBtn = document.getElementById("mainAsMember-pwd");
    this.logoutBtn = document.getElementById("mainAsMember-logout");
    this.privateBtn = document.getElementById("mainAsMember-private-toggle");
    this.gmBtn = document.getElementById("mainAsMember-gm-change");
    this.onlineNum = document.getElementById("mainAsMember-number");
    this.numberFull = document.getElementById("mainAsMember-numberFull");
    this.maintenance = document.getElementById("mainAsMember-maintenance");
    this.isPrivate = false;
    this.gameMode = 0;
    var e = this;
    this.launchBtn.onclick = function() {
        e.launch()
    }
    ;
    this.profileBtn.onclick = function() {
        e.showProfile()
    }
    ;
    this.pwdBtn.onclick = function() {
        e.showPwdChange()
    }
    ;
    this.logoutBtn.onclick = function() {
        e.logout()
    }
    ;
    this.privateBtn.onclick = function() {
        e.isPrivate = !e.isPrivate;
        e.updPrivateBtn();
        Cookies.set("mpriv", e.isPrivate, {
            expires: 30
        })
    }
    ;
    this.charMusicToggle.onclick = function() {
        app.charMusic = !app.charMusic;
        e.updMusicBtn();
        Cookies.set("char_music", app.charMusic ? "1" : "0", {
            expires: 30
        })
    }
    ;
    this.gmBtn.onclick = function() {
        e.gameMode = (e.gameMode + 1) % GAMEMODES.length;
        e.updGameModeBtn();
        Cookies.set("gamemode", e.gameMode, {
            expires: 30
        })
    }
}
MainAsMemberScreen.prototype.show = function(e) {
    app.menu.hideAll();
    app.menu.background("a");
    if (e === undefined) {
        this.element.style.display = "block";
        return
    }
    if (e.session != undefined) {
        Cookies.set("session", e.session, {
            expires: 30
        })
    }
    var t = Cookies.get("mpriv");
    var i = Cookies.get("gamemode");
    this.coins = e.coins || 0;
    this.kills = e.kills || 0;
    this.wins = e.wins || 0;
    this.deaths = e.deaths || 0;
    this.nickname = e.nickname;
    this.squad = e.squad;
    this.skin = e.skin;
    this.isPrivate = t ? t == "true" : false;
    this.gameMode = i ? parseInt(i) : 0;
    this.updPrivateBtn();
    this.updMusicBtn();
    this.updGameModeBtn();
    this.linkElement.style.display = "block";
    this.element.style.display = "block";
    if (app.goToLobby) {
        this.launch()
    } else {
        setUpdatePlayerNumber(this);
        this.updateStatus(true);
        app.statusUpdater = setInterval(this.updateStatus, 1e3)
    }
    app.menu.main.winElement.innerText = "wins x" + this.wins + " deaths x" + this.deaths + " kills x" + this.kills + " coins x" + this.coins
}
;
MainAsMemberScreen.prototype.hide = function() {
    this.linkElement.style.display = "none";
    this.element.style.display = "none";
    if (app && app.statusUpdater) {
        clearInterval(app.statusUpdater);
        app.statusUpdater = null
    }
}
;
MainAsMemberScreen.prototype.launch = function() {
    app.join(this.nickname, this.squad, this.isPrivate, this.skin, this.gameMode)
}
;
MainAsMemberScreen.prototype.showProfile = function() {
    app.menu.profile.show({
        nickname: this.nickname,
        squad: this.squad,
        skin: this.skin
    })
}
;
MainAsMemberScreen.prototype.showPwdChange = function() {
    app.menu.pwdChange.show()
}
;
MainAsMemberScreen.prototype.logout = function() {
    app.logout()
}
;
MainAsMemberScreen.prototype.updPrivateBtn = function() {
    if (!this.isPrivate) {
        this.privateBtn.classList.add("disabled");
        this.privateBtn.classList.remove("enabled");
        this.launchBtn.style.color = "";
        this.launchBtn.classList.remove("tooltip");
        var e = document.getElementById("mainAsMember-launch-tooltip");
        if (e)
            this.launchBtn.removeChild(e)
    } else {
        this.privateBtn.classList.add("enabled");
        this.privateBtn.classList.remove("disabled");
        this.launchBtn.style.color = "yellow";
        this.launchBtn.classList.add("tooltip");
        var e = document.getElementById("mainAsMember-launch-tooltip");
        if (!e) {
            e = document.createElement("span");
            e.setAttribute("id", "mainAsMember-launch-tooltip");
            e.classList.add("tooltiptext");
            e.innerText = "You're joining a private room!";
            this.launchBtn.appendChild(e)
        }
    }
}
;
MainAsMemberScreen.prototype.updMusicBtn = function() {
    if (!app.charMusic) {
        this.charMusicToggle.classList.add("disabled");
        this.charMusicToggle.classList.remove("enabled")
    } else {
        this.charMusicToggle.classList.add("enabled");
        this.charMusicToggle.classList.remove("disabled")
    }
}
;
MainAsMemberScreen.prototype.updGameModeBtn = function() {
    for (var e = 0; e < GAMEMODES.length; e++) {
        this.gmBtn.classList.remove(GAMEMODES[e])
    }
    this.gmBtn.classList.add(GAMEMODES[this.gameMode]);
    const t = function(e) {
        return e.charAt(0).toUpperCase() + e.slice(1)
    };
    this.gmBtn.firstElementChild.innerHTML = "Change the current game mode<br><font size='2'>Current one is: <u>" + t(GAMEMODES[this.gameMode]) + "</u></font>"
}
;
function genSelectSkin(e, t) {
    if (e.skin !== undefined) {
        document.getElementById(e.skinButtonPrefix + "-" + e.skin).style["border-color"] = "black"
    }
    e.skin = t;
    var i = document.getElementById(e.skinButtonPrefix + "-" + e.skin);
    if (i) {
        i.style["border-color"] = "white"
    } else {
        var s = document.getElementById("skin-select").children;
        if (0 == s.length)
            throw "no skins?!";
        e.skin = parseInt(s[0].id.split("-").slice(-1)[0]);
        document.getElementById(e.skinButtonPrefix + "-" + e.skin).style["border-color"] = "white"
    }
}
function genAddSkinButton(e, t) {
    for (var i = 0; i < SKINCOUNT; i++) {
        if (t && false) {
            if (GUEST_SKINS.length && !GUEST_SKINS.includes(i))
                 continue
        }
        //if (DEV_SKINS.includes(i) && (!(e instanceof ProfileScreen) || !["taliondiscord", "damonj17", "ddmil@marioroyale:~$", "pixelcraftian", "igor", "minus", "cyuubi", "gyorokpeter", "zizzydizzymc", "nuts & milk", "jupitersky", "nethowarrior", "real novex", "nightyoshi370"].includes(app.net.username.toLowerCase()))) {
        //    continue
        //}
        var s = document.createElement("div");
        s.setAttribute("class", "skin-select-button");
        s.setAttribute("id", e.skinButtonPrefix + "-" + i);
        s.style["background-image"] = "url('" + ASSETS_URL + "img/game/smb_skin" + i +".png')";
        s.addEventListener("click", function(t) {
            return function() {
                genSelectSkin(e, t)
            }
        }(i));
        document.getElementById(e.skinButtonPrefix).appendChild(s)
    }
    $("#" + e.skinButtonPrefix).pagify(240, ".skin-select-button");
    $("#" + e.skinButtonPrefix + "-pagination").pagify(20, ".page")
}
function NameScreen() {
    this.element = document.getElementById("name");
    this.linkElement = document.getElementById("link");
    this.nameInput = document.getElementById("name-input");
    this.teamInput = document.getElementById("team-input");
    this.charMusicToggle = document.getElementById("char-music-toggle");
    this.backBtn = document.getElementById("name-back");
    this.isPrivate = false;
    this.gameMode = 0;
    this.privateBtn = document.getElementById("name-private-toggle");
    this.gmBtn = document.getElementById("name-gm-change");
    this.launchBtn = document.getElementById("name-launch");
    this.autoMoveBtn = document.getElementById("autoMove");
    this.padLoop = undefined;
    this.skinButtonPrefix = "skin-select";
    var e = this;
    var t = document.getElementById("levelSelectInput");
    t.addEventListener("change", function() {
        return function(t) {
            e.customLevelFileChangeHandler(this, t)
        }
    }());
    t = document.getElementById("gfxTestSkinInput");
    t.addEventListener("change", function() {
        return function(t) {
            e.gfxTestSkinInputChangeHandler(this, t)
        }
    }());
    t = document.getElementById("gfxTestMapInput");
    t.addEventListener("change", function() {
        return function(t) {
            e.gfxTestMapInputChangeHandler(this, t)
        }
    }());
    t = document.getElementById("gfxTestObjInput");
    t.addEventListener("change", function() {
        return function(t) {
            e.gfxTestObjInputChangeHandler(this, t)
        }
    }());
    t = document.getElementById("gfxTestSkinRemove");
    t.addEventListener("click", function() {
        return function(t) {
            e.gfxTestSkinRemove(t)
        }
    }());
    t = document.getElementById("gfxTestMapRemove");
    t.addEventListener("click", function() {
        return function(t) {
            e.gfxTestMapRemove(t)
        }
    }());
    t = document.getElementById("gfxTestObjRemove");
    t.addEventListener("click", function() {
        return function(t) {
            e.gfxTestObjRemove(t)
        }
    }());
    this.autoMoveBtn.addEventListener("click", function() {
        return function(t) {
            e.setAutoMove(!app.autoMove)
        }
    }());
    this.launchBtn.onclick = function() {
        e.launch()
    }
    ;
    this.teamInput.onkeyup = function() {
        if (e.teamInput.value.trim() === "" && e.isPrivate) {
            e.teamInput.placeholder = "[ PRIVATE ]"
        } else
            e.teamInput.placeholder = "Squad Code"
    }
    ;
    this.privateBtn.onclick = function() {
        e.isPrivate = !e.isPrivate;
        e.updPrivateBtn();
        Cookies.set("priv", e.isPrivate, {
            expires: 30
        });
        if (e.teamInput.value.trim() === "" && e.isPrivate) {
            e.teamInput.placeholder = "[ PRIVATE ]"
        } else
            e.teamInput.placeholder = "Squad Code"
    }
    ;
    this.charMusicToggle.onclick = function() {
        app.charMusic = !app.charMusic;
        e.updMusicBtn();
        Cookies.set("char_music", app.charMusic ? "1" : "0", {
            expires: 30
        })
    }
    ;
    this.gmBtn.onclick = function() {
        e.gameMode = (e.gameMode + 1) % GAMEMODES.length;
        e.updGameModeBtn();
        Cookies.set("gamemode", e.gameMode, {
            expires: 30
        })
    }
    ;
    this.backBtn.onclick = function() {
        e.onBack()
    }
}
NameScreen.prototype.updPrivateBtn = function() {
    if (!this.isPrivate) {
        this.privateBtn.classList.add("disabled");
        this.privateBtn.classList.remove("enabled");
        this.launchBtn.style.color = "";
        this.launchBtn.classList.remove("tooltip");
        if (this.launchBtn.lastChild.nodeName == "SPAN") {
            this.launchBtn.removeChild(this.launchBtn.lastChild)
        }
    } else {
        this.privateBtn.classList.add("enabled");
        this.privateBtn.classList.remove("disabled");
        this.launchBtn.style.color = "yellow";
        this.launchBtn.classList.add("tooltip");
        var e = document.createElement("span");
        e.classList.add("tooltiptext");
        e.innerText = "You're joining to a private room!";
        this.launchBtn.appendChild(e)
    }
}
;
NameScreen.prototype.updMusicBtn = function() {
    if (!app.charMusic) {
        this.charMusicToggle.classList.add("disabled");
        this.charMusicToggle.classList.remove("enabled")
    } else {
        this.charMusicToggle.classList.add("enabled");
        this.charMusicToggle.classList.remove("disabled")
    }
}
;
NameScreen.prototype.updGameModeBtn = function() {
    for (var e = 0; e < GAMEMODES.length; e++) {
        this.gmBtn.classList.remove(GAMEMODES[e])
    }
    this.gmBtn.classList.add(GAMEMODES[this.gameMode]);
    const t = function(e) {
        return e.charAt(0).toUpperCase() + e.slice(1)
    };
    this.gmBtn.firstElementChild.innerHTML = "Change the current game mode<br><font size='2'>Current one is: <u>" + t(GAMEMODES[this.gameMode]) + "</u></font>"
}
;
NameScreen.prototype.selectSkin = function(e) {
    genSelectSkin(this, e)
}
;
NameScreen.prototype.selectLevel = function(e) {
    app.net.send({
        type: "gsl",
        name: e
    })
}
;
NameScreen.prototype.updateLevelSelectButton = function(e) {
    if (this.currLevelSelectButton != undefined) {
        this.currLevelSelectButton.style["border-color"] = "black"
    }
    if (e == "custom") {
        elem = document.getElementById("levelSelectCustom")
    } else {
        for (var t = 0; t < levelSelectors.length; t++) {
            if (levelSelectors[t].longId == e) {
                elem = levelSelectors[t].elem;
                break
            }
        }
    }
    elem.style["border-color"] = "white";
    this.currLevelSelectButton = elem
}
;
function uploadFile(e, t, i) {
    var s = t.target.files;
    if (s.length == 0)
        return;
    var o = new FileReader;
    o.onload = function(e) {
        i(e.target.result)
    }
    ;
    var a = s[0];
    if (e)
        o.readAsBinaryString(a);
    else
        o.readAsText(a)
}
NameScreen.prototype.customLevelFileChangeHandler = function(e, t) {
    uploadFile(false, t, (function(e) {
        app.net.send({
            type: "gsl",
            name: "custom",
            data: e
        })
    }
    ))
}
;
NameScreen.prototype.gfxTestSkinInputChangeHandler = function(e, t) {
    var i = this;
    uploadFile(true, t, (function(e) {
        i.setTestSkinImg(e)
    }
    ))
}
;
NameScreen.prototype.gfxTestMapInputChangeHandler = function(e, t) {
    var i = this;
    uploadFile(true, t, (function(e) {
        i.setTestMapImg(e)
    }
    ))
}
;
NameScreen.prototype.gfxTestObjInputChangeHandler = function(e, t) {
    var i = this;
    uploadFile(true, t, (function(e) {
        i.setTestObjImg(e)
    }
    ))
}
;
NameScreen.prototype.gfxTestSkinRemove = function(e) {
    if (!app.overrideSkinImg)
        return;
    app.overrideSkinImg = undefined;
    delete localStorage["overrideSkinImg"];
    delete app.game.display.resource.texture.cache["skin" + app.game.skin];
    app.game.display.resource.loadTexture(app.game.display.resource.texture.res["skin" + app.game.skin])
}
;
NameScreen.prototype.gfxTestMapRemove = function(e) {
    if (!app.overrideMapImg)
        return;
    app.overrideMapImg = undefined;
    delete localStorage["overrideMapImg"];
    delete app.game.display.resource.texture.cache["map"];
    app.game.display.resource.loadTexture(app.game.display.resource.texture.res["map"])
}
;
NameScreen.prototype.gfxTestObjRemove = function(e) {
    if (!app.overrideObjImg)
        return;
    app.overrideObjImg = undefined;
    delete localStorage["overrideObjImg"];
    delete app.game.display.resource.texture.cache["obj"];
    app.game.display.resource.loadTexture(app.game.display.resource.texture.res["obj"])
}
;
function makeImageFromData(e) {
    var t = document.createElement("img");
    d_data = e;
    t.src = "data:image/png;base64," + btoa(e);
    return t
}
NameScreen.prototype.setTestSkinImg = function(e) {
    var t = makeImageFromData(e);
    localStorage["overrideSkinImg"] = e;
    app.overrideSkinImg = t;
    app.game.display.resource.texture.cache["skin" + app.game.skin] = t
}
;
NameScreen.prototype.setTestMapImg = function(e) {
    var t = makeImageFromData(e);
    localStorage["overrideMapImg"] = e;
    app.overrideMapImg = t;
    app.game.display.resource.texture.cache["map"] = t
}
;
NameScreen.prototype.setTestObjImg = function(e) {
    var t = makeImageFromData(e);
    localStorage["overrideObjImg"] = e;
    app.overrideObjImg = t;
    app.game.display.resource.texture.cache["obj"] = t
}
;
NameScreen.prototype.setAutoMove = function(e) {
    if (!game.forceAutoMove)
        app.autoMove = e;
    Cookies.set("autoMove", e, {
        expires: 30
    });
    this.autoMoveBtn.innerText = (e ? "[X]" : "[ ]") + " Auto Move"
}
;
NameScreen.prototype.launch = function() {
    Cookies.set("name", this.nameInput.value, {
        expires: 30
    });
    Cookies.set("team", this.teamInput.value, {
        expires: 30
    });
    Cookies.set("skin", this.skin, {
        expires: 30
    });
    app.join(this.nameInput.value, this.teamInput.value, this.isPrivate, this.skin, this.gameMode)
}
;
NameScreen.prototype.startPad = function() {
    genStartPad(this)
}
;
NameScreen.prototype.show = function() {
    app.menu.hideAll();
    app.menu.navigation("name", "name");
    app.menu.background("a");
    var e = Cookies.get("name")
      , t = Cookies.get("team")
      , i = Cookies.get("priv")
      , s = Cookies.get("skin")
      , o = Cookies.get("gamemode");
    this.nameInput.value = e ? e : "";
    this.teamInput.value = t ? t : "";
    this.isPrivate = i ? i == "true" : false;
    this.gameMode = o ? parseInt(o) : 0;
    if (this.teamInput.value.trim() === "" && this.isPrivate) {
        this.teamInput.placeholder = "[ PRIVATE ]"
    }
    if ($("#skin-select div").length === 0) {
        genAddSkinButton(this, true)
    }
    this.selectSkin(s ? parseInt(s) : 0);
    this.updPrivateBtn();
    this.updMusicBtn();
    this.updGameModeBtn();
    this.startPad();
    this.setAutoMove(app.autoMove);
    this.linkElement.style.display = "block";
    this.element.style.display = "block"
}
;
NameScreen.prototype.hide = function() {
    this.padLoop && clearTimeout(this.padLoop);
    this.linkElement.style.display = "none";
    this.element.style.display = "none"
}
;
NameScreen.prototype.onBack = function() {
    app.menu.main.show()
}
;
"use strict";
function ProfileScreen() {
    this.element = document.getElementById("profile");
    this.saveBtn = document.getElementById("profile-save");
    this.resultLabel = document.getElementById("profileSaveResult");
    this.nicknameInput = document.getElementById("profile-nickname");
    this.squadInput = document.getElementById("profile-team");
    this.skinButtonPrefix = "profile-skin-select";
    var e = this;
    this.saveBtn.onclick = function() {
        e.save();
        window.location.reload();
    }
}
ProfileScreen.prototype.show = function(e) {
    app.menu.hideAll();
    app.menu.navigation("profile", "profile");
    app.menu.background("a");
    this.nicknameInput.value = e["nickname"];
    this.squadInput.value = e["squad"];
    if ($("#profile-skin-select div").length === 0) {
        genAddSkinButton(this, false)
    }
    genSelectSkin(this, e["skin"]);
    this.reportError("");
    this.element.style.display = "block"
}
;
ProfileScreen.prototype.hide = function() {
    this.element.style.display = "none"
}
;
ProfileScreen.prototype.save = function() {
    app.net.send({
        type: "lpr",
        nickname: this.nicknameInput.value,
        squad: this.squadInput.value,
        skin: this.skin
    })
}
;
ProfileScreen.prototype.onBack = function() {
    this.save()
}
;
ProfileScreen.prototype.reportError = function(e) {
    this.resultLabel.style.display = e ? "block" : "none";
    this.resultLabel.style.color = "red";
    this.resultLabel.innerText = e
}
;
function PwdChangeScreen() {
    this.element = document.getElementById("pwd");
    this.saveBtn = document.getElementById("pwd-save");
    this.passwordInput = document.getElementById("pwd-password-input");
    this.passwordInput2 = document.getElementById("pwd-password2-input");
    this.resultLabel = document.getElementById("pwdResult");
    this.backBtn = document.getElementById("pwd-back");
    var e = this;
    this.saveBtn.onclick = function() {
        e.save()
    }
    ;
    this.backBtn.onclick = function() {
        e.onBack()
    }
}
PwdChangeScreen.prototype.show = function(e) {
    app.menu.hideAll();
    app.menu.navigation("pwdChange", "pwdChange");
    app.menu.background("a");
    this.element.style.display = "block"
}
;
PwdChangeScreen.prototype.hide = function() {
    this.element.style.display = "none"
}
;
PwdChangeScreen.prototype.reportError = function(e) {
    this.resultLabel.style.color = "red";
    this.resultLabel.innerText = e
}
;
PwdChangeScreen.prototype.save = function() {
    this.reportError("");
    var e = this.passwordInput.value;
    var t = this.passwordInput2.value;
    if (e.length < 8) {
        this.reportError("Password is too short");
        return
    }
    if (e != t) {
        this.reportError("Passwords don't match");
        return
    }
    app.net.send({
        type: "lpc",
        password: e
    });
    app.menu.mainAsMember.show()
}
;
PwdChangeScreen.prototype.onBack = function() {
    app.menu.mainAsMember.show()
}
;
"use strict";
function LoginScreen() {
    this.element = document.getElementById("login");
    this.form = document.getElementById("login-form");
    this.userNameInput = document.getElementById("login-username-input");
    this.passwordInput = document.getElementById("login-password-input");
    this.launchBtn = document.getElementById("login-do");
    this.backBtn = document.getElementById("login-back");
    this.resultLabel = document.getElementById("loginResult");
    var e = this;
    this.form.onsubmit = function(e) {
        e.preventDefault()
    }
    ;
    this.launchBtn.onclick = function() {
        e.launch()
    }
    ;
    this.backBtn.onclick = function() {
        e._onBack()
    }
}
LoginScreen.prototype.show = function() {
    app.menu.hideAll();
    app.menu.navigation("login", "login");
    app.menu.background("a");
    this.element.style.display = "block"
}
;
LoginScreen.prototype.hide = function() {
    this.element.style.display = "none"
}
;
LoginScreen.prototype._onBack = function() {
    app.menu.main.show()
}
;
LoginScreen.prototype.reportError = function(e) {
    this.resultLabel.style.color = "red";
    this.resultLabel.innerText = e
}
;
LoginScreen.prototype.launch = function() {
    this.reportError("");
    var e = this.userNameInput.value;
    var t = this.passwordInput.value;
    if (e.length < 3) {
        this.reportError("Username is too short");
        return
    }
    if (t.length < 3) {
        this.reportError("Password is too short");
        return
    }
    app.login(e, t)
}
;
function RegisterScreen() {
    this.element = document.getElementById("register");
    this.form = document.getElementById("register-form");
    this.userNameInput = document.getElementById("register-username-input");
    this.passwordInput = document.getElementById("register-password-input");
    this.passwordInput2 = document.getElementById("register-password2-input");
    this.captchaInput = document.getElementById("register-captcha-input");
    this.launchBtn = document.getElementById("register-do");
    this.backBtn = document.getElementById("register-back");
    this.resultLabel = document.getElementById("registerResult");
    var e = this;
    this.form.onsubmit = function(e) {
        e.preventDefault()
    }
    ;
    this.launchBtn.onclick = function() {
        e.launch()
    }
    ;
    this.backBtn.onclick = function() {
        e._onBack()
    }
}
RegisterScreen.prototype.show = function() {
    app.menu.hideAll();
    app.menu.navigation("register", "register");
    app.menu.background("a");
    this.element.style.display = "block"
}
;
RegisterScreen.prototype.hide = function() {
    this.element.style.display = "none"
}
;
RegisterScreen.prototype._onBack = function() {
    app.menu.main.show()
}
;
RegisterScreen.prototype.reportError = function(e) {
    this.resultLabel.style.color = "red";
    this.resultLabel.innerText = e
}
;
RegisterScreen.prototype.launch = function() {
    this.reportError("");
    var e = this.userNameInput.value;
    var t = this.passwordInput.value;
    var i = this.passwordInput2.value;
    var s = this.captchaInput.value;
    if (e.length < 3) {
        this.reportError("Username is too short");
        return
    }
    if (e.length > 20) {
        this.reportError("Username is too long");
        return
    }
    if (t.length < 8) {
        this.reportError("Password is too short");
        return
    }
    if (t != i) {
        this.reportError("Passwords don't match");
        return
    }
    if (s.length != 5) {
        this.reportError("Invalid captcha");
        return
    }
    app.register(e, t, s)
}
;
function GameScreen() {
    this.element = document.getElementById("game");
    this.devConsoleToggle = document.getElementById("devConsole-showHide");
    this.devConsoleMain = document.getElementById("devConsole-main");
    this.devConsolePlayerList = document.getElementById("devConsole-playerList");
    this.devConsoleOn = false;
    this.devConsoleRenameForm = document.getElementById("devConsole-renameForm");
    this.devConsoleRenameField = document.getElementById("devConsole-renameField");
    this.devConsoleReSquadField = document.getElementById("devConsole-resquadField");
    this.selectedPlayerId = null;
    this.renamingPlayerId = null;
    this.selectedPlayerTr = null;
    var e = this;
    this.devConsoleToggle.onclick = function(t) {
        if (e.devConsoleOn) {
            e.devConsoleOn = false;
            e.devConsoleMain.style.display = "none";
            t.target.innerText = "DEV>"
        } else {
            e.devConsoleOn = true;
            e.devConsoleMain.style.display = "";
            t.target.innerText = "DEV<"
        }
    }
    ;
    document.getElementById("devConsole-kick").onclick = function() {
        e.kickPlayer()
    }
    ;
    document.getElementById("devConsole-ban").onclick = function() {
        e.banPlayer()
    }
    ;
    document.getElementById("devConsole-rename").onclick = function() {
        e.startRenamePlayer()
    }
    ;
    document.getElementById("devConsole-renameDone").onclick = function() {
        e.finishRenamePlayer()
    }
    ;
    document.getElementById("devConsole-resquadDone").onclick = function() {
        e.finishReSquadPlayer()
    }
}
GameScreen.prototype.show = function() {
    app.menu.hideAll();
    app.menu.navigation("game", "game");
    app.menu.background("c");
    this.element.style.display = "block";
    if (app.game.isDev)
        document.getElementById("devConsole").style.display = ""
}
;
GameScreen.prototype.hide = function() {
    this.element.style.display = "none"
}
;
GameScreen.prototype.onBack = function() {
    app.close()
}
;
GameScreen.prototype.updatePlayerList = function(e) {
    var t = false;
    this.selectedPlayerTr = null;
    this.devConsolePlayerList.innerHTML = "";
    var i = document.createElement("table");
    i.style.color = "white";
    this.devConsolePlayerList.appendChild(i);
    var s = document.createElement("tr");
    i.appendChild(s);
    ["id", "account", "sqd", "nickname"].map(e=>{
        var t = document.createElement("th");
        t.innerText = e;
        s.appendChild(t)
    }
    );
    var o = this;
    for (var a of e) {
        var r = document.createElement("tr");
        i.append(r);
        [a.id, a.username, a.team, a.displayName].map(e=>{
            var t = document.createElement("td");
            t.innerText = "" + e;
            r.appendChild(t)
        }
        );
        r.playerId = a.id;
        if (this.selectedPlayerId == a.id) {
            t = true;
            r.style.color = "yellow";
            this.selectedPlayerTr = r
        }
        r.onclick = function(e) {
            return function(t) {
                if (o.selectedPlayerTr) {
                    o.selectedPlayerTr.style.color = ""
                }
                e.style.color = "yellow";
                o.selectedPlayerId = e.playerId;
                o.selectedPlayerTr = e
            }
        }(r)
    }
    if (!t)
        this.selectedPlayerId = null
}
;
GameScreen.prototype.kickPlayer = function() {
    if (this.selectedPlayerId === null)
        return;
    app.game.send({
        type: "gbn",
        pid: this.selectedPlayerId,
        ban: false
    })
}
;
GameScreen.prototype.banPlayer = function() {
    if (this.selectedPlayerId === null)
        return;
    app.game.send({
        type: "gbn",
        pid: this.selectedPlayerId,
        ban: true
    })
}
;
GameScreen.prototype.startRenamePlayer = function() {
    if (this.selectedPlayerId === null)
        return;
    this.renamingPlayerId = this.selectedPlayerId;
    var e = app.getPlayerInfo(this.selectedPlayerId);
    this.devConsoleRenameField.value = e.name;
    this.devConsoleReSquadField.value = e.team;
    this.devConsoleRenameForm.style.display = ""
}
;
GameScreen.prototype.finishRenamePlayer = function() {
    if (this.selectedPlayerId === null)
        return;
    var e = this.devConsoleRenameField.value;
    if (e === "")
        return;
    app.game.send({
        type: "gnm",
        pid: this.renamingPlayerId,
        name: e
    });
    this.renamingPlayerId = null;
    this.devConsoleRenameForm.style.display = "none"
}
;
GameScreen.prototype.finishReSquadPlayer = function() {
    if (this.selectedPlayerId === null)
        return;
    var e = this.devConsoleReSquadField.value;
    if (e === "")
        return;
    app.game.send({
        type: "gsq",
        pid: this.renamingPlayerId,
        name: e
    });
    this.renamingPlayerId = null;
    this.devConsoleRenameForm.style.display = "none"
}
;
"use strict";
function Network() {
    this.pendingArgs = []
}
Network.CONNECTTYPE = {};
Network.CONNECTTYPE.GUEST = 0;
Network.CONNECTTYPE.LOGIN = 1;
Network.CONNECTTYPE.REQ_CAPTCHA = 2;
Network.CONNECTTYPE.REGISTER = 3;
Network.CONNECTTYPE.RESUME = 4;
Network.prototype.connected = function() {
    return undefined !== this.webSocket && this.webSocket.readyState !== WebSocket.CLOSED
}
;
Network.prototype.openWs = function(e) {
    var t = this;
    if (this.connected()) {
        app.menu.error.show("A connection already exists under this instance");
        return
    }
    this.webSocket = new WebSocket(WEBSOCKET_SERVER);
    this.webSocket.binaryType = "arraybuffer";
    this.webSocket.onopen = function(e) {
        "open" !== e.type && app.menu.error.show("Invalid connection status")
    }
    ;
    this.webSocket.onmessage = function(e) {
        e.data instanceof ArrayBuffer ? t.handleBinary(new Uint8Array(e.data)) : t.handlePacket(JSON.parse(e.data))
    }
    ;
    this.webSocket.onclose = function(e) {
        t.webSocket = undefined;
        document.getElementById("privLobby").style.display = "none";
        document.getElementById("settings-show-privLobby").style.display = "none";
        app.menu.error.show("Connection has unexpectedly disconnected")
    }
}
;
Network.prototype.connect = function(e) {
    var t = this.connected();
    this.pendingArgs = [];
    if (0 == e.length) {
        return
    }
    if (!t) {
        this.pendingArgs = e;
        this.openWs(e);
        return
    }
    connectType = e[0];
    if (connectType == Network.CONNECTTYPE.GUEST) {
        var i = e[1];
        var s = e[2];
        var o = e[3];
        var a = e[4];
        var r = e[5];
        this.prefName = i;
        this.prefTeam = s;
        this.isPrivate = o;
        this.skin = a;
        this.gameMode = r;
        this.send({
            type: "l00",
            name: this.prefName,
            team: this.prefTeam,
            private: this.isPrivate,
            skin: this.skin,
            gm: this.gameMode
        })
    } else if (connectType == Network.CONNECTTYPE.LOGIN) {
        var n = e[1];
        this.send({
            type: "llg",
            username: n,
            password: e[2]
        })
    } else if (connectType == Network.CONNECTTYPE.REQ_CAPTCHA) {
        this.send({
            type: "lrc"
        })
    } else if (connectType == Network.CONNECTTYPE.REGISTER) {
        var n = e[1];
        this.username = n;
        this.send({
            type: "lrg",
            username: this.username,
            password: e[2],
            captcha: e[3]
        })
    } else if (connectType == Network.CONNECTTYPE.RESUME) {
        var p = e[1];
        this.session = p;
        this.send({
            type: "lrs",
            session: this.session
        })
    } else {
        console.error("args = " + e);
        app.menu.error.show("Assert failed in Net.connect")
    }
}
;
Network.prototype.handlePacket = function(e) {
    if (undefined === this.state || !this.state.handlePacket(e))
        switch (e.type) {
        case "s00":
            this.setState(e.state);
            break;
        case "s01":
            this.handleBlob(e.packets);
            break;
        case "s02":
            break;
        case "x00":
            app.menu.error.show("Server Exception", e.message);
            break;
        case "x01":
            app.menu.error.show("Server Exception", e.message, e.trace);
            break;
        default:
            app.menu.error.show("Recieved invalid packet type: " + e.type, JSON.stringify(e))
        }
}
;
Network.prototype.handleBinary = function(e) {
    this.state.handleBinary(e)
}
;
Network.prototype.handleBlob = function(e) {
    for (var t = 0; t < e.length; t++)
        this.handlePacket(e[t])
}
;
Network.prototype.setState = function(e) {
    undefined !== this.state && this.state.destroy();
    switch (e) {
    case "l":
        this.state = new InputState(this.pendingArgs);
        break;
    case "g":
        this.state = new GameState;
        break;
    default:
        app.menu.error.show("Received invalid state ID: " + e);
        return
    }
    this.state.ready()
}
;
Network.prototype.send = function(e) {
    this.webSocket.send(JSON.stringify(e))
}
;
Network.prototype.sendBinary = function(e) {
    this.webSocket.send(e.buffer)
}
;
Network.prototype.close = function() {
    undefined !== this.webSocket && this.webSocket.close();
    app.ingame() && app.game.destroy()
}
;
"use strict";
function InputState(e) {
    this.pendingArgs = e
}
InputState.prototype.handlePacket = function(e) {
    switch (e.type) {
    case "l01":
        return this.loggedIn(e),
        true;
    case "llg":
        return this.handleLoginResult(e),
        true;
    case "lrc":
        return this.handleRequestCaptcha(e),
        true;
    case "lrg":
        return this.handleRegisterResult(e),
        true;
    case "lrs":
        return this.handleLoginResult(e),
        true;
    case "llo":
        return this.handleLogoutResult(e),
        true;
    case "lpr":
        return this.handleUpdProfileResult(e),
        true;
    default:
        return false
    }
}
;
InputState.prototype.handleBinary = function(e) {
    app.menu.warn.show("Recieved unexpected binary data!")
}
;
InputState.prototype.ready = function() {
    app.net.connect(app.net.pendingArgs)
}
;
InputState.prototype.loggedIn = function(e) {
    app.net.name = e.name;
    console.log("Logged in: " + e.name + " :: " + e.team)
}
;
InputState.prototype.handleLogoutResult = function(e) {
    Cookies.remove("session");
    Cookies.remove("go_to_lobby");
    location.reload()
}
;
InputState.prototype.handleUpdProfileResult = function(e) {
    var t = app.menu.profile.nicknameInput.value;
    var i = app.menu.profile.squadInput.value;
    var s = app.menu.profile.skin;
    var o = e.changes;
    if ("nickname"in o)
        t = o.nickname;
    if ("squad"in o)
        i = o.squad;
    if ("skin"in o)
        s = o.skin;
    if (e.status) {
        app.menu.mainAsMember.show({
            nickname: t,
            squad: i,
            skin: s
        })
    } else {
        app.menu.profile.reportError(e.msg)
    }
}
;
InputState.prototype.handleLoginResult = function(e) {
    if (e.status) {
        app.net.username = e.username;
        app.menu.mainAsMember.show(e.msg)
    } else {
        Cookies.remove("session");
        app.menu.login.show();
        app.menu.login.reportError(e.msg)
    }
}
;
InputState.prototype.handleRequestCaptcha = function(e) {
    if (e.data) {
        var t = document.getElementById("register-captcha");
        t.src = "data:image/png;base64, " + e.data
    } else {
        document.getElementById("register-captcha-input").style.display = "none"
    }
    app.menu.register.show()
}
;
InputState.prototype.handleRegisterResult = function(e) {
    if (e.status) {
        app.menu.mainAsMember.show(e.msg)
    } else {
        app.menu.register.show();
        app.menu.register.reportError(e.msg)
    }
}
;
InputState.prototype.send = function(e) {
    app.net.send(e)
}
;
InputState.prototype.type = function() {
    return "l"
}
;
InputState.prototype.destroy = function() {}
;
"use strict";
function GameState() {
    this.pingOut = false;
    this.pingLast = 0;
    this.pingFrame = 90
}
GameState.prototype.handlePacket = function(e) {
    switch (e.type) {
    case "g01":
        return this.load(e),
        true;
    case "g06":
        return this.globalWarn(e),
        true;
    case "g21":
        return this.recievePing(e),
        true;
    case "gll":
        return this.receiveLevelList(e),
        true;
    case "gsl":
        return this.recieveLevelSelectResult(e),
        true;
    case "gnm":
        return this.renamePlayer(e),
        true;
    case "gsq":
        return this.resquadPlayer(e),
        true;
    case "ghu":
        return app.hurryUp(e),
        true;
    case "gtk":
        return app.tick(e),
        true;
    default:
        return app.ingame() ? app.game.handlePacket(e) : false
    }
}
;
GameState.prototype.handleBinary = function(e) {
    app.ingame() && app.game.handleBinary(e)
}
;
GameState.prototype.ready = function() {
    this.send({
        type: "g00"
    })
}
;
GameState.prototype.load = function(e) {
    var t = this;
    if (e.game == "custom") {
        var i = JSON.parse(e.levelData);
        app.load(i);
        t.send({
            type: "g03"
        });
        return
    }
    $.ajax({
        url: "game/" + e.game + "?v=" + VERSION,
        type: "GET",
        timeout: 5e3,
        success: function(e) {
            app.load(e);
            t.send({
                type: "g03"
            })
        },
        error: function() {
            app.menu.error.show("Server returned FNF(404) for game file: " + e.game)
        }
    })
}
;
GameState.prototype.globalWarn = function(e) {
    app.menu.warn.show(e.message)
}
;
GameState.prototype.sendPing = function() {
    var e = util.time.now();
    this.pingOut && 999 > this.pingLast - e || (this.pingOut && (app.net.ping = 999),
    this.send({
        type: "g21",
        delta: e
    }),
    this.pingOut = true)
}
;
GameState.prototype.recievePing = function(e) {
    var t = util.time.now();
    app.net.ping = t - e.delta;
    this.pingOut = false
}
;
GameState.prototype.receiveLevelList = function(e) {
    levelSelectors = e.levels;
    levelSelectors.unshift({
        shortId: "?",
        longId: ""
    });
    for (var t = 0; t < levelSelectors.length; t++) {
        var i = levelSelectors[t];
        var s = document.createElement("div");
        s.setAttribute("class", "levelSelectButton");
        s.innerText = i.shortId;
        s.addEventListener("click", function(e) {
            return function() {
                app.menu.name.selectLevel(e)
            }
        }(i.longId));
        document.getElementById("levelSelectStandard").appendChild(s);
        levelSelectors[t].elem = s
    }
    document.getElementById("privLobbyClose").onclick = function() {
        document.getElementById("privLobby").style.display = "none"
    }
    ;
    document.getElementById("settings-show-privLobby").onclick = function() {
        document.getElementById("privLobby").style.display = "";
        app.settings.showSettings = false;
        document.getElementById("settingsPanel").style.display = "none"
    }
    ;
    document.getElementById("privLobby").style.display = "";
    document.getElementById("settings-show-privLobby").style.display = ""
}
;
GameState.prototype.recieveLevelSelectResult = function(e) {
    if (e.status == "error") {
        var t = document.getElementById("levelSelectCustomResult");
        t.innerText = e.message;
        t.style.color = "red"
    } else if (e.status == "success") {
        var t = document.getElementById("levelSelectCustomResult");
        t.innerText = "upload successful";
        t.style.color = "green"
    } else if (e.status == "update") {
        app.menu.name.updateLevelSelectButton(e.name)
    }
}
;
GameState.prototype.renamePlayer = function(e) {
    var t = app.getPlayerInfo(e.pid);
    t.name = e.name;
    t.displayName = getPlayerDisplayName(t);
    app.menu.game.updatePlayerList(app.players);
    var i = app.game.getGhost(e.pid);
    if (i && i.name !== undefined) {
        i.name = t.displayName
    }
    if (e.pid == app.game.pid && t.isGuest) {
        Cookies.set("name", e.name, {
            expires: 30
        })
    }
}
;
GameState.prototype.resquadPlayer = function(e) {
    var t = app.getPlayerInfo(e.pid);
    t.team = e.name;
    app.menu.game.updatePlayerList(app.players);
    if (e.pid == app.game.pid) {
        app.game.team = e.name;
        for (var i of app.game.objects) {
            if (undefined !== i.pid) {
                var s = app.getPlayerInfo(i.pid);
                i.name = s.team == app.game.team ? s.displayName : undefined
            }
        }
    } else {
        var o = app.game.getGhost(e.pid);
        if (o) {
            o.name = t.team == app.game.team ? t.displayName : undefined
        }
    }
    if (e.pid == app.game.pid && t.isGuest) {
        Cookies.set("team", e.name, {
            expires: 30
        })
    }
}
;
GameState.prototype.send = function(e) {
    app.net.send(e)
}
;
GameState.prototype.type = function() {
    return "g"
}
;
GameState.prototype.destroy = function() {}
;
"use strict";
function GameObject(e, t, i, s) {
    this.game = e;
    this.level = t;
    this.zone = i;
    this.pos = s;
    this.sprite = this.state = undefined;
    this.garbage = this.dead = this.reverse = false;
    this.sounds = []
}
GameObject.ASYNC = true;
GameObject.ID = 0;
GameObject.prototype.update = function(e) {}
;
GameObject.prototype.step = function() {}
;
GameObject.prototype.sound = function() {
    for (var e = 0; e < this.sounds.length; e++) {
        var t = this.sounds[e];
        t.done() ? this.sounds.splice(e--, 1) : t.position(this.pos)
    }
}
;
GameObject.prototype.kill = function() {
    this.dead = true;
    this.destroy()
}
;
GameObject.prototype.destroy = function() {
    this.garbage = this.dead = true
}
;
GameObject.prototype.isTangible = function() {
    return !this.dead && !this.disabled && this.dim
}
;
GameObject.prototype.draw = function() {}
;
GameObject.prototype.play = function(e, t, i) {
    var s = this.game.getZone();
    if (this.zone === s.id && this.level === s.level)
        return e = app.audio.getSpatialAudio(e, t, i, "effect"),
        e.play(this.pos),
        this.sounds.push(e),
        e
}
;
GameObject.OBJECT_LIST = [];
GameObject.REGISTER_OBJECT = function(e) {
    GameObject.OBJECT_LIST.push(e)
}
;
GameObject.OBJECT = function(e) {
    for (var t = 0; t < GameObject.OBJECT_LIST.length; t++) {
        var i = GameObject.OBJECT_LIST[t];
        if (i.ID === e)
            return i
    }
    app.menu.warn.show("Invalid Object Class ID: " + e)
}
;
"use strict";
function PlayerObject(e, t, i, s, o, a, r) {
    GameObject.call(this, e, t, i, s);
    this.pid = o;
    this.skin = a;
    e.display.ensureSkin(a);
    this.isDev = r;
    this.isGuest = false;
    this.anim = 0;
    this.reverse = false;
    this.deadTimer = this.deadFreezeTimer = this.arrowFade = 0;
    this.lastPos = this.pos;
    this.dim = vec2.make(1, 1);
    this.fallSpeed = this.moveSpeed = 0;
    this.jumping = -1;
    this.lastTime = -1;
    this.grounded = this.isSpring = this.isBounce = false;
    this.underWater = 0;
    this.name = undefined;
    this.starTimer = this.power = 0;
    this.starMusic = undefined;
    this.tfmTimer = this.damageTimer = 0;
    this.tfmTarget = -1;
    this.pipeWarp = undefined;
    this.pipeTimer = 0;
    this.pipeExt = this.pipeDir = -1;
    this.poleTimer = this.pipeDelayLength = this.pipeDelay = 0;
    this.poleSound = this.poleWait = false;
    this.vineWarp = undefined;
    this.lastData = undefined;
    this.attackCharge = PlayerObject.MAX_CHARGE;
    this.attackTimer = 0;
    this.autoTarget = undefined;
    this.btnD = [0, 0];
    this.btnBde = this.btnBg = this.btnB = this.btnA = false;
    this.btnAHot = false;
    this.setState(PlayerObject.SNAME.STAND);
    setInterval(()=>{
        this.update(this.lastData)
    }
    , 1e3 / 60)
}
PlayerObject.ASYNC = false;
PlayerObject.ID = 1;
PlayerObject.NAME = "PLAYER";
PlayerObject.ANIMATION_RATE = 3;
PlayerObject.DIM_OFFSET = vec2.make(-.05, 0);
PlayerObject.DEAD_FREEZE_TIME = 7;
PlayerObject.DEAD_TIME = 70;
PlayerObject.DEAD_UP_FORCE = .65;
PlayerObject.RUN_SPEED_MAX = .315;
PlayerObject.MOVE_SPEED_MAX = .215;
PlayerObject.MOVE_SPEED_ACCEL = .0125;
PlayerObject.MOVE_SPEED_DECEL = .0225;
PlayerObject.MOVE_SPEED_ACCEL_AIR = .0025;
PlayerObject.STUCK_SLIDE_SPEED = .08;
PlayerObject.FALL_SPEED_MAX = .45;
PlayerObject.FALL_SPEED_ACCEL = .085;
PlayerObject.BOUNCE_LENGTH_MIN = 1;
PlayerObject.SPRING_LENGTH_MIN = 5;
PlayerObject.SPRING_LENGTH_MAX = 14;
PlayerObject.JUMP_LENGTH_MIN = 3;
PlayerObject.JUMP_LENGTH_MAX = 7;
PlayerObject.JUMP_SPEED_INC_THRESHOLD = [.1, .2, .25];
PlayerObject.JUMP_DECEL = .005;
PlayerObject.BLOCK_BUMP_THRESHOLD = .12;
PlayerObject.POWER_INDEX_SIZE = 32;
PlayerObject.GENERIC_INDEX = 96;
PlayerObject.DAMAGE_TIME = 45;
PlayerObject.TRANSFORM_TIME = 18;
PlayerObject.TRANSFORM_ANIMATION_RATE = 2;
PlayerObject.STAR_LENGTH = 380;
PlayerObject.PROJ_OFFSET = vec2.make(.7, 1.1);
PlayerObject.MAX_CHARGE = 60;
PlayerObject.ATTACK_DELAY = 7;
PlayerObject.ATTACK_CHARGE = 25;
PlayerObject.ATTACK_ANIM_LENGTH = 3;
PlayerObject.PIPE_TIME = 30;
PlayerObject.PIPE_SPEED = .06;
PlayerObject.PIPE_EXT_OFFSET = vec2.make(.5, 0);
PlayerObject.WEED_EAT_RADIUS = 3;
PlayerObject.POLE_DELAY = 15;
PlayerObject.POLE_SLIDE_SPEED = .15;
PlayerObject.LEVEL_END_MOVE_OFF = vec2.make(10, 0);
PlayerObject.CLIMB_SPEED = .125;
PlayerObject.PLATFORM_SNAP_DIST = .15;
PlayerObject.ARROW_SPRITE = 253;
PlayerObject.ARROW_TEXT = "YOU";
PlayerObject.ARROW_OFFSET = vec2.make(0, .1);
PlayerObject.TEXT_OFFSET = vec2.make(0, .55);
PlayerObject.TEXT_SIZE = .65;
PlayerObject.TEXT_COLOR = "#FFFFFF";
PlayerObject.ARROW_RAD_IN = 3;
PlayerObject.ARROW_RAD_OUT = 7;
PlayerObject.ARROW_THRESHOLD_MIN = 4;
PlayerObject.ARROW_THRESHOLD_MAX = 6;
PlayerObject.TEAM_OFFSET = vec2.make(0, 0);
PlayerObject.TEAM_SIZE = .3;
PlayerObject.TEAM_COLOR = "rgba(255,255,255,0.75)";
PlayerObject.DEV_TEAM_COLOR = "rgba(255,255,0,1)";
PlayerObject.SPRITE = {};
PlayerObject.SPRITE_LIST = [{
    NAME: "S_STAND",
    ID: 0,
    INDEX: 13
}, {
    NAME: "S_RUN0",
    ID: 1,
    INDEX: 10
}, {
    NAME: "S_RUN1",
    ID: 2,
    INDEX: 11
}, {
    NAME: "S_RUN2",
    ID: 3,
    INDEX: 12
}, {
    NAME: "S_SLIDE",
    ID: 4,
    INDEX: 9
}, {
    NAME: "S_FALL",
    ID: 5,
    INDEX: 8
}, {
    NAME: "S_CLIMB0",
    ID: 6,
    INDEX: 6
}, {
    NAME: "S_CLIMB1",
    ID: 7,
    INDEX: 7
}, {
    NAME: "B_STAND",
    ID: 32,
    INDEX: [[45], [29]]
}, {
    NAME: "B_DOWN",
    ID: 33,
    INDEX: [[44], [28]]
}, {
    NAME: "B_RUN0",
    ID: 34,
    INDEX: [[41], [25]]
}, {
    NAME: "B_RUN1",
    ID: 35,
    INDEX: [[42], [26]]
}, {
    NAME: "B_RUN2",
    ID: 36,
    INDEX: [[43], [27]]
}, {
    NAME: "B_SLIDE",
    ID: 37,
    INDEX: [[40], [24]]
}, {
    NAME: "B_FALL",
    ID: 38,
    INDEX: [[39], [23]]
}, {
    NAME: "B_CLIMB0",
    ID: 39,
    INDEX: [[37], [21]]
}, {
    NAME: "B_CLIMB1",
    ID: 40,
    INDEX: [[38], [22]]
}, {
    NAME: "B_TRANSFORM",
    ID: 41,
    INDEX: [[46], [30]]
}, {
    NAME: "F_STAND",
    ID: 64,
    INDEX: [[76, 75], [60, 59]]
}, {
    NAME: "F_DOWN",
    ID: 65,
    INDEX: [[74], [58]]
}, {
    NAME: "F_RUN0",
    ID: 66,
    INDEX: [[69, 68], [53, 52]]
}, {
    NAME: "F_RUN1",
    ID: 67,
    INDEX: [[71, 70], [55, 54]]
}, {
    NAME: "F_RUN2",
    ID: 68,
    INDEX: [[73, 72], [57, 56]]
}, {
    NAME: "F_SLIDE",
    ID: 69,
    INDEX: [[67, 66], [51, 50]]
}, {
    NAME: "F_FALL",
    ID: 70,
    INDEX: [[65, 64], [49, 48]]
}, {
    NAME: "F_CLIMB0",
    ID: 71,
    INDEX: [[35], [19]]
}, {
    NAME: "F_CLIMB1",
    ID: 72,
    INDEX: [[36], [20]]
}, {
    NAME: "F_ATTACK",
    ID: 73,
    INDEX: [[79, 78], [63, 62]]
}, {
    NAME: "F_TRANSFORM",
    ID: 80,
    INDEX: [[77], [61]]
}, {
    NAME: "G_DEAD",
    ID: 96,
    INDEX: 0
}, {
    NAME: "G_HIDE",
    ID: 112,
    INDEX: 14
}];
for (var _0x1bec55 = 0; _0x1bec55 < PlayerObject.SPRITE_LIST.length; _0x1bec55++)
    PlayerObject.SPRITE[PlayerObject.SPRITE_LIST[_0x1bec55].NAME] = PlayerObject.SPRITE_LIST[_0x1bec55],
    PlayerObject.SPRITE[PlayerObject.SPRITE_LIST[_0x1bec55].ID] = PlayerObject.SPRITE_LIST[_0x1bec55];
PlayerObject.SNAME = {};
PlayerObject.SNAME.STAND = "STAND";
PlayerObject.SNAME.DOWN = "DOWN";
PlayerObject.SNAME.RUN = "RUN";
PlayerObject.SNAME.SLIDE = "SLIDE";
PlayerObject.SNAME.FALL = "FALL";
PlayerObject.SNAME.POLE = "POLE";
PlayerObject.SNAME.CLIMB = "CLIMB";
PlayerObject.SNAME.ATTACK = "ATTACK";
PlayerObject.SNAME.TRANSFORM = "TRANSFORM";
PlayerObject.SNAME.DEAD = "DEAD";
PlayerObject.SNAME.HIDE = "HIDE";
PlayerObject.SNAME.GHOST = "GHOST";
PlayerObject.SNAME.DEADGHOST = "DEADGHOST";
PlayerObject.HideSprite = 112;
var _0x4a74c1 = vec2.make(.9, .95)
  , _0x124f5a = vec2.make(.9, 1.9);
PlayerObject.STATE = [{
    NAME: PlayerObject.SNAME.STAND,
    ID: 0,
    DIM: _0x4a74c1,
    SPRITE: [PlayerObject.SPRITE.S_STAND]
}, {
    NAME: PlayerObject.SNAME.DOWN,
    ID: 1,
    DIM: _0x4a74c1,
    SPRITE: [PlayerObject.SPRITE.S_STAND]
}, {
    NAME: PlayerObject.SNAME.RUN,
    ID: 2,
    DIM: _0x4a74c1,
    SPRITE: [PlayerObject.SPRITE.S_RUN2, PlayerObject.SPRITE.S_RUN1, PlayerObject.SPRITE.S_RUN0]
}, {
    NAME: PlayerObject.SNAME.SLIDE,
    ID: 3,
    DIM: _0x4a74c1,
    SPRITE: [PlayerObject.SPRITE.S_SLIDE]
}, {
    NAME: PlayerObject.SNAME.FALL,
    ID: 4,
    DIM: _0x4a74c1,
    SPRITE: [PlayerObject.SPRITE.S_FALL]
}, {
    NAME: PlayerObject.SNAME.TRANSFORM,
    ID: 5,
    DIM: _0x4a74c1,
    SPRITE: [PlayerObject.SPRITE.S_STAND]
}, {
    NAME: PlayerObject.SNAME.POLE,
    ID: 6,
    DIM: _0x4a74c1,
    SPRITE: [PlayerObject.SPRITE.S_CLIMB1]
}, {
    NAME: PlayerObject.SNAME.CLIMB,
    ID: 7,
    DIM: _0x4a74c1,
    SPRITE: [PlayerObject.SPRITE.S_CLIMB0, PlayerObject.SPRITE.S_CLIMB1]
}, {
    NAME: PlayerObject.SNAME.STAND,
    ID: 32,
    DIM: _0x124f5a,
    SPRITE: [PlayerObject.SPRITE.B_STAND]
}, {
    NAME: PlayerObject.SNAME.DOWN,
    ID: 33,
    DIM: _0x4a74c1,
    SPRITE: [PlayerObject.SPRITE.B_DOWN]
}, {
    NAME: PlayerObject.SNAME.RUN,
    ID: 34,
    DIM: _0x124f5a,
    SPRITE: [PlayerObject.SPRITE.B_RUN2, PlayerObject.SPRITE.B_RUN1, PlayerObject.SPRITE.B_RUN0]
}, {
    NAME: PlayerObject.SNAME.SLIDE,
    ID: 35,
    DIM: _0x124f5a,
    SPRITE: [PlayerObject.SPRITE.B_SLIDE]
}, {
    NAME: PlayerObject.SNAME.FALL,
    ID: 36,
    DIM: _0x124f5a,
    SPRITE: [PlayerObject.SPRITE.B_FALL]
}, {
    NAME: PlayerObject.SNAME.TRANSFORM,
    ID: 37,
    DIM: _0x4a74c1,
    SPRITE: [PlayerObject.SPRITE.B_TRANSFORM]
}, {
    NAME: PlayerObject.SNAME.POLE,
    ID: 38,
    DIM: _0x124f5a,
    SPRITE: [PlayerObject.SPRITE.B_CLIMB0]
}, {
    NAME: PlayerObject.SNAME.CLIMB,
    ID: 39,
    DIM: _0x124f5a,
    SPRITE: [PlayerObject.SPRITE.B_CLIMB0, PlayerObject.SPRITE.B_CLIMB1]
}, {
    NAME: PlayerObject.SNAME.STAND,
    ID: 64,
    DIM: _0x124f5a,
    SPRITE: [PlayerObject.SPRITE.F_STAND]
}, {
    NAME: PlayerObject.SNAME.DOWN,
    ID: 65,
    DIM: _0x4a74c1,
    SPRITE: [PlayerObject.SPRITE.F_DOWN]
}, {
    NAME: PlayerObject.SNAME.RUN,
    ID: 66,
    DIM: _0x124f5a,
    SPRITE: [PlayerObject.SPRITE.F_RUN2, PlayerObject.SPRITE.F_RUN1, PlayerObject.SPRITE.F_RUN0]
}, {
    NAME: PlayerObject.SNAME.SLIDE,
    ID: 67,
    DIM: _0x124f5a,
    SPRITE: [PlayerObject.SPRITE.F_SLIDE]
}, {
    NAME: PlayerObject.SNAME.FALL,
    ID: 68,
    DIM: _0x124f5a,
    SPRITE: [PlayerObject.SPRITE.F_FALL]
}, {
    NAME: PlayerObject.SNAME.ATTACK,
    ID: 69,
    DIM: _0x124f5a,
    SPRITE: [PlayerObject.SPRITE.F_ATTACK]
}, {
    NAME: PlayerObject.SNAME.TRANSFORM,
    ID: 70,
    DIM: _0x4a74c1,
    SPRITE: [PlayerObject.SPRITE.F_TRANSFORM]
}, {
    NAME: PlayerObject.SNAME.POLE,
    ID: 71,
    DIM: _0x124f5a,
    SPRITE: [PlayerObject.SPRITE.F_CLIMB0]
}, {
    NAME: PlayerObject.SNAME.CLIMB,
    ID: 72,
    DIM: _0x124f5a,
    SPRITE: [PlayerObject.SPRITE.F_CLIMB0, PlayerObject.SPRITE.F_CLIMB1]
}, {
    NAME: PlayerObject.SNAME.DEAD,
    DIM: _0x4a74c1,
    ID: 96,
    SPRITE: [PlayerObject.SPRITE.G_DEAD]
}, {
    NAME: PlayerObject.SNAME.HIDE,
    DIM: _0x4a74c1,
    ID: PlayerObject.HideSprite,
    SPRITE: [PlayerObject.SPRITE.G_HIDE]
}, {
    NAME: PlayerObject.SNAME.GHOST,
    DIM: _0x4a74c1,
    ID: 255,
    SPRITE: []
}, {
    NAME: PlayerObject.SNAME.DEADGHOST,
    DIM: _0x4a74c1,
    ID: 254,
    SPRITE: [PlayerObject.SPRITE.G_DEAD]
}];
PlayerObject.prototype.lastFrame = {};
PlayerObject.prototype.update = function(e) {
    if (!e)
        return;
    if (!(this.dead || this.garbage)) {
        this.setState(e.sprite == PlayerObject.HideSprite ? PlayerObject.SNAME.HIDE : PlayerObject.SNAME.GHOST);
        this.level = e.level;
        this.zone = e.zone;
        var t = Date.now() - this.lastTime;
        if (t <= 30 && this.lastTime != -1) {
            this.pos = vec2.lerp(this.pos, e.pos, t / 30)
        } else {
            this.pos = e.pos
        }
        this.sprite = PlayerObject.SPRITE[e.sprite];
        this.reverse = e.reverse
    }
}
;
PlayerObject.prototype.trigger = function(e) {
    switch (e) {
    case 1:
        this.attack();
        break;
    case 2:
        this.star()
    }
}
;
PlayerObject.prototype.step = function() {
    0 < this.starTimer && (this.starTimer--,
    20 < this.starTimer || this.starMusic && (this.starMusic.stop(),
    this.starMusic = undefined));
    if (this.isState(PlayerObject.SNAME.GHOST))
        this.sound();
    else if (!this.isState(PlayerObject.SNAME.HIDE))
        if (this.isState(PlayerObject.SNAME.POLE))
            if (0 < this.poleTimer && !this.poleWait)
                this.poleTimer--;
            else {
                this.poleSound || (this.poleSound = true,
                this.play("flagpole.mp3", 1, 0));
                if (!this.poleWait)
                    if (0 >= this.poleTimer && this.autoTarget)
                        this.setState(PlayerObject.SNAME.STAND);
                    else {
                        var e = vec2.add(this.pos, vec2.make(0, -.25));
                        var t = vec2.make(this.pos.x, this.pos.y - .25);
                        var i = vec2.make(this.dim.x, this.dim.y + .25);
                        var t = this.game.world.getZone(this.level, this.zone).getTiles(t, i);
                        var i = vec2.make(1, 1);
                        var s = false;
                        for (var o = 0; o < t.length; o++) {
                            var a = t[o];
                            if (squar.intersection(a.pos, i, e, this.dim) && a.definition.COLLIDE) {
                                s = true;
                                break
                            }
                        }
                        s ? (this.poleTimer = 15,
                        this.autoTarget = vec2.add(e, PlayerObject.LEVEL_END_MOVE_OFF),
                        this.poleWait = true) : this.pos = e
                    }
                e = this.game.getFlag(this.level, this.zone);
                e.pos.y - .25 >= this.pos.y ? e.pos.y -= .25 : (e.pos.y = this.pos.y,
                this.poleWait = false)
            }
        else if (this.isState(PlayerObject.SNAME.RUN) ? this.anim += Math.max(.5, Math.abs(5 * this.moveSpeed)) : this.anim++,
        this.sprite = this.state.SPRITE[parseInt(parseInt(this.anim) / PlayerObject.ANIMATION_RATE) % this.state.SPRITE.length],
        this.isState(PlayerObject.SNAME.CLIMB))
            this.pos.y += PlayerObject.CLIMB_SPEED,
            this.pos.y >= this.game.world.getZone(this.level, this.zone).dimensions().y && (this.warp(this.vineWarp),
            this.setState(PlayerObject.SNAME.FALL));
        else if (this.isState(PlayerObject.SNAME.DEAD) || this.isState(PlayerObject.SNAME.DEADGHOST))
            0 < this.deadFreezeTimer ? this.deadFreezeTimer-- : 0 < this.deadTimer ? (this.deadTimer--,
            this.pos.y += this.fallSpeed,
            this.fallSpeed = Math.max(this.fallSpeed - .085, -.45)) : this.destroy();
        else if (this.isState(PlayerObject.SNAME.TRANSFORM))
            if (0 < --this.tfmTimer)
                switch (e = parseInt(this.anim / PlayerObject.TRANSFORM_ANIMATION_RATE) % 3,
                t = this.power > this.tfmTarget ? this.power : this.tfmTarget,
                e) {
                case 0:
                    this.sprite = this.getStateByPowerIndex(PlayerObject.SNAME.STAND, this.power).SPRITE[0];
                    break;
                case 1:
                    this.sprite = this.getStateByPowerIndex(PlayerObject.SNAME.TRANSFORM, t).SPRITE[0];
                    break;
                case 2:
                    this.sprite = this.getStateByPowerIndex(PlayerObject.SNAME.STAND, this.tfmTarget).SPRITE[0]
                }
            else
                this.power = this.tfmTarget,
                this.tfmTarget = -1,
                this.setState(PlayerObject.SNAME.STAND),
                this.collisionTest(this.pos, this.dim) && this.setState(PlayerObject.SNAME.DOWN),
                this.damageTimer = app.net.gameMode === 1 ? 120 : PlayerObject.DAMAGE_TIME;
        else if (0 < this.pipeDelay)
            this.pipeDelay--;
        else if (0 < this.pipeTimer && 0 >= this.pipeDelay) {
            30 <= this.pipeTimer && this.play("pipe.mp3", 1, .04);
            switch (this.pipeDir) {
            case 1:
                this.pos.y += .06;
                break;
            case 2:
                this.pos.y -= .06;
                break;
            case 3:
                this.pos.x -= .06;
                break;
            case 4:
                this.pos.x += .06
            }
            1 === --this.pipeTimer && this.pipeWarp && (this.pipeDelay = this.pipeDelayLength);
            if (0 >= this.pipeTimer && this.pipeWarp) {
                this.warp(this.pipeWarp);
                this.weedeat();
                this.pipeWarp = undefined;
                switch (this.pipeExt) {
                case 1:
                    this.pos.y -= 1.74;
                    this.setState(PlayerObject.SNAME.STAND);
                    this.pos = vec2.add(this.pos, PlayerObject.PIPE_EXT_OFFSET);
                    break;
                case 2:
                    this.pos.y += 1.74;
                    this.setState(PlayerObject.SNAME.STAND);
                    this.pos = vec2.add(this.pos, PlayerObject.PIPE_EXT_OFFSET);
                    break;
                case 3:
                    this.pos.x -= 1.74;
                    this.setState(PlayerObject.SNAME.RUN);
                    break;
                case 4:
                    this.pos.x += 1.74;
                    this.setState(PlayerObject.SNAME.RUN);
                    break;
                default:
                    return
                }
                this.pipeTimer = 30;
                this.pipeDir = this.pipeExt;
                this.pipeDelay = this.pipeDelayLength
            }
        } else
            this.lastPos = this.pos,
            0 < this.damageTimer && this.damageTimer--,
            this.attackCharge < PlayerObject.MAX_CHARGE && this.attackCharge++,
            0 < this.attackTimer && this.attackTimer--,
            this.autoTarget && this.autoMove(),
            this.control(),
            this.physics(),
            this.interaction(),
            this.arrow(),
            this.sound(),
            0 > this.pos.y && this.kill()
}
;
PlayerObject.prototype.input = function(e, t, i, s) {
    this.btnD = e;
    if (app.autoMove && this.btnD[0] == 0)
        this.btnD[0] = 1;
    this.btnA = t;
    this.btnB = i;
    if (s) {
        this.btnA = true;
        this.btnAHot = false
    }
}
;
PlayerObject.prototype.autoMove = function() {
    this.btnD = [0, 0];
    this.btnB = this.btnA = false;
    .1 <= Math.abs(this.pos.x - this.autoTarget.x) ? this.btnD = [0 >= this.pos.x - this.autoTarget.x ? 1 : -1, 0] : .01 > Math.abs(this.moveSpeed) && (this.btnA = -.5 > this.pos.y - this.autoTarget.y)
}
;
PlayerObject.prototype.control = function() {
    if (this.grounded)
        this.btnBg = this.btnB;
    if (this.isState(PlayerObject.SNAME.DOWN) && this.collisionTest(this.pos, this.getStateByPowerIndex(PlayerObject.SNAME.STAND, this.power).DIM)) {
        if (-1 !== this.btnD[1])
            this.moveSpeed = .5 * (this.moveSpeed + PlayerObject.STUCK_SLIDE_SPEED);
        this.moveSpeed = Math.sign(this.moveSpeed) * Math.max(Math.abs(this.moveSpeed) - PlayerObject.MOVE_SPEED_DECEL, 0)
    } else {
        if (0 !== this.btnD[0]) {
            if (.01 < Math.abs(this.moveSpeed) && !(0 <= this.btnD[0] ^ 0 > this.moveSpeed)) {
                this.moveSpeed += PlayerObject.MOVE_SPEED_DECEL * this.btnD[0];
                this.setState(PlayerObject.SNAME.SLIDE)
            } else {
                this.moveSpeed = this.btnD[0] * Math.min(Math.abs(this.moveSpeed) + .0125, this.underWater ? .2 : this.btnBg ? .315 : .215);
                this.setState(PlayerObject.SNAME.RUN)
            }
            if (this.grounded || this.underWater)
                this.reverse = 0 <= this.btnD[0]
        } else {
            if (!this.underWater || this.grounded) {
                if (.01 < Math.abs(this.moveSpeed)) {
                    this.moveSpeed = Math.sign(this.moveSpeed) * Math.max(Math.abs(this.moveSpeed) - PlayerObject.MOVE_SPEED_DECEL, 0);
                    this.setState(PlayerObject.SNAME.RUN)
                } else {
                    this.moveSpeed = 0,
                    this.setState(PlayerObject.SNAME.STAND)
                }
                if (-1 === this.btnD[1])
                    this.setState(PlayerObject.SNAME.DOWN)
            }
        }
        var e = this.isSpring ? 14 : this.underWater == 1 ? .1 : 7;
        var t = this.isSpring ? PlayerObject.SPRING_LENGTH_MIN : this.isBounce ? PlayerObject.BOUNCE_LENGTH_MIN : PlayerObject.JUMP_LENGTH_MIN;
        for (i = 0; i < PlayerObject.JUMP_SPEED_INC_THRESHOLD.length && Math.abs(this.moveSpeed) >= PlayerObject.JUMP_SPEED_INC_THRESHOLD[i]; i++)
            e++;
        if (this.btnA) {
            if ((this.grounded || this.underWater) && !this.btnAHot) {
                this.jumping = 0;
                this.play(this.underWater ? "stomp.mp3" : 0 < this.power ? "jump1.mp3" : "jump0.mp3", .7, .04);
                this.btnAHot = true
            }
            if (this.jumping > e)
                this.jumping = -1
        } else {
            this.btnAHot = false;
            if (this.jumping > t)
                this.jumping = -1
        }
        this.grounded || this.setState(PlayerObject.SNAME.FALL);
        this.btnB && !this.btnBde && 2 === this.power && !this.isState(PlayerObject.SNAME.DOWN) && !this.isState(PlayerObject.SNAME.SLIDE) && 1 > this.attackTimer && this.attackCharge >= PlayerObject.ATTACK_CHARGE && (this.attack(),
        this.game.out.push(NET013.encode(1)));
        this.btnBde = this.btnB;
        0 < this.attackTimer && 2 === this.power && (this.isState(PlayerObject.SNAME.STAND) || this.isState(PlayerObject.SNAME.RUN)) && this.setState(PlayerObject.SNAME.ATTACK)
    }
}
;
PlayerObject.prototype.physics = function() {
    if (-1 !== this.jumping) {
        this.fallSpeed = (this.underWater == 1 ? .3 : .45) - .0056 * this.jumping;
        this.jumping++;
        this.grounded = false
    } else {
        this.isSpring = this.isBounce = false;
        if (this.grounded)
            this.fallSpeed = 0;
        this.fallSpeed = Math.max(this.fallSpeed + (this.underWater == 1 ? -.03 : -.085), -.45)
    }
    var e = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed));
    var t = vec2.make(this.pos.x + Math.min(0, this.moveSpeed), this.pos.y + Math.min(0, this.fallSpeed));
    var s = vec2.make(this.dim.x + Math.max(0, this.moveSpeed), this.dim.y + Math.max(0, this.fallSpeed));
    var o = this.game.world.getZone(this.level, this.zone).getTiles(t, s);
    var a = this.game.getPlatforms();
    var r = vec2.make(1, 1);
    var n = false;
    var p = [];
    tilePlatformColliding = [];
    var c = [];
    var l = [];
    var h = [];
    var d = [];
    var m = [];
    var b;
    var u = 0;
    var E = 0;
    var T = 0;
    for (i = 0; i < o.length; i++) {
        var y = o[i];
        if (y.definition.PLATFORM)
            p.push(y);
        else if (y.definition.COLLIDE)
            if (y.definition.HIDDEN)
                c.push(y);
            else if (squar.intersection(y.pos, r, e, this.dim) || squar.intersection(y.pos, r, this.pos, this.dim))
                .01 < Math.abs(this.moveSpeed) && this.grounded && this.pos.y <= y.pos.y && h.push(y),
                c.push(y);
        if (y.definition.WATER == 2 && u == 0)
            u = 2;
        else if (y.definition.WATER == 1) {
            u = 1;
            if (y.definition.WATER_CURRENT && squar.intersection(y.pos, r, e, this.dim)) {
                var S = y.data;
                if (S < 128)
                    E = Math.min(E, S - 128);
                if (S >= 128)
                    T = Math.max(T, S - 127)
            }
        }
    }
    var O = (E + T) * .0025;
    e = vec2.add(e, vec2.make(O, 0));
    this.underWater = u;
    for (_0x5b32b0 = 0; _0x5b32b0 < a.length; _0x5b32b0++)
        y = a[_0x5b32b0],
        squar.intersection(y.pos, y.dim, e, this.dim) && m.push(y);
    for (_0x5b32b0 = 0; _0x5b32b0 < p.length; _0x5b32b0++)
        y = p[_0x5b32b0],
        squar.intersection(y.pos, r, e, this.dim) && tilePlatformColliding.push(y);
    a = vec2.make(e.x, this.pos.y);
    for (_0x5b32b0 = 0; _0x5b32b0 < c.length; _0x5b32b0++) {
        y = c[_0x5b32b0];
        if (!y.definition.HIDDEN && squar.intersection(y.pos, r, a, this.dim)) {
            y.definition.TRIGGER(this.game, this.pid, y, this.level, this.zone, y.pos.x, y.pos.y, td32.TRIGGER.TYPE.TOUCH);
            a.x = a.x + .5 * this.dim.x < y.pos.x + .5 * r.x ? y.pos.x - this.dim.x : y.pos.x + r.x;
            this.moveSpeed *= .33
        }
    }
    e.x = a.x;
    for (_0x5b32b0 = 0; _0x5b32b0 < c.length; _0x5b32b0++) {
        y = c[_0x5b32b0];
        if (squar.intersection(y.pos, r, e, this.dim)) {
            if (this.fallSpeed > PlayerObject.BLOCK_BUMP_THRESHOLD) {
                d.push(y)
            }
            if (0 > this.fallSpeed && this.pos.y >= y.pos.y) {
                l.push(y)
            }
        }
    }
    for (_0x5b32b0 = 0; _0x5b32b0 < c.length; _0x5b32b0++) {
        y = c[_0x5b32b0];
        if (squar.intersection(y.pos, r, e, this.dim)) {
            y.definition.TRIGGER(this.game, this.pid, y, this.level, this.zone, y.pos.x, y.pos.y, td32.TRIGGER.TYPE.TOUCH);
            if (this.pos.y >= e.y) {
                if (!y.definition.HIDDEN) {
                    e.y = y.pos.y + r.y;
                    this.fallSpeed = 0;
                    n = true
                }
            } else {
                e.y = y.pos.y - this.dim.y;
                this.fallSpeed = 0
            }
        }
    }
    for (_0x5b32b0 = 0; _0x5b32b0 < m.length; _0x5b32b0++)
        if (y = m[_0x5b32b0],
        this.pos.y >= e.y && y.pos.y + y.dim.y - this.pos.y < PlayerObject.PLATFORM_SNAP_DIST) {
            e.y = y.pos.y + y.dim.y;
            n = true;
            b = y;
            break
        }
    for (_0x5b32b0 = 0; _0x5b32b0 < tilePlatformColliding.length; _0x5b32b0++) {
        y = tilePlatformColliding[_0x5b32b0];
        if (squar.intersection(y.pos, r, e, this.dim)) {
            if (this.pos.y - (y.definition.PLATFORM && y.definition.PLATFORM === "WEAK" ? this.dim : r).y >= y.pos.y) {
                e.y = y.pos.y + r.y;
                this.fallSpeed = 0;
                n = true
            }
        }
    }
    this.grounded = n;
    this.pos = e;
    b && b.riding(this);
    for (_0x5b32b0 = 0; _0x5b32b0 < o.length; _0x5b32b0++)
        y = o[_0x5b32b0],
        squar.intersection(y.pos, r, e, this.dim) && y.definition.TRIGGER(this.game, this.pid, y, this.level, this.zone, y.pos.x, y.pos.y, td32.TRIGGER.TYPE.TOUCH);
    if (this.isState(PlayerObject.SNAME.DOWN) && .05 > Math.abs(this.moveSpeed))
        for (_0x5b32b0 = 0; _0x5b32b0 < l.length; _0x5b32b0++)
            y = l[_0x5b32b0],
            y.definition.TRIGGER(this.game, this.pid, y, this.level, this.zone, y.pos.x, y.pos.y, td32.TRIGGER.TYPE.DOWN);
    if (this.isState(PlayerObject.SNAME.RUN))
        for (_0x5b32b0 = 0; _0x5b32b0 < h.length; _0x5b32b0++)
            y = h[_0x5b32b0],
            y.definition.TRIGGER(this.game, this.pid, y, this.level, this.zone, y.pos.x, y.pos.y, td32.TRIGGER.TYPE.PUSH);
    for (_0x5b32b0 = 0; _0x5b32b0 < d.length; _0x5b32b0++)
        y = d[_0x5b32b0],
        y.definition.TRIGGER(this.game, this.pid, y, this.level, this.zone, y.pos.x, y.pos.y, 0 < this.power ? td32.TRIGGER.TYPE.BIG_BUMP : td32.TRIGGER.TYPE.SMALL_BUMP),
        this.jumping = -1,
        this.fallSpeed = -PlayerObject.BLOCK_BUMP_THRESHOLD
}
;
PlayerObject.prototype.collisionTest = function(e, t) {
    for (var i = vec2.make(1, 1), s = this.game.world.getZone(this.level, this.zone).getTiles(e, t), o = 0; o < s.length; o++) {
        var a = s[o];
        if (a.definition.COLLIDE && squar.intersection(a.pos, i, e, t))
            return true
    }
    return false
}
;
PlayerObject.prototype.interaction = function() {
    for (var e = 0; e < this.game.objects.length; e++) {
        var t = this.game.objects[e];
        if (t !== this && !this.dead && t.level === this.level && t.zone === this.zone && t.isTangible() && squar.intersection(t.pos, t.dim, this.pos, this.dim)) {
            if (0 < this.starTimer && t.bonk) {
                t.bonk();
                this.game.out.push(NET020.encode(t.level, t.zone, t.oid, 1))
            }
            if (t instanceof PlayerObject && 0 < t.starTimer && !this.autoTarget) {
                this.damage(t);
                if (this.dead)
                    this.game.out.push(NET017.encode(t.pid))
            }
            if (this.lastPos.y > t.pos.y + .66 * t.dim.y - Math.max(0, t.fallSpeed)) {
                if (t.playerStomp)
                    t.playerStomp(this)
            } else {
                if (this.lastPos.y < t.pos.y) {
                    if (t.playerBump)
                        t.playerBump(this)
                } else {
                    if (t.playerCollide)
                        t.playerCollide(this)
                }
            }
        }
    }
}
;
PlayerObject.prototype.arrow = function() {
    for (var e = 0, t = 0; t < this.game.objects.length; t++) {
        var i = this.game.objects[t];
        i !== this && i instanceof PlayerObject && i.level === this.level && i.zone === this.zone && (e += 1 - Math.min(PlayerObject.ARROW_RAD_OUT, Math.max(0, vec2.distance(this.pos, i.pos) - PlayerObject.ARROW_RAD_IN)) / PlayerObject.ARROW_RAD_OUT)
    }
    this.arrowFade = Math.min(PlayerObject.ARROW_THRESHOLD_MAX, Math.max(0, e - PlayerObject.ARROW_THRESHOLD_MIN)) / PlayerObject.ARROW_THRESHOLD_MAX
}
;
PlayerObject.prototype.sound = GameObject.prototype.sound;
PlayerObject.prototype.attack = function() {
    this.attackTimer = PlayerObject.ATTACK_DELAY;
    this.attackCharge -= PlayerObject.ATTACK_CHARGE;
    var e = this.reverse ? vec2.add(this.pos, PlayerObject.PROJ_OFFSET) : vec2.add(this.pos, vec2.multiply(PlayerObject.PROJ_OFFSET, vec2.make(-1, 1)));
    this.game.createObject(FireballObject.ID, this.level, this.zone, e, [undefined, this.reverse, this.pid, this.skin]);
    this.play("fireball.mp3", 1, .04)
}
;
PlayerObject.prototype.bounce = function() {
    this.jumping = 0;
    this.isBounce = true
}
;
PlayerObject.prototype.damage = function(e) {
    0 < this.damageTimer || 0 < this.starTimer || this.isState(PlayerObject.SNAME.TRANSFORM) || this.isState(PlayerObject.SNAME.CLIMB) || this.isState(PlayerObject.SNAME.POLE) || this.pipeWarp || 0 < this.pipeTimer || 0 < this.pipeDelay || this.autoTarget || (0 < this.power ? (this.tfm(0),
    this.damageTimer = PlayerObject.DAMAGE_TIME) : this.kill())
}
;
PlayerObject.prototype.invuln = function() {
    this.damageTimer = app.net.gameMode === 1 ? 120 : PlayerObject.DAMAGE_TIME
}
;
PlayerObject.prototype.powerupVisual = function(e) {
    if (e instanceof CoinObject)
        this.game.addCoin(false, true);
    else if (e instanceof GoldFlowerObject)
        this.game.addCoin(true, true)
}
;
PlayerObject.prototype.powerup = function(e) {
    if (e instanceof MushroomObject) {
        if (1 > this.power) {
            this.tfm(1);
            this.rate = 115
        }
    } else if (e instanceof FlowerObject) {
        if (2 > this.power) {
            this.tfm(2);
            this.rate = 113
        }
    } else if (e instanceof StarObject) {
        this.star();
        this.game.out.push(NET013.encode(2));
        this.rate = 67
    } else if (e instanceof LifeObject) {
        var t = this.game.getZone(this.level, this.zone);
        t.effects.push(new RisingLabelEffect(this.pos,"1UP"));
        this.game.lifeage()
    } else if (e instanceof CoinObject) {} else if (e instanceof GoldFlowerObject) {} else if (e instanceof AxeObject) {
        this.game.stopGameTimer();
        this.game.out.push(NET018.encode())
    } else if (e instanceof PoisonMushroomObject)
        this.damage(e)
}
;
PlayerObject.prototype.axe = function(e) {
    (e = this.game.getText(this.level, this.zone, e.toString())) || (e = this.game.getText(this.level, this.zone, "too bad"));
    var t = this.game.getAxe(this.level, this.zone);
    e && (this.moveSpeed = 0,
    this.pos = vec2.copy(t.pos),
    this.autoTarget = vec2.add(e.pos, vec2.make(0, -1.6)))
}
;
PlayerObject.prototype.star = function() {
    this.starMusic && (this.starMusic.stop(),
    this.starMusic = undefined);
    this.starTimer = PlayerObject.STAR_LENGTH;
    (this.starMusic = this.play("star.mp3", 1, .04)) && this.starMusic.loop(true)
}
;
PlayerObject.prototype.tfm = function(e) {
    this.power < e ? this.play("powerup.mp3", 1, .04) : this.play("pipe.mp3", 1, .04);
    this.tfmTarget = e;
    this.tfmTimer = PlayerObject.TRANSFORM_TIME;
    this.setState(PlayerObject.SNAME.TRANSFORM)
}
;
PlayerObject.prototype.warp = function(e) {
    var t = this.game.world.getLevel(this.level).getWarp(e);
    if (t) {
        this.level = t.level;
        this.zone = t.zone;
        this.pos = t.pos;
        this.autoTarget = undefined;
        this.grounded = false
    }
}
;
PlayerObject.prototype.pipe = function(e, t, i) {
    this.moveSpeed = 0;
    if (!(1 !== e && 2 !== e))
        this.setState(PlayerObject.SNAME.STAND);
    var s = this.game.world.getLevel(this.level).getWarp(t);
    this.pipeWarp = t;
    this.pipeTimer = 30;
    this.pipeDir = e;
    this.pipeExt = s.data;
    this.pipeDelayLength = i
}
;
PlayerObject.prototype.weedeat = function() {
    for (var e = 0; e < this.game.objects.length; e++) {
        var t = this.game.objects[e];
        t instanceof PiranhaPlantObject && !t.dead && vec2.distance(this.pos, t.pos) < PlayerObject.WEED_EAT_RADIUS && t.destroy()
    }
}
;
PlayerObject.prototype.pole = function(e) {
    if (this.autoTarget)
        return;
    this.game.stopGameTimer();
    this.starMusic && (this.starMusic.stop(),
    this.starMusic = undefined,
    this.starTimer = 0);
    this.setState(PlayerObject.SNAME.POLE);
    this.fallSpeed = this.moveSpeed = 0;
    this.pos.x = e.x;
    this.poleTimer = 15;
    this.poleSound = false
}
;
PlayerObject.prototype.vine = function(e, t) {
    this.setState(PlayerObject.SNAME.CLIMB);
    this.fallSpeed = this.moveSpeed = 0;
    this.pos.x = e.x;
    this.vineWarp = t
}
;
PlayerObject.prototype.hide = function() {
    this.setState(PlayerObject.SNAME.HIDE)
}
;
PlayerObject.prototype.show = function() {
    this.setState(PlayerObject.SNAME.STAND)
}
;
PlayerObject.prototype.kill = function() {
    this.starMusic && (this.starMusic.stop(),
    this.starMusic = undefined,
    this.starTimer = 0);
    this.isState(PlayerObject.SNAME.GHOST) ? this.setState(PlayerObject.SNAME.DEADGHOST) : this.setState(PlayerObject.SNAME.DEAD);
    this.dead = true;
    this.deadTimer = PlayerObject.DEAD_TIME;
    this.deadFreezeTimer = PlayerObject.DEAD_FREEZE_TIME;
    this.fallSpeed = PlayerObject.DEAD_UP_FORCE;
    if (this.game.getPlayer() === this) {
        this.game.stopGameTimer();
        this.game.out.push(NET011.encode())
    }
}
;
PlayerObject.prototype.destroy = function() {
    this.starMusic && (this.starMusic.stop(),
    this.starMusic = undefined,
    this.starTimer = 0);
    GameObject.prototype.destroy.call(this)
}
;
PlayerObject.prototype.isTangible = function() {
    return GameObject.prototype.isTangible.call(this) && !this.isState(PlayerObject.SNAME.HIDE) && 0 >= this.pipeDelay
}
;
PlayerObject.prototype.setState = function(e) {
    if (!e)
        throw "unknwon state name";
    var t = this.getStateByPowerIndex(e, this.power);
    if (t !== this.state) {
        this.state = t;
        if (0 < t.SPRITE.length)
            this.sprite = t.SPRITE[0];
        this.dim = t.DIM;
        this.anim = 0
    }
}
;
PlayerObject.prototype.getStateByPowerIndex = function(e, t) {
    for (var i = 0; i < PlayerObject.STATE.length; i++) {
        var s = PlayerObject.STATE[i];
        if (s.NAME === e && (s.ID >= PlayerObject.GENERIC_INDEX || s.ID >= PlayerObject.POWER_INDEX_SIZE * t && s.ID < PlayerObject.POWER_INDEX_SIZE * (t + 1)))
            return s
    }
}
;
PlayerObject.prototype.isState = function(e) {
    return e === this.state.NAME
}
;
PlayerObject.prototype.draw = function(e) {
    if (!(this.isState(PlayerObject.SNAME.HIDE) || 0 < this.pipeDelay || 0 < this.damageTimer && 1 < this.damageTimer % 3)) {
        var t;
        t = 0 < this.starTimer ? 2 : (this.isState(PlayerObject.SNAME.GHOST) || this.isState(PlayerObject.SNAME.DEADGHOST)) && !this.isDev ? 1 : 0;
        if (this.sprite.INDEX instanceof Array)
            for (var i = this.sprite.INDEX, s = 0; s < i.length; s++)
                for (var o = 0; o < i[s].length; o++)
                    2 === t && e.push({
                        pos: vec2.add(vec2.add(this.pos, PlayerObject.DIM_OFFSET), vec2.make(this.reverse ? o : -o, s)),
                        reverse: this.reverse,
                        index: i[s][o],
                        skin: this.skin,
                        pid: this.pid,
                        mode: 0
                    }),
                    e.push({
                        pos: vec2.add(vec2.add(this.pos, PlayerObject.DIM_OFFSET), vec2.make(this.reverse ? o : -o, s)),
                        reverse: this.reverse,
                        index: i[s][o],
                        skin: this.skin,
                        pid: this.pid,
                        mode: t
                    });
        else
            2 === t && e.push({
                pos: vec2.add(this.pos, PlayerObject.DIM_OFFSET),
                reverse: this.reverse,
                index: this.sprite.INDEX,
                skin: this.skin,
                pid: this.pid,
                mode: 0
            }),
            e.push({
                pos: vec2.add(this.pos, PlayerObject.DIM_OFFSET),
                reverse: this.reverse,
                index: this.sprite.INDEX,
                skin: this.skin,
                pid: this.pid,
                mode: t
            });
        0 < this.arrowFade && (t = 160 + parseInt(32 * this.arrowFade),
        e.push({
            pos: vec2.add(vec2.add(this.pos, vec2.make(0, this.dim.y)), PlayerObject.ARROW_OFFSET),
            reverse: false,
            index: PlayerObject.ARROW_SPRITE,
            mode: t
        }))
    }
}
;
PlayerObject.prototype.write = function(e) {
    0 < this.arrowFade ? e.push({
        pos: vec2.add(vec2.add(this.pos, vec2.make(0, this.dim.y)), PlayerObject.TEXT_OFFSET),
        size: PlayerObject.TEXT_SIZE,
        color: "rgba(255,255,255," + this.arrowFade + ")",
        text: PlayerObject.ARROW_TEXT
    }) : this.name && e.push({
        pos: vec2.add(vec2.add(this.pos, vec2.make(0, this.sprite.INDEX instanceof Array ? 2 : 1)), PlayerObject.TEAM_OFFSET),
        size: PlayerObject.TEAM_SIZE,
        color: this.isDev ? PlayerObject.DEV_TEAM_COLOR : PlayerObject.TEAM_COLOR,
        text: this.name
    })
}
;
PlayerObject.prototype.play = GameObject.prototype.play;
GameObject.REGISTER_OBJECT(PlayerObject);
"use strict";
function GoombaObject(e, t, i, s, o, a) {
    GameObject.call(this, e, t, i, s);
    this.oid = o;
    this.variant = isNaN(parseInt(a)) ? 0 : parseInt(a);
    this.setState(GoombaObject.STATE.RUN);
    this.bonkTimer = this.deadTimer = this.anim = 0;
    this.dim = vec2.make(1, 1);
    this.fallSpeed = this.moveSpeed = 0;
    this.disabled = this.grounded = false;
    this.disabledTimer = 0;
    this.proxHit = false;
    this.dir = true;
    this.disable()
}
GoombaObject.ASYNC = false;
GoombaObject.ID = 17;
GoombaObject.NAME = "GOOMBA";
GoombaObject.ANIMATION_RATE = 5;
GoombaObject.VARIANT_OFFSET = 112;
GoombaObject.ENABLE_FADE_TIME = 15;
GoombaObject.ENABLE_DIST = 26;
GoombaObject.DEAD_TIME = 15;
GoombaObject.BONK_TIME = 90;
GoombaObject.BONK_IMP = vec2.make(.25, .4);
GoombaObject.BONK_DECEL = .925;
GoombaObject.BONK_FALL_SPEED = .5;
GoombaObject.MOVE_SPEED_MAX = .075;
GoombaObject.FALL_SPEED_MAX = .35;
GoombaObject.FALL_SPEED_ACCEL = .085;
GoombaObject.SPRITE = {};
GoombaObject.SPRITE_LIST = [{
    NAME: "RUN0",
    ID: 0,
    INDEX: 15
}, {
    NAME: "RUN1",
    ID: 1,
    INDEX: 31
}, {
    NAME: "FALL",
    ID: 2,
    INDEX: 14
}, {
    NAME: "DEAD",
    ID: 3,
    INDEX: 47
}];
for (_0x1bec55 = 0; _0x1bec55 < GoombaObject.SPRITE_LIST.length; _0x1bec55++)
    GoombaObject.SPRITE[GoombaObject.SPRITE_LIST[_0x1bec55].NAME] = GoombaObject.SPRITE_LIST[_0x1bec55],
    GoombaObject.SPRITE[GoombaObject.SPRITE_LIST[_0x1bec55].ID] = GoombaObject.SPRITE_LIST[_0x1bec55];
GoombaObject.STATE = {};
GoombaObject.STATE_LIST = [{
    NAME: "RUN",
    ID: 0,
    SPRITE: [GoombaObject.SPRITE.RUN0, GoombaObject.SPRITE.RUN1]
}, {
    NAME: "FALL",
    ID: 1,
    SPRITE: [GoombaObject.SPRITE.FALL]
}, {
    NAME: "DEAD",
    ID: 80,
    SPRITE: [GoombaObject.SPRITE.DEAD]
}, {
    NAME: "BONK",
    ID: 81,
    SPRITE: []
}];
for (_0x1bec55 = 0; _0x1bec55 < GoombaObject.STATE_LIST.length; _0x1bec55++)
    GoombaObject.STATE[GoombaObject.STATE_LIST[_0x1bec55].NAME] = GoombaObject.STATE_LIST[_0x1bec55],
    GoombaObject.STATE[GoombaObject.STATE_LIST[_0x1bec55].ID] = GoombaObject.STATE_LIST[_0x1bec55];
GoombaObject.prototype.update = function(e) {
    switch (e) {
    case 0:
        this.kill();
        break;
    case 1:
        this.bonk();
        break;
    case 160:
        this.enable()
    }
}
;
GoombaObject.prototype.step = function() {
    this.disabled ? this.proximity() : (0 < this.disabledTimer && this.disabledTimer--,
    this.state === GoombaObject.STATE.BONK ? this.bonkTimer++ > GoombaObject.BONK_TIME || 0 > this.pos.y + this.dim.y ? this.destroy() : (this.pos = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed)),
    this.moveSpeed *= GoombaObject.BONK_DECEL,
    this.fallSpeed = Math.max(this.fallSpeed - GoombaObject.FALL_SPEED_ACCEL, -GoombaObject.BONK_FALL_SPEED)) : (this.anim++,
    this.sprite = this.state.SPRITE[parseInt(this.anim / GoombaObject.ANIMATION_RATE) % this.state.SPRITE.length],
    this.state === GoombaObject.STATE.DEAD ? this.deadTimer++ < GoombaObject.DEAD_TIME || this.destroy() : (this.control(),
    this.physics(),
    this.sound(),
    0 > this.pos.y && this.destroy())))
}
;
GoombaObject.prototype.control = function() {
    this.moveSpeed = this.dir ? -GoombaObject.MOVE_SPEED_MAX : GoombaObject.MOVE_SPEED_MAX;
    this.grounded ? this.setState(GoombaObject.STATE.RUN) : this.setState(GoombaObject.STATE.FALL)
}
;
GoombaObject.prototype.physics = function() {
    this.grounded && (this.fallSpeed = 0);
    this.fallSpeed = Math.max(this.fallSpeed - GoombaObject.FALL_SPEED_ACCEL, -GoombaObject.FALL_SPEED_MAX);
    var e = vec2.add(this.pos, vec2.make(this.moveSpeed, 0))
      , t = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed))
      , i = vec2.make(0 <= this.moveSpeed ? this.pos.x : this.pos.x + this.moveSpeed, 0 >= this.fallSpeed ? this.pos.y : this.pos.y + this.fallSpeed)
      , s = vec2.make(this.dim.y + Math.abs(this.moveSpeed), this.dim.y + Math.abs(this.fallSpeed))
      , i = this.game.world.getZone(this.level, this.zone).getTiles(i, s)
      , s = vec2.make(1, 1)
      , o = false;
    this.grounded = false;
    for (var a = 0; a < i.length; a++) {
        var r = i[a];
        r.definition.COLLIDE && squar.intersection(r.pos, s, e, this.dim) && (this.pos.x <= e.x && e.x + this.dim.x > r.pos.x ? (e.x = r.pos.x - this.dim.x,
        t.x = e.x,
        this.moveSpeed = 0,
        o = true) : this.pos.x >= e.x && e.x < r.pos.x + s.x && (e.x = r.pos.x + s.x,
        t.x = e.x,
        this.moveSpeed = 0,
        o = true))
    }
    for (a = 0; a < i.length; a++)
        r = i[a],
        r.definition.COLLIDE && squar.intersection(r.pos, s, t, this.dim) && (this.pos.y >= t.y && t.y < r.pos.y + s.y ? (t.y = r.pos.y + s.y,
        this.fallSpeed = 0,
        this.grounded = true) : this.pos.y <= t.y && t.y + this.dim.y > r.pos.y && (t.y = r.pos.y - this.dim.y,
        this.fallSpeed = 0));
    this.pos = vec2.make(e.x, t.y);
    o && (this.dir = !this.dir)
}
;
GoombaObject.prototype.sound = GameObject.prototype.sound;
GoombaObject.prototype.proximity = function() {
    var e = this.game.getPlayer();
    e && !e.dead && e.level === this.level && e.zone === this.zone && !this.proxHit && vec2.distance(e.pos, this.pos) < GoombaObject.ENABLE_DIST && (this.game.out.push(NET020.encode(this.level, this.zone, this.oid, 160)),
    this.proxHit = true)
}
;
GoombaObject.prototype.enable = function() {
    this.disabled && (this.disabled = false,
    this.disabledTimer = GoombaObject.ENABLE_FADE_TIME)
}
;
GoombaObject.prototype.disable = function() {
    this.disabled = true
}
;
GoombaObject.prototype.damage = function(e) {
    this.dead || (this.bonk(),
    this.game.out.push(NET020.encode(this.level, this.zone, this.oid, 1)))
}
;
GoombaObject.prototype.bonk = function() {
    this.dead || (this.setState(GoombaObject.STATE.BONK),
    this.moveSpeed = GoombaObject.BONK_IMP.x,
    this.fallSpeed = GoombaObject.BONK_IMP.y,
    this.dead = true,
    this.play("kick.mp3", 1, .04))
}
;
GoombaObject.prototype.playerCollide = function(e) {
    this.dead || this.garbage || e.damage(this)
}
;
GoombaObject.prototype.playerStomp = function(e) {
    this.dead || this.garbage || (this.kill(),
    e.bounce(),
    this.game.out.push(NET020.encode(this.level, this.zone, this.oid, 0)))
}
;
GoombaObject.prototype.playerBump = function(e) {
    this.dead || this.garbage || e.damage(this)
}
;
GoombaObject.prototype.kill = function() {
    this.dead = true;
    this.setState(GoombaObject.STATE.DEAD);
    this.play("stomp.mp3", 1, .04)
}
;
GoombaObject.prototype.destroy = GameObject.prototype.destroy;
GoombaObject.prototype.isTangible = GameObject.prototype.isTangible;
GoombaObject.prototype.setState = function(e) {
    e !== this.state && (this.state = e,
    0 < e.SPRITE.length && (this.sprite = e.SPRITE[0]),
    this.anim = 0)
}
;
GoombaObject.prototype.draw = function(e) {
    if (!this.disabled) {
        var t;
        t = this.state === GoombaObject.STATE.BONK ? 3 : 0 < this.disabledTimer ? 160 + parseInt(32 * (1 - this.disabledTimer / GoombaObject.ENABLE_FADE_TIME)) : 0;
        if (this.sprite.INDEX instanceof Array)
            for (var i = this.sprite.INDEX, s = 0; s < i.length; s++)
                for (var o = 0; o < i[s].length; o++) {
                    var a = i[t ? i.length - 1 - s : s][o];
                    switch (this.variant) {
                    case 1:
                        a += GoombaObject.VARIANT_OFFSET
                    }
                    e.push({
                        pos: vec2.add(this.pos, vec2.make(o, s)),
                        reverse: !this.dir,
                        index: a,
                        mode: t
                    })
                }
        else {
            a = this.sprite.INDEX;
            switch (this.variant) {
            case 1:
                a += GoombaObject.VARIANT_OFFSET
            }
            e.push({
                pos: this.pos,
                reverse: !this.dir,
                index: a,
                mode: t
            })
        }
    }
}
;
GoombaObject.prototype.play = GameObject.prototype.play;
GameObject.REGISTER_OBJECT(GoombaObject);
"use strict";
function KoopaObject(e, t, i, s, o, a, r) {
    GameObject.call(this, e, t, i, s);
    this.oid = o;
    this.variant = isNaN(parseInt(r)) ? 0 : parseInt(r);
    this.setState(parseInt(a) ? KoopaObject.STATE.FLY : KoopaObject.STATE.RUN);
    this.bonkTimer = this.anim = 0;
    this.dim = vec2.make(1, 1);
    this.fallSpeed = this.moveSpeed = 0;
    this.grounded = false;
    this.jump = -1;
    this.disabled = false;
    this.disabledTimer = 0;
    this.proxHit = false;
    this.immuneTimer = 0;
    this.dir = true;
    this.disable()
}
KoopaObject.ASYNC = false;
KoopaObject.ID = 18;
KoopaObject.NAME = "KOOPA";
KoopaObject.ANIMATION_RATE = 3;
KoopaObject.VARIANT_OFFSET = 32;
KoopaObject.ENABLE_FADE_TIME = 15;
KoopaObject.ENABLE_DIST = 26;
KoopaObject.BONK_TIME = 90;
KoopaObject.BONK_IMP = vec2.make(.25, .4);
KoopaObject.BONK_DECEL = .925;
KoopaObject.BONK_FALL_SPEED = .5;
KoopaObject.PLAYER_IMMUNE_TIME = 6;
KoopaObject.MOVE_SPEED_MAX = .075;
KoopaObject.SHELL_MOVE_SPEED_MAX = .35;
KoopaObject.FALL_SPEED_MAX = .35;
KoopaObject.FALL_SPEED_ACCEL = .085;
KoopaObject.JUMP_LENGTH_MAX = 20;
KoopaObject.JUMP_DECEL = .025;
KoopaObject.TRANSFORM_TIME = 175;
KoopaObject.TRANSFORM_THRESHOLD = 75;
KoopaObject.SPRITE = {};
KoopaObject.SPRITE_LIST = [{
    NAME: "FLY0",
    ID: 0,
    INDEX: [[104], [88]]
}, {
    NAME: "FLY1",
    ID: 1,
    INDEX: [[105], [89]]
}, {
    NAME: "RUN0",
    ID: 2,
    INDEX: [[102], [86]]
}, {
    NAME: "RUN1",
    ID: 3,
    INDEX: [[103], [87]]
}, {
    NAME: "TRANSFORM",
    ID: 4,
    INDEX: 81
}, {
    NAME: "SHELL",
    ID: 5,
    INDEX: 80
}];
for (_0x1bec55 = 0; _0x1bec55 < KoopaObject.SPRITE_LIST.length; _0x1bec55++)
    KoopaObject.SPRITE[KoopaObject.SPRITE_LIST[_0x1bec55].NAME] = KoopaObject.SPRITE_LIST[_0x1bec55],
    KoopaObject.SPRITE[KoopaObject.SPRITE_LIST[_0x1bec55].ID] = KoopaObject.SPRITE_LIST[_0x1bec55];
KoopaObject.STATE = {};
KoopaObject.STATE_LIST = [{
    NAME: "FLY",
    ID: 0,
    SPRITE: [KoopaObject.SPRITE.FLY0, KoopaObject.SPRITE.FLY1]
}, {
    NAME: "RUN",
    ID: 1,
    SPRITE: [KoopaObject.SPRITE.RUN0, KoopaObject.SPRITE.RUN1]
}, {
    NAME: "TRANSFORM",
    ID: 2,
    SPRITE: [KoopaObject.SPRITE.SHELL, KoopaObject.SPRITE.TRANSFORM]
}, {
    NAME: "SHELL",
    ID: 3,
    SPRITE: [KoopaObject.SPRITE.SHELL]
}, {
    NAME: "SPIN",
    ID: 4,
    SPRITE: [KoopaObject.SPRITE.SHELL]
}, {
    NAME: "BONK",
    ID: 81,
    SPRITE: []
}];
for (_0x1bec55 = 0; _0x1bec55 < KoopaObject.STATE_LIST.length; _0x1bec55++)
    KoopaObject.STATE[KoopaObject.STATE_LIST[_0x1bec55].NAME] = KoopaObject.STATE_LIST[_0x1bec55],
    KoopaObject.STATE[KoopaObject.STATE_LIST[_0x1bec55].ID] = KoopaObject.STATE_LIST[_0x1bec55];
KoopaObject.prototype.update = function(e) {
    switch (e) {
    case 1:
        this.bonk();
        break;
    case 16:
        this.stomped(true);
        break;
    case 17:
        this.stomped(false);
        break;
    case 160:
        this.enable()
    }
}
;
KoopaObject.prototype.step = function() {
    if (this.disabled)
        this.proximity();
    else if (0 < this.disabledTimer && this.disabledTimer--,
    this.state === KoopaObject.STATE.BONK)
        this.bonkTimer++ > KoopaObject.BONK_TIME || 0 > this.pos.y + this.dim.y ? this.destroy() : (this.pos = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed)),
        this.moveSpeed *= KoopaObject.BONK_DECEL,
        this.fallSpeed = Math.max(this.fallSpeed - KoopaObject.FALL_SPEED_ACCEL, -KoopaObject.BONK_FALL_SPEED));
    else {
        this.anim++;
        this.sprite = this.state.SPRITE[parseInt(this.anim / KoopaObject.ANIMATION_RATE) % this.state.SPRITE.length];
        if (this.state === KoopaObject.STATE.SHELL || this.state === KoopaObject.STATE.TRANSFORM)
            --this.transformTimer < KoopaObject.TRANSFORM_THRESHOLD && this.setState(KoopaObject.STATE.TRANSFORM),
            0 >= this.transformTimer && this.setState(KoopaObject.STATE.RUN);
        0 < this.immuneTimer && this.immuneTimer--;
        this.control();
        this.physics();
        this.interaction();
        this.sound();
        0 > this.pos.y && this.destroy()
    }
}
;
KoopaObject.prototype.control = function() {
    if (this.state === KoopaObject.STATE.FLY)
        this.moveSpeed = this.dir ? -KoopaObject.MOVE_SPEED_MAX : KoopaObject.MOVE_SPEED_MAX,
        this.grounded && (this.jump = 0);
    else if (this.state === KoopaObject.STATE.RUN)
        this.moveSpeed = this.dir ? -KoopaObject.MOVE_SPEED_MAX : KoopaObject.MOVE_SPEED_MAX;
    else if (this.state === KoopaObject.STATE.SPIN)
        this.moveSpeed = this.dir ? -KoopaObject.SHELL_MOVE_SPEED_MAX : KoopaObject.SHELL_MOVE_SPEED_MAX;
    else if (this.state === KoopaObject.STATE.SHELL || this.state === KoopaObject.STATE.TRANSFORM)
        this.moveSpeed = 0;
    this.jump > KoopaObject.JUMP_LENGTH_MAX && (this.jump = -1)
}
;
KoopaObject.prototype.physics = function() {
    -1 !== this.jump ? (this.fallSpeed = KoopaObject.FALL_SPEED_MAX - this.jump * KoopaObject.JUMP_DECEL,
    this.jump++,
    this.grounded = false) : (this.grounded && (this.fallSpeed = 0),
    this.fallSpeed = Math.max(this.fallSpeed - KoopaObject.FALL_SPEED_ACCEL, -KoopaObject.FALL_SPEED_MAX));
    this.grounded && (this.fallSpeed = 0);
    this.fallSpeed = Math.max(this.fallSpeed - KoopaObject.FALL_SPEED_ACCEL, -KoopaObject.FALL_SPEED_MAX);
    var e = vec2.add(this.pos, vec2.make(this.moveSpeed, 0))
      , t = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed))
      , i = vec2.make(0 <= this.moveSpeed ? this.pos.x : this.pos.x + this.moveSpeed, 0 >= this.fallSpeed ? this.pos.y : this.pos.y + this.fallSpeed)
      , s = vec2.make(this.dim.y + Math.abs(this.moveSpeed), this.dim.y + Math.abs(this.fallSpeed))
      , i = this.game.world.getZone(this.level, this.zone).getTiles(i, s)
      , s = vec2.make(1, 1)
      , o = false;
    this.grounded = false;
    for (var a = 0; a < i.length; a++) {
        var r = i[a];
        r.definition.COLLIDE && squar.intersection(r.pos, s, e, this.dim) && (this.pos.x + this.dim.x <= r.pos.x && e.x + this.dim.x > r.pos.x ? (e.x = r.pos.x - this.dim.x,
        t.x = e.x,
        this.moveSpeed = 0,
        o = true) : this.pos.x >= r.pos.x + s.x && e.x < r.pos.x + s.x && (e.x = r.pos.x + s.x,
        t.x = e.x,
        this.moveSpeed = 0,
        o = true))
    }
    for (a = 0; a < i.length; a++)
        r = i[a],
        r.definition.COLLIDE && squar.intersection(r.pos, s, t, this.dim) && (this.pos.y >= r.pos.y + s.y && t.y < r.pos.y + s.y ? (t.y = r.pos.y + s.y,
        this.grounded = true) : this.pos.y + this.dim.y <= r.pos.y && t.y + this.dim.y > r.pos.y && (t.y = r.pos.y - this.dim.y,
        this.jump = -1,
        this.fallSpeed = 0));
    this.pos = vec2.make(e.x, t.y);
    o && (this.dir = !this.dir)
}
;
KoopaObject.prototype.interaction = function() {
    if (this.state === KoopaObject.STATE.SPIN)
        for (var e = 0; e < this.game.objects.length; e++) {
            var t = this.game.objects[e];
            t === this || t instanceof PlayerObject || !t.isTangible() || !t.damage || t.level === this.level && t.zone === this.zone && squar.intersection(t.pos, t.dim, this.pos, this.dim) && t.damage(this)
        }
}
;
KoopaObject.prototype.proximity = function() {
    var e = this.game.getPlayer();
    e && !e.dead && e.level === this.level && e.zone === this.zone && !this.proxHit && vec2.distance(e.pos, this.pos) < KoopaObject.ENABLE_DIST && (this.game.out.push(NET020.encode(this.level, this.zone, this.oid, 160)),
    this.proxHit = true)
}
;
KoopaObject.prototype.sound = GameObject.prototype.sound;
KoopaObject.prototype.enable = function() {
    this.disabled && (this.disabled = false,
    this.disabledTimer = KoopaObject.ENABLE_FADE_TIME)
}
;
KoopaObject.prototype.disable = function() {
    this.disabled = true
}
;
KoopaObject.prototype.damage = function(e) {
    this.dead || (this.bonk(),
    this.game.out.push(NET020.encode(this.level, this.zone, this.oid, 1)))
}
;
KoopaObject.prototype.bonk = function() {
    this.dead || (this.setState(KoopaObject.STATE.BONK),
    this.moveSpeed = KoopaObject.BONK_IMP.x,
    this.fallSpeed = KoopaObject.BONK_IMP.y,
    this.dead = true,
    this.play("kick.mp3", 1, .04))
}
;
KoopaObject.prototype.stomped = function(e) {
    if (this.state === KoopaObject.STATE.FLY)
        this.setState(KoopaObject.STATE.RUN),
        this.jump = -1;
    else if (this.state === KoopaObject.STATE.RUN)
        this.setState(KoopaObject.STATE.SHELL),
        this.transformTimer = KoopaObject.TRANSFORM_TIME;
    else if (this.state === KoopaObject.STATE.SPIN)
        this.setState(KoopaObject.STATE.SHELL),
        this.transformTimer = KoopaObject.TRANSFORM_TIME;
    else if (this.state === KoopaObject.STATE.SHELL || this.state === KoopaObject.STATE.TRANSFORM)
        this.setState(KoopaObject.STATE.SPIN),
        this.dir = e;
    this.play("stomp.mp3", 1, .04)
}
;
KoopaObject.prototype.playerCollide = function(e) {
    if (!(this.dead || this.garbage)) {
        if (this.state === KoopaObject.STATE.SHELL || this.state === KoopaObject.STATE.TRANSFORM) {
            var t = 0 < e.pos.x - this.pos.x;
            this.stomped(t);
            this.game.out.push(NET020.encode(this.level, this.zone, this.oid, t ? 16 : 17));
            this.immuneTimer = KoopaObject.PLAYER_IMMUNE_TIME
        } else {
            if (0 >= this.immuneTimer)
                e.damage(this)
        }
    }
}
;
KoopaObject.prototype.playerStomp = function(e) {
    if (!this.dead && !this.garbage) {
        var t = 0 < e.pos.x - this.pos.x;
        e.bounce();
        this.stomped(t);
        this.immuneTimer = KoopaObject.PLAYER_IMMUNE_TIME;
        this.game.out.push(NET020.encode(this.level, this.zone, this.oid, t ? 16 : 17))
    }
}
;
KoopaObject.prototype.playerBump = function(e) {
    this.dead || this.garbage || e.damage(this)
}
;
KoopaObject.prototype.kill = function() {}
;
KoopaObject.prototype.destroy = GameObject.prototype.destroy;
KoopaObject.prototype.isTangible = GameObject.prototype.isTangible;
KoopaObject.prototype.setState = function(e) {
    e !== this.state && (this.state = e,
    0 < e.SPRITE.length && (this.sprite = e.SPRITE[0]),
    this.anim = 0)
}
;
KoopaObject.prototype.draw = function(e) {
    if (!this.disabled) {
        var t;
        t = this.state === KoopaObject.STATE.BONK ? 3 : 0 < this.disabledTimer ? 160 + parseInt(32 * (1 - this.disabledTimer / KoopaObject.ENABLE_FADE_TIME)) : 0;
        if (this.sprite.INDEX instanceof Array)
            for (var i = this.sprite.INDEX, s = 0; s < i.length; s++)
                for (var o = 0; o < i[s].length; o++) {
                    var a = i[3 !== t ? s : i.length - 1 - s][o];
                    switch (this.variant) {
                    case 1:
                        a += KoopaObject.VARIANT_OFFSET
                    }
                    e.push({
                        pos: vec2.add(this.pos, vec2.make(o, s)),
                        reverse: !this.dir,
                        index: a,
                        mode: t
                    })
                }
        else {
            a = this.sprite.INDEX;
            switch (this.variant) {
            case 1:
                a += KoopaObject.VARIANT_OFFSET
            }
            e.push({
                pos: this.pos,
                reverse: !this.dir,
                index: a,
                mode: t
            })
        }
    }
}
;
KoopaObject.prototype.play = GameObject.prototype.play;
GameObject.REGISTER_OBJECT(KoopaObject);
"use strict";
function Koopa2Object(e, t, i, s, o, a, r) {
    GameObject.call(this, e, t, i, s);
    this.oid = o;
    this.variant = isNaN(parseInt(r)) ? 0 : parseInt(r);
    this.setState(parseInt(a) ? Koopa2Object.STATE.FLY : Koopa2Object.STATE.RUN);
    this.bonkTimer = this.anim = 0;
    this.loc = [this.pos.y + .5 * Koopa2Object.FLY_DISTANCE, this.pos.y - .5 * Koopa2Object.FLY_DISTANCE];
    this.dim = vec2.make(1, 1);
    this.fallSpeed = this.moveSpeed = 0;
    this.disabled = this.grounded = false;
    this.disabledTimer = 0;
    this.proxHit = false;
    this.immuneTimer = 0;
    this.rev = false;
    this.dir = true;
    this.disable()
}
Koopa2Object.ASYNC = false;
Koopa2Object.ID = 19;
Koopa2Object.NAME = "KOOPA TROOPA";
Koopa2Object.FLY_DISTANCE = 3;
Koopa2Object.FLY_ACCEL = .0025;
Koopa2Object.FLY_SPEED_MAX = .075;
Koopa2Object.CHECK_DIST = .1;
Koopa2Object.SPRITE = {};
Koopa2Object.SPRITE_LIST = [{
    NAME: "FLY0",
    ID: 0,
    INDEX: [[100], [84]]
}, {
    NAME: "FLY1",
    ID: 1,
    INDEX: [[101], [85]]
}, {
    NAME: "RUN0",
    ID: 2,
    INDEX: [[98], [82]]
}, {
    NAME: "RUN1",
    ID: 3,
    INDEX: [[99], [83]]
}, {
    NAME: "TRANSFORM",
    ID: 4,
    INDEX: 97
}, {
    NAME: "SHELL",
    ID: 5,
    INDEX: 96
}];
for (_0x1bec55 = 0; _0x1bec55 < Koopa2Object.SPRITE_LIST.length; _0x1bec55++)
    Koopa2Object.SPRITE[Koopa2Object.SPRITE_LIST[_0x1bec55].NAME] = Koopa2Object.SPRITE_LIST[_0x1bec55],
    Koopa2Object.SPRITE[Koopa2Object.SPRITE_LIST[_0x1bec55].ID] = Koopa2Object.SPRITE_LIST[_0x1bec55];
Koopa2Object.STATE = {};
Koopa2Object.STATE_LIST = [{
    NAME: "FLY",
    ID: 0,
    SPRITE: [Koopa2Object.SPRITE.FLY0, Koopa2Object.SPRITE.FLY1]
}, {
    NAME: "RUN",
    ID: 1,
    SPRITE: [Koopa2Object.SPRITE.RUN0, Koopa2Object.SPRITE.RUN1]
}, {
    NAME: "TRANSFORM",
    ID: 2,
    SPRITE: [Koopa2Object.SPRITE.SHELL, Koopa2Object.SPRITE.TRANSFORM]
}, {
    NAME: "SHELL",
    ID: 3,
    SPRITE: [Koopa2Object.SPRITE.SHELL]
}, {
    NAME: "SPIN",
    ID: 4,
    SPRITE: [Koopa2Object.SPRITE.SHELL]
}, {
    NAME: "BONK",
    ID: 81,
    SPRITE: []
}];
for (_0x1bec55 = 0; _0x1bec55 < Koopa2Object.STATE_LIST.length; _0x1bec55++)
    Koopa2Object.STATE[Koopa2Object.STATE_LIST[_0x1bec55].NAME] = Koopa2Object.STATE_LIST[_0x1bec55],
    Koopa2Object.STATE[Koopa2Object.STATE_LIST[_0x1bec55].ID] = Koopa2Object.STATE_LIST[_0x1bec55];
Koopa2Object.prototype.update = KoopaObject.prototype.update;
Koopa2Object.prototype.step = function() {
    if (this.disabled)
        this.proximity();
    else if (0 < this.disabledTimer && this.disabledTimer--,
    this.state === Koopa2Object.STATE.BONK)
        this.bonkTimer++ > KoopaObject.BONK_TIME || 0 > this.pos.y + this.dim.y ? this.destroy() : (this.pos = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed)),
        this.moveSpeed *= KoopaObject.BONK_DECEL,
        this.fallSpeed = Math.max(this.fallSpeed - KoopaObject.FALL_SPEED_ACCEL, -KoopaObject.BONK_FALL_SPEED));
    else {
        this.anim++;
        this.sprite = this.state.SPRITE[parseInt(this.anim / KoopaObject.ANIMATION_RATE) % this.state.SPRITE.length];
        if (this.state === Koopa2Object.STATE.SHELL || this.state === Koopa2Object.STATE.TRANSFORM)
            --this.transformTimer < KoopaObject.TRANSFORM_THRESHOLD && this.setState(Koopa2Object.STATE.TRANSFORM),
            0 >= this.transformTimer && this.setState(Koopa2Object.STATE.RUN);
        0 < this.immuneTimer && this.immuneTimer--;
        this.control();
        this.physics();
        this.interaction();
        this.sound();
        0 > this.pos.y && this.destroy()
    }
}
;
Koopa2Object.prototype.control = function() {
    this.state === Koopa2Object.STATE.FLY && (this.moveSpeed = this.dir ? -KoopaObject.MOVE_SPEED_MAX : KoopaObject.MOVE_SPEED_MAX);
    this.state === Koopa2Object.STATE.RUN && (this.grounded && !this.checkGround() && (this.dir = !this.dir),
    this.moveSpeed = this.dir ? -KoopaObject.MOVE_SPEED_MAX : KoopaObject.MOVE_SPEED_MAX);
    this.state === Koopa2Object.STATE.SPIN && (this.moveSpeed = this.dir ? -KoopaObject.SHELL_MOVE_SPEED_MAX : KoopaObject.SHELL_MOVE_SPEED_MAX);
    if (this.state === Koopa2Object.STATE.SHELL || this.state === Koopa2Object.STATE.TRANSFORM)
        this.moveSpeed = 0
}
;
Koopa2Object.prototype.physics = function() {
    if (this.state === Koopa2Object.STATE.FLY)
        this.rev ? (this.fallSpeed = Math.min(Koopa2Object.FLY_SPEED_MAX, this.fallSpeed + Koopa2Object.FLY_ACCEL),
        this.pos.y += this.fallSpeed,
        this.pos.y >= this.loc[0] && (this.rev = false)) : (this.fallSpeed = Math.max(-Koopa2Object.FLY_SPEED_MAX, this.fallSpeed - Koopa2Object.FLY_ACCEL),
        this.pos.y += this.fallSpeed,
        this.pos.y <= this.loc[1] && (this.rev = true));
    else {
        this.grounded && (this.fallSpeed = 0);
        this.fallSpeed = Math.max(this.fallSpeed - KoopaObject.FALL_SPEED_ACCEL, -KoopaObject.FALL_SPEED_MAX);
        var e = vec2.add(this.pos, vec2.make(this.moveSpeed, 0))
          , t = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed))
          , i = vec2.make(0 <= this.moveSpeed ? this.pos.x : this.pos.x + this.moveSpeed, 0 >= this.fallSpeed ? this.pos.y : this.pos.y + this.fallSpeed)
          , s = vec2.make(this.dim.y + Math.abs(this.moveSpeed), this.dim.y + Math.abs(this.fallSpeed))
          , i = this.game.world.getZone(this.level, this.zone).getTiles(i, s)
          , s = vec2.make(1, 1)
          , o = false;
        this.grounded = false;
        for (var a = 0; a < i.length; a++) {
            var r = i[a];
            r.definition.COLLIDE && squar.intersection(r.pos, s, e, this.dim) && (this.pos.x + this.dim.x <= r.pos.x && e.x + this.dim.x > r.pos.x ? (e.x = r.pos.x - this.dim.x,
            t.x = e.x,
            this.moveSpeed = 0,
            o = true) : this.pos.x >= r.pos.x + s.x && e.x < r.pos.x + s.x && (e.x = r.pos.x + s.x,
            t.x = e.x,
            this.moveSpeed = 0,
            o = true))
        }
        for (a = 0; a < i.length; a++)
            r = i[a],
            r.definition.COLLIDE && squar.intersection(r.pos, s, t, this.dim) && (this.pos.y >= r.pos.y + s.y && t.y < r.pos.y + s.y ? (t.y = r.pos.y + s.y,
            this.fallSpeed = 0,
            this.grounded = true) : this.pos.y + this.dim.y <= r.pos.y && t.y + this.dim.y > r.pos.y && (t.y = r.pos.y - this.dim.y,
            this.fallSpeed = 0));
        this.pos = vec2.make(e.x, t.y);
        o && (this.dir = !this.dir)
    }
}
;
Koopa2Object.prototype.interaction = function() {
    if (this.state === Koopa2Object.STATE.SPIN)
        for (var e = 0; e < this.game.objects.length; e++) {
            var t = this.game.objects[e];
            t === this || t instanceof PlayerObject || !t.isTangible() || !t.damage || t.level === this.level && t.zone === this.zone && squar.intersection(t.pos, t.dim, this.pos, this.dim) && t.damage()
        }
}
;
Koopa2Object.prototype.sound = GameObject.prototype.sound;
Koopa2Object.prototype.checkGround = function() {
    var e = this.dir ? vec2.add(this.pos, vec2.make(-Koopa2Object.CHECK_DIST, 0)) : vec2.add(this.pos, vec2.make(Koopa2Object.CHECK_DIST + this.dim.x, 0));
    e.y -= 1.5;
    return this.game.world.getZone(this.level, this.zone).getTile(e).definition.COLLIDE
}
;
Koopa2Object.prototype.proximity = KoopaObject.prototype.proximity;
Koopa2Object.prototype.enable = KoopaObject.prototype.enable;
Koopa2Object.prototype.disable = KoopaObject.prototype.disable;
Koopa2Object.prototype.damage = KoopaObject.prototype.damage;
Koopa2Object.prototype.bonk = function() {
    this.dead || (this.setState(Koopa2Object.STATE.BONK),
    this.moveSpeed = KoopaObject.BONK_IMP.x,
    this.fallSpeed = KoopaObject.BONK_IMP.y,
    this.dead = true,
    this.play("kick.mp3", 1, .04))
}
;
Koopa2Object.prototype.stomped = function(e) {
    if (this.state === Koopa2Object.STATE.FLY)
        this.setState(Koopa2Object.STATE.RUN);
    else if (this.state === Koopa2Object.STATE.RUN)
        this.setState(Koopa2Object.STATE.SHELL),
        this.transformTimer = KoopaObject.TRANSFORM_TIME;
    else if (this.state === Koopa2Object.STATE.SPIN)
        this.setState(Koopa2Object.STATE.SHELL),
        this.transformTimer = KoopaObject.TRANSFORM_TIME;
    else if (this.state === Koopa2Object.STATE.SHELL || this.state === Koopa2Object.STATE.TRANSFORM)
        this.setState(Koopa2Object.STATE.SPIN),
        this.dir = e;
    this.play("stomp.mp3", 1, .04)
}
;
Koopa2Object.prototype.playerCollide = function(e) {
    this.dead || this.garbage || (this.state === Koopa2Object.STATE.SHELL || this.state === Koopa2Object.STATE.TRANSFORM ? (e = 0 < e.pos.x - this.pos.x,
    this.stomped(e),
    this.game.out.push(NET020.encode(this.level, this.zone, this.oid, e ? 16 : 17)),
    this.immuneTimer = KoopaObject.PLAYER_IMMUNE_TIME) : 0 >= this.immuneTimer && e.damage(this))
}
;
Koopa2Object.prototype.playerStomp = KoopaObject.prototype.playerStomp;
Koopa2Object.prototype.playerBump = KoopaObject.prototype.playerBump;
Koopa2Object.prototype.kill = KoopaObject.prototype.kill;
Koopa2Object.prototype.destroy = KoopaObject.prototype.destroy;
Koopa2Object.prototype.isTangible = KoopaObject.prototype.isTangible;
Koopa2Object.prototype.setState = KoopaObject.prototype.setState;
Koopa2Object.prototype.draw = function(e) {
    if (!this.disabled) {
        var t;
        t = this.state === Koopa2Object.STATE.BONK ? 3 : 0 < this.disabledTimer ? 160 + parseInt(32 * (1 - this.disabledTimer / KoopaObject.ENABLE_FADE_TIME)) : 0;
        if (this.sprite.INDEX instanceof Array)
            for (var i = this.sprite.INDEX, s = 0; s < i.length; s++)
                for (var o = 0; o < i[s].length; o++) {
                    var a = i[3 !== t ? s : i.length - 1 - s][o];
                    switch (this.variant) {
                    case 1:
                        a += KoopaObject.VARIANT_OFFSET
                    }
                    e.push({
                        pos: vec2.add(this.pos, vec2.make(o, s)),
                        reverse: !this.dir,
                        index: a,
                        mode: t
                    })
                }
        else {
            a = this.sprite.INDEX;
            switch (this.variant) {
            case 1:
                a += KoopaObject.VARIANT_OFFSET
            }
            e.push({
                pos: this.pos,
                reverse: !this.dir,
                index: a,
                mode: t
            })
        }
    }
}
;
Koopa2Object.prototype.play = GameObject.prototype.play;
GameObject.REGISTER_OBJECT(Koopa2Object);
"use strict";
function PiranhaPlantObject(e, t, i, s, o, a, r) {
    GameObject.call(this, e, t, i, vec2.add(s, vec2.make(.6, 0)));
    this.oid = o;
    this.variant = isNaN(parseInt(a)) ? 0 : parseInt(a);
    this.direction = isNaN(parseInt(r)) ? 0 : parseInt(r);
    if (this.direction)
        this.pos = vec2.add(this.pos, vec2.make(0, 1.25));
    this.setState(PiranhaPlantObject.STATE.IDLE);
    this.bonkTimer = this.anim = 0;
    this.loc = [vec2.copy(this.pos), vec2.add(this.pos, vec2.make(0, -1.5))];
    this.dim = vec2.make(.8, 1);
    this.dir = this.fallSpeed = this.moveSpeed = 0
}
PiranhaPlantObject.ASYNC = false;
PiranhaPlantObject.ID = 22;
PiranhaPlantObject.NAME = "PIRANHA PLANT";
PiranhaPlantObject.ANIMATION_RATE = 3;
PiranhaPlantObject.VARIANT_OFFSET = 32;
PiranhaPlantObject.SOFFSET = [vec2.make(-.1, 0), vec2.make(-.1, -.75)];
PiranhaPlantObject.BONK_TIME = 90;
PiranhaPlantObject.BONK_IMP = vec2.make(.25, .4);
PiranhaPlantObject.BONK_DECEL = .925;
PiranhaPlantObject.BONK_FALL_SPEED = .5;
PiranhaPlantObject.FALL_SPEED_ACCEL = .085;
PiranhaPlantObject.WAIT_TIME = 25;
PiranhaPlantObject.TRAVEL_SPEED = .05;
PiranhaPlantObject.SPRITE = {};
PiranhaPlantObject.SPRITE_LIST = [{
    NAME: "IDLE0",
    ID: 0,
    INDEX: [[106], [90]]
}, {
    NAME: "IDLE1",
    ID: 1,
    INDEX: [[107], [91]]
}];
for (_0x1bec55 = 0; _0x1bec55 < PiranhaPlantObject.SPRITE_LIST.length; _0x1bec55++)
    PiranhaPlantObject.SPRITE[PiranhaPlantObject.SPRITE_LIST[_0x1bec55].NAME] = PiranhaPlantObject.SPRITE_LIST[_0x1bec55],
    PiranhaPlantObject.SPRITE[PiranhaPlantObject.SPRITE_LIST[_0x1bec55].ID] = PiranhaPlantObject.SPRITE_LIST[_0x1bec55];
PiranhaPlantObject.STATE = {};
PiranhaPlantObject.STATE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    SPRITE: [PiranhaPlantObject.SPRITE.IDLE0, PiranhaPlantObject.SPRITE.IDLE1]
}, {
    NAME: "BONK",
    ID: 81,
    SPRITE: []
}];
for (_0x1bec55 = 0; _0x1bec55 < PiranhaPlantObject.STATE_LIST.length; _0x1bec55++)
    PiranhaPlantObject.STATE[PiranhaPlantObject.STATE_LIST[_0x1bec55].NAME] = PiranhaPlantObject.STATE_LIST[_0x1bec55],
    PiranhaPlantObject.STATE[PiranhaPlantObject.STATE_LIST[_0x1bec55].ID] = PiranhaPlantObject.STATE_LIST[_0x1bec55];
PiranhaPlantObject.prototype.update = function(e) {
    switch (e) {
    case 1:
        this.bonk()
    }
}
;
PiranhaPlantObject.prototype.step = function() {
    this.state === PiranhaPlantObject.STATE.BONK ? this.bonkTimer++ > PiranhaPlantObject.BONK_TIME || 0 > this.pos.y + this.dim.y ? this.destroy() : (this.pos = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed)),
    this.moveSpeed *= PiranhaPlantObject.BONK_DECEL,
    this.fallSpeed = Math.max(this.fallSpeed - PiranhaPlantObject.FALL_SPEED_ACCEL, -PiranhaPlantObject.BONK_FALL_SPEED)) : (this.anim++,
    this.sprite = this.state.SPRITE[parseInt(this.anim / PiranhaPlantObject.ANIMATION_RATE) % this.state.SPRITE.length],
    0 < --this.waitTimer || (this.control(),
    this.physics(),
    this.sound()))
}
;
PiranhaPlantObject.prototype.control = function() {}
;
PiranhaPlantObject.prototype.physics = function() {
    var e = this.loc[this.dir ? 0 : 1];
    vec2.distance(this.pos, e) <= PiranhaPlantObject.TRAVEL_SPEED ? (this.pos = e,
    this.dir = !this.dir,
    this.waitTimer = PiranhaPlantObject.WAIT_TIME) : this.pos = vec2.add(this.pos, vec2.scale(vec2.normalize(vec2.subtract(e, this.pos)), PiranhaPlantObject.TRAVEL_SPEED))
}
;
PiranhaPlantObject.prototype.sound = GameObject.prototype.sound;
PiranhaPlantObject.prototype.damage = function(e) {
    this.dead || (this.bonk(),
    this.game.out.push(NET020.encode(this.level, this.zone, this.oid, 1)))
}
;
PiranhaPlantObject.prototype.bonk = function() {
    this.dead || (this.setState(PiranhaPlantObject.STATE.BONK),
    this.moveSpeed = PiranhaPlantObject.BONK_IMP.x,
    this.fallSpeed = PiranhaPlantObject.BONK_IMP.y,
    this.dead = true,
    this.play("kick.mp3", 1, .04))
}
;
PiranhaPlantObject.prototype.playerCollide = function(e) {
    this.dead || this.garbage || e.damage(this)
}
;
PiranhaPlantObject.prototype.playerStomp = function(e) {
    this.dead || this.garbage || e.damage(this)
}
;
PiranhaPlantObject.prototype.playerBump = function(e) {
    this.dead || this.garbage || e.damage(this)
}
;
PiranhaPlantObject.prototype.kill = function() {}
;
PiranhaPlantObject.prototype.destroy = GameObject.prototype.destroy;
PiranhaPlantObject.prototype.isTangible = GameObject.prototype.isTangible;
PiranhaPlantObject.prototype.setState = function(e) {
    e !== this.state && (this.state = e,
    0 < e.SPRITE.length && (this.sprite = e.SPRITE[0]),
    this.anim = 0)
}
;
PiranhaPlantObject.prototype.draw = function(e) {
    var t;
    t = this.direction ^ this.state === PiranhaPlantObject.STATE.BONK ? 3 : 0;
    if (this.sprite.INDEX instanceof Array) {
        var i = this.sprite.INDEX;
        for (var s = 0; s < i.length; s++)
            for (var o = 0; o < i[s].length; o++) {
                var a = i[t ? i.length - 1 - s : s][o];
                switch (this.variant) {
                case 1:
                    a += PiranhaPlantObject.VARIANT_OFFSET
                }
                e.push({
                    pos: vec2.add(vec2.add(this.pos, vec2.make(o, s)), PiranhaPlantObject.SOFFSET[this.direction]),
                    reverse: !this.dir,
                    index: a,
                    mode: t
                })
            }
    } else {
        a = this.sprite.INDEX;
        switch (this.variant) {
        case 1:
            a += PiranhaPlantObject.VARIANT_OFFSET
        }
        e.push({
            pos: vec2.add(this.pos, PiranhaPlantObject.SOFFSET[this.direction]),
            reverse: !this.dir,
            index: a,
            mode: t
        })
    }
}
;
PiranhaPlantObject.prototype.play = GameObject.prototype.play;
GameObject.REGISTER_OBJECT(PiranhaPlantObject);
"use strict";
function FlyingFishObject(e, t, i, s, o, a, r) {
    GameObject.call(this, e, t, i, s);
    this.oid = o;
    this.setState(FlyingFishObject.STATE.IDLE);
    this.delay = isNaN(parseInt(a)) ? FlyingFishObject.DELAY_DEFAULT : parseInt(a);
    this.impulse = isNaN(parseFloat(r)) ? 1 : parseFloat(r);
    this.anim = 0;
    this.disabled = false;
    this.delayTimer = this.delay;
    this.bonkTimer = 0;
    this.pos.x += FlyingFishObject.SOFFSET.x;
    this.loc = vec2.copy(this.pos);
    this.moveSpeed = this.fallSpeed = 0;
    this.dim = vec2.make(.7, .7);
    this.dir = true
}
FlyingFishObject.ASYNC = false;
FlyingFishObject.ID = 21;
FlyingFishObject.NAME = "FLYING FISH";
FlyingFishObject.ANIMATION_RATE = 3;
FlyingFishObject.BONK_TIME = 90;
FlyingFishObject.BONK_IMP = vec2.make(.25, .4);
FlyingFishObject.BONK_DECEL = .925;
FlyingFishObject.BONK_FALL_SPEED = .5;
FlyingFishObject.BONK_FALL_ACCEL = .085;
FlyingFishObject.DELAY_DEFAULT = 150;
FlyingFishObject.IMPULSE = vec2.make(.225, .335);
FlyingFishObject.DRAG = .996;
FlyingFishObject.FALL_SPEED_ACCEL = .0055;
FlyingFishObject.SOFFSET = vec2.make(.15, .15);
FlyingFishObject.SPRITE = {};
FlyingFishObject.SPRITE_LIST = [{
    NAME: "IDLE0",
    ID: 0,
    INDEX: 206
}, {
    NAME: "IDLE1",
    ID: 1,
    INDEX: 207
}];
for (_0x1bec55 = 0; _0x1bec55 < FlyingFishObject.SPRITE_LIST.length; _0x1bec55++)
    FlyingFishObject.SPRITE[FlyingFishObject.SPRITE_LIST[_0x1bec55].NAME] = FlyingFishObject.SPRITE_LIST[_0x1bec55],
    FlyingFishObject.SPRITE[FlyingFishObject.SPRITE_LIST[_0x1bec55].ID] = FlyingFishObject.SPRITE_LIST[_0x1bec55];
FlyingFishObject.STATE = {};
FlyingFishObject.STATE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    SPRITE: [FlyingFishObject.SPRITE.IDLE0, FlyingFishObject.SPRITE.IDLE1]
}, {
    NAME: "BONK",
    ID: 81,
    SPRITE: []
}];
for (_0x1bec55 = 0; _0x1bec55 < FlyingFishObject.STATE_LIST.length; _0x1bec55++)
    FlyingFishObject.STATE[FlyingFishObject.STATE_LIST[_0x1bec55].NAME] = FlyingFishObject.STATE_LIST[_0x1bec55],
    FlyingFishObject.STATE[FlyingFishObject.STATE_LIST[_0x1bec55].ID] = FlyingFishObject.STATE_LIST[_0x1bec55];
FlyingFishObject.prototype.update = function(e) {
    switch (e) {
    case 1:
        this.bonk()
    }
}
;
FlyingFishObject.prototype.step = function() {
    this.state === FlyingFishObject.STATE.BONK ? this.bonkTimer++ > FlyingFishObject.BONK_TIME || 0 > this.pos.y + this.dim.y ? this.destroy() : (this.pos = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed)),
    this.moveSpeed *= FlyingFishObject.BONK_DECEL,
    this.fallSpeed = Math.max(this.fallSpeed - FlyingFishObject.BONK_FALL_ACCEL, -FlyingFishObject.BONK_FALL_SPEED)) : (this.anim++,
    this.sprite = this.state.SPRITE[parseInt(this.anim / FlyingFishObject.ANIMATION_RATE) % this.state.SPRITE.length],
    0 < this.delayTimer ? this.delayTimer-- : this.jump(),
    this.physics(),
    this.sound())
}
;
FlyingFishObject.prototype.physics = function() {
    this.pos.y > this.loc.y || 0 < this.fallSpeed ? (this.fallSpeed = (this.fallSpeed - FlyingFishObject.FALL_SPEED_ACCEL) * FlyingFishObject.DRAG,
    this.pos.x += this.moveSpeed * FlyingFishObject.DRAG,
    this.pos.y += this.fallSpeed) : this.disable()
}
;
FlyingFishObject.prototype.sound = GameObject.prototype.sound;
FlyingFishObject.prototype.jump = function() {
    this.enable();
    this.pos = vec2.copy(this.loc);
    this.fallSpeed = FlyingFishObject.IMPULSE.y * this.impulse;
    this.moveSpeed = FlyingFishObject.IMPULSE.x * this.impulse;
    this.delayTimer = this.delay
}
;
FlyingFishObject.prototype.disable = function() {
    this.disabled = true
}
;
FlyingFishObject.prototype.enable = function() {
    this.disabled = false
}
;
FlyingFishObject.prototype.damage = function(e) {
    this.dead || (this.bonk(),
    this.game.out.push(NET020.encode(this.level, this.zone, this.oid, 1)))
}
;
FlyingFishObject.prototype.bonk = function() {
    this.dead || (this.setState(FlyingFishObject.STATE.BONK),
    this.moveSpeed = FlyingFishObject.BONK_IMP.x,
    this.fallSpeed = FlyingFishObject.BONK_IMP.y,
    this.dead = true,
    this.play("kick.mp3", 1, .04))
}
;
FlyingFishObject.prototype.playerCollide = function(e) {
    this.dead || this.garbage || e.damage(this)
}
;
FlyingFishObject.prototype.playerStomp = function(e) {
    this.dead || this.garbage || (this.bonk(),
    e.bounce(),
    this.game.out.push(NET020.encode(this.level, this.zone, this.oid, 1)))
}
;
FlyingFishObject.prototype.playerBump = function(e) {
    this.playerCollide(e)
}
;
FlyingFishObject.prototype.kill = function() {}
;
FlyingFishObject.prototype.isTangible = GameObject.prototype.isTangible;
FlyingFishObject.prototype.destroy = GameObject.prototype.destroy;
FlyingFishObject.prototype.setState = function(e) {
    e !== this.state && (this.state = e,
    0 < e.SPRITE.length && (this.sprite = e.SPRITE[0]),
    this.anim = 0)
}
;
FlyingFishObject.prototype.draw = function(e) {
    if (!this.disabled) {
        var t;
        t = this.state === FlyingFishObject.STATE.BONK ? 3 : 0;
        e.push({
            pos: vec2.subtract(this.pos, FlyingFishObject.SOFFSET),
            reverse: this.dir,
            index: this.sprite.INDEX,
            mode: t
        })
    }
}
;
FlyingFishObject.prototype.play = GameObject.prototype.play;
GameObject.REGISTER_OBJECT(FlyingFishObject);
"use strict";
function HammerBroObject(e, t, i, s, o, a) {
    GameObject.call(this, e, t, i, s);
    this.oid = o;
    this.setState(HammerBroObject.STATE.IDLE);
    this.bonkTimer = this.anim = 0;
    this.dim = vec2.make(1, 1.5);
    this.fallSpeed = this.moveSpeed = 0;
    this.disabled = this.grounded = false;
    this.disabledTimer = 0;
    this.proxHit = false;
    this.hammer = undefined;
    this.loc = 1 === parseInt(a) ? [this.pos.x + HammerBroObject.MOVE_AREA, this.pos.x] : [this.pos.x, this.pos.x - HammerBroObject.MOVE_AREA];
    this.groundTimer = this.double = this.attackAnimTimer = this.attackTimer = 0;
    this.jumpTimer = -1;
    this.reverse = false;
    this.dir = true;
    this.disable()
}
HammerBroObject.ASYNC = false;
HammerBroObject.ID = 49;
HammerBroObject.NAME = "HAMMER BRO";
HammerBroObject.ANIMATION_RATE = 5;
HammerBroObject.ENABLE_FADE_TIME = 15;
HammerBroObject.ENABLE_DIST = 33;
HammerBroObject.BONK_TIME = 90;
HammerBroObject.BONK_IMP = vec2.make(.25, .4);
HammerBroObject.BONK_DECEL = .925;
HammerBroObject.BONK_FALL_SPEED = .5;
HammerBroObject.MOVE_SPEED_MAX = .095;
HammerBroObject.JUMP_DELAY = 55;
HammerBroObject.MOVE_AREA = 4;
HammerBroObject.JUMP_LENGTH = 8;
HammerBroObject.JUMP_DECEL = .009;
HammerBroObject.ATTACK_DELAY = 75;
HammerBroObject.DOUBLE_RATE = 5;
HammerBroObject.ATTACK_ANIM_LENGTH = 13;
HammerBroObject.PROJ_OFFSET = vec2.make(.5, 1.25);
HammerBroObject.FALL_SPEED_MAX = .3;
HammerBroObject.FALL_SPEED_ACCEL = .085;
HammerBroObject.SPRITE = {};
HammerBroObject.SPRITE_LIST = [{
    NAME: "IDLE0",
    ID: 0,
    INDEX: [[110], [94]]
}, {
    NAME: "IDLE1",
    ID: 1,
    INDEX: [[109], [93]]
}, {
    NAME: "ATTACK",
    ID: 2,
    INDEX: [[108], [92]]
}];
for (_0x1bec55 = 0; _0x1bec55 < HammerBroObject.SPRITE_LIST.length; _0x1bec55++)
    HammerBroObject.SPRITE[HammerBroObject.SPRITE_LIST[_0x1bec55].NAME] = HammerBroObject.SPRITE_LIST[_0x1bec55],
    HammerBroObject.SPRITE[HammerBroObject.SPRITE_LIST[_0x1bec55].ID] = HammerBroObject.SPRITE_LIST[_0x1bec55];
HammerBroObject.STATE = {};
HammerBroObject.STATE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    SPRITE: [HammerBroObject.SPRITE.IDLE0, HammerBroObject.SPRITE.IDLE1]
}, {
    NAME: "FALL",
    ID: 1,
    SPRITE: [HammerBroObject.SPRITE.IDLE1]
}, {
    NAME: "ATTACK",
    ID: 2,
    SPRITE: [HammerBroObject.SPRITE.ATTACK]
}, {
    NAME: "BONK",
    ID: 81,
    SPRITE: []
}];
for (_0x1bec55 = 0; _0x1bec55 < HammerBroObject.STATE_LIST.length; _0x1bec55++)
    HammerBroObject.STATE[HammerBroObject.STATE_LIST[_0x1bec55].NAME] = HammerBroObject.STATE_LIST[_0x1bec55],
    HammerBroObject.STATE[HammerBroObject.STATE_LIST[_0x1bec55].ID] = HammerBroObject.STATE_LIST[_0x1bec55];
HammerBroObject.prototype.update = function(e) {
    switch (e) {
    case 1:
        this.bonk();
        break;
    case 160:
        this.enable()
    }
}
;
HammerBroObject.prototype.step = function() {
    this.disabled ? this.proximity() : (0 < this.disabledTimer && this.disabledTimer--,
    this.state === HammerBroObject.STATE.BONK ? this.bonkTimer++ > HammerBroObject.BONK_TIME || 0 > this.pos.y + this.dim.y ? this.destroy() : (this.pos = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed)),
    this.moveSpeed *= HammerBroObject.BONK_DECEL,
    this.fallSpeed = Math.max(this.fallSpeed - HammerBroObject.FALL_SPEED_ACCEL, -HammerBroObject.BONK_FALL_SPEED)) : (this.anim++,
    this.sprite = this.state.SPRITE[parseInt(this.anim / HammerBroObject.ANIMATION_RATE) % this.state.SPRITE.length],
    this.face(),
    this.control(),
    this.physics(),
    this.sound(),
    0 < this.attackAnimTimer ? (this.setState(HammerBroObject.STATE.ATTACK),
    this.attach(),
    this.attackAnimTimer--) : this.attackTimer++ > HammerBroObject.ATTACK_DELAY ? this.attack() : this.hammer = undefined,
    0 > this.pos.y && this.destroy()))
}
;
HammerBroObject.prototype.control = function() {
    this.grounded ? (HammerBroObject.JUMP_DELAY < this.groundTimer++ && (this.groundTimer = this.jumpTimer = 0),
    this.pos.x > this.loc[0] ? this.reverse = true : this.pos.x < this.loc[1] && (this.reverse = false)) : this.jumpTimer > HammerBroObject.JUMP_LENGTH && (this.jumpTimer = -1);
    this.grounded ? this.setState(HammerBroObject.STATE.IDLE) : this.setState(HammerBroObject.STATE.FALL);
    this.moveSpeed = .75 * this.moveSpeed + .25 * (this.reverse ? -HammerBroObject.MOVE_SPEED_MAX : HammerBroObject.MOVE_SPEED_MAX)
}
;
HammerBroObject.prototype.physics = function() {
    -1 !== this.jumpTimer ? (this.fallSpeed = HammerBroObject.FALL_SPEED_MAX - this.jumpTimer * HammerBroObject.JUMP_DECEL,
    this.jumpTimer++,
    this.grounded = false) : (this.grounded && (this.fallSpeed = 0),
    this.fallSpeed = Math.max(this.fallSpeed - HammerBroObject.FALL_SPEED_ACCEL, -HammerBroObject.FALL_SPEED_MAX));
    var e = vec2.add(this.pos, vec2.make(this.moveSpeed, 0))
      , t = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed))
      , i = vec2.make(0 <= this.moveSpeed ? this.pos.x : this.pos.x + this.moveSpeed, 0 >= this.fallSpeed ? this.pos.y : this.pos.y + this.fallSpeed)
      , s = vec2.make(this.dim.y + Math.abs(this.moveSpeed), this.dim.y + Math.abs(this.fallSpeed))
      , i = this.game.world.getZone(this.level, this.zone).getTiles(i, s)
      , s = vec2.make(1, 1);
    this.grounded = false;
    for (var o = 0; o < i.length; o++) {
        var a = i[o];
        a.definition.COLLIDE && squar.intersection(a.pos, s, e, this.dim) && (this.pos.x + this.dim.x <= a.pos.x && e.x + this.dim.x > a.pos.x ? (e.x = a.pos.x - this.dim.x,
        t.x = e.x,
        this.moveSpeed = 0) : this.pos.x >= a.pos.x + s.x && e.x < a.pos.x + s.x && (e.x = a.pos.x + s.x,
        t.x = e.x,
        this.moveSpeed = 0))
    }
    for (o = 0; o < i.length; o++)
        a = i[o],
        a.definition.COLLIDE && squar.intersection(a.pos, s, t, this.dim) && (this.pos.y >= a.pos.y + s.y && t.y < a.pos.y + s.y ? (t.y = a.pos.y + s.y,
        this.fallSpeed = 0,
        this.grounded = true) : this.pos.y + this.dim.y <= a.pos.y && t.y + this.dim.y > a.pos.y && (t.y = a.pos.y - this.dim.y,
        this.jumpTimer = -1,
        this.fallSpeed = 0));
    this.pos = vec2.make(e.x, t.y)
}
;
HammerBroObject.prototype.proximity = function() {
    var e = this.game.getPlayer();
    e && !e.dead && e.level === this.level && e.zone === this.zone && !this.proxHit && vec2.distance(e.pos, this.pos) < HammerBroObject.ENABLE_DIST && (this.game.out.push(NET020.encode(this.level, this.zone, this.oid, 160)),
    this.proxHit = true)
}
;
HammerBroObject.prototype.face = function() {
    for (var e, t = 0; t < this.game.objects.length; t++) {
        var i = this.game.objects[t];
        i instanceof PlayerObject && i.level === this.level && i.zone === this.zone && i.isTangible() && (!e || Math.abs(e) > vec2.distance(i.pos, this.pos)) && (e = i.pos.x - this.pos.x)
    }
    this.dir = e ? 0 > e : true
}
;
HammerBroObject.prototype.sound = GameObject.prototype.sound;
HammerBroObject.prototype.enable = function() {
    this.disabled && (this.disabled = false,
    this.disabledTimer = HammerBroObject.ENABLE_FADE_TIME)
}
;
HammerBroObject.prototype.disable = function() {
    this.disabled = true
}
;
HammerBroObject.prototype.attack = function() {
    this.attackAnimTimer = HammerBroObject.ATTACK_ANIM_LENGTH;
    this.attackTimer = 0;
    this.hammer = this.game.createObject(HammerObject.ID, this.level, this.zone, vec2.add(this.pos, HammerBroObject.PROJ_OFFSET), [this]);
    ++this.double > HammerBroObject.DOUBLE_RATE && (this.double = 0,
    this.attackTimer = HammerBroObject.ATTACK_DELAY)
}
;
HammerBroObject.prototype.attach = function() {
    this.hammer && (this.hammer.pos = vec2.add(this.pos, HammerBroObject.PROJ_OFFSET),
    this.hammer.dir = !this.dir)
}
;
HammerBroObject.prototype.playerCollide = function(e) {
    this.dead || this.garbage || e.damage(this)
}
;
HammerBroObject.prototype.playerStomp = function(e) {
    this.dead || this.garbage || (this.bonk(),
    e.bounce(),
    this.game.out.push(NET020.encode(this.level, this.zone, this.oid, 1)))
}
;
HammerBroObject.prototype.playerBump = HammerBroObject.prototype.playerCollide;
HammerBroObject.prototype.damage = function(e) {
    this.dead || (this.bonk(),
    NET020.encode(this.level, this.zone, this.oid, 1))
}
;
HammerBroObject.prototype.bonk = function() {
    this.dead || (this.setState(HammerBroObject.STATE.BONK),
    this.moveSpeed = HammerBroObject.BONK_IMP.x,
    this.fallSpeed = HammerBroObject.BONK_IMP.y,
    this.dead = true,
    this.play("kick.mp3", 1, .04))
}
;
HammerBroObject.prototype.kill = function() {}
;
HammerBroObject.prototype.isTangible = GameObject.prototype.isTangible;
HammerBroObject.prototype.destroy = GameObject.prototype.destroy;
HammerBroObject.prototype.setState = function(e) {
    e !== this.state && (this.state = e,
    0 < e.SPRITE.length && (this.sprite = e.SPRITE[0]),
    this.anim = 0)
}
;
HammerBroObject.prototype.draw = function(e) {
    if (!this.disabled) {
        var t;
        t = this.state === HammerBroObject.STATE.BONK ? 3 : 0 < this.disabledTimer ? 160 + parseInt(32 * (1 - this.disabledTimer / HammerBroObject.ENABLE_FADE_TIME)) : 0;
        if (this.sprite.INDEX instanceof Array)
            for (var i = this.sprite.INDEX, s = 0; s < i.length; s++)
                for (var o = 0; o < i[s].length; o++)
                    e.push({
                        pos: vec2.add(this.pos, vec2.make(o, s)),
                        reverse: !this.dir,
                        index: i[3 !== t ? s : i.length - 1 - s][o],
                        mode: t
                    });
        else
            e.push({
                pos: this.pos,
                reverse: !this.dir,
                index: this.sprite.INDEX,
                mode: t
            })
    }
}
;
HammerBroObject.prototype.play = GameObject.prototype.play;
GameObject.REGISTER_OBJECT(HammerBroObject);
"use strict";
function BowserObject(e, t, i, s, o, a) {
    GameObject.call(this, e, t, i, s);
    switch (parseInt(a)) {
    case 1:
        this.fire = false;
        this.hammer = true;
        break;
    case 2:
        this.fire = true;
        this.hammer = true;
        break;
    default:
        this.fire = true;
        this.hammer = false;
        break
    }
    this.oid = o;
    this.state = BowserObject.STATE.RUN;
    this.sprite = this.state.SPRITE[0];
    this.anim = 0;
    this.health = BowserObject.HEALTH;
    this.bonkTimer = 0;
    this.dim = vec2.make(2, 2);
    this.fallSpeed = this.moveSpeed = 0;
    this.grounded = false;
    this.loc = [this.pos.x, this.pos.x - BowserObject.MOVE_AREA];
    this.groundTimer = this.attackAnimTimer = this.attackTimer = this.hammerAttackTimer = 0;
    this.lastHammerTime = 0;
    this.hammersThrown = 0;
    this.jumpTimer = -1;
    this.reverse = false;
    this.dir = true
}
BowserObject.ASYNC = true;
BowserObject.ID = 25;
BowserObject.NAME = "BOWSER";
BowserObject.ANIMATION_RATE = 5;
BowserObject.HEALTH = 5;
BowserObject.BONK_TIME = 90;
BowserObject.BONK_IMP = vec2.make(.25, .4);
BowserObject.BONK_DECEL = .925;
BowserObject.BONK_FALL_SPEED = .5;
BowserObject.MOVE_SPEED_MAX = .095;
BowserObject.JUMP_DELAY = 45;
BowserObject.MOVE_AREA = 5;
BowserObject.JUMP_LENGTH = 6;
BowserObject.JUMP_DECEL = .009;
BowserObject.ATTACK_DELAY = 75;
BowserObject.ATTACK_ANIM_LENGTH = 15;
BowserObject.HAMMER_ATTACK_DELAY = 80;
BowserObject.HAMMER_HOLD_TIME = 1;
BowserObject.HAMMER_VOLLEY_SIZE = 8;
BowserObject.HAMMER_VOLLEY_DELAY = 5;
BowserObject.PROJ_OFFSET = vec2.make(-.25, .25);
BowserObject.HAMMER_PROJ_OFFSET = vec2.make(.5, 2);
BowserObject.FALL_SPEED_MAX = .3;
BowserObject.FALL_SPEED_ACCEL = .085;
BowserObject.SPRITE = {};
BowserObject.SPRITE_LIST = [{
    NAME: "RUN0",
    ID: 0,
    INDEX: [[196, 197], [180, 181]]
}, {
    NAME: "RUN1",
    ID: 1,
    INDEX: [[198, 199], [182, 183]]
}, {
    NAME: "ATTACK0",
    ID: 2,
    INDEX: [[192, 193], [176, 177]]
}, {
    NAME: "ATTACK1",
    ID: 3,
    INDEX: [[194, 195], [178, 179]]
}];
for (_0x1bec55 = 0; _0x1bec55 < BowserObject.SPRITE_LIST.length; _0x1bec55++)
    BowserObject.SPRITE[BowserObject.SPRITE_LIST[_0x1bec55].NAME] = BowserObject.SPRITE_LIST[_0x1bec55],
    BowserObject.SPRITE[BowserObject.SPRITE_LIST[_0x1bec55].ID] = BowserObject.SPRITE_LIST[_0x1bec55];
BowserObject.STATE = {};
BowserObject.STATE_LIST = [{
    NAME: "RUN",
    ID: 0,
    SPRITE: [BowserObject.SPRITE.RUN0, BowserObject.SPRITE.RUN1]
}, {
    NAME: "ATTACK",
    ID: 1,
    SPRITE: [BowserObject.SPRITE.ATTACK0, BowserObject.SPRITE.ATTACK1]
}, {
    NAME: "BONK",
    ID: 81,
    SPRITE: []
}];
for (_0x1bec55 = 0; _0x1bec55 < BowserObject.STATE_LIST.length; _0x1bec55++)
    BowserObject.STATE[BowserObject.STATE_LIST[_0x1bec55].NAME] = BowserObject.STATE_LIST[_0x1bec55],
    BowserObject.STATE[BowserObject.STATE_LIST[_0x1bec55].ID] = BowserObject.STATE_LIST[_0x1bec55];
BowserObject.prototype.update = function(e) {}
;
BowserObject.prototype.step = function() {
    if (this.state === BowserObject.STATE.BONK) {
        if (this.bonkTimer++ > BowserObject.BONK_TIME || 0 > this.pos.y + this.dim.y) {
            this.destroy()
        } else {
            this.pos = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed));
            this.moveSpeed *= BowserObject.BONK_DECEL;
            this.fallSpeed = Math.max(this.fallSpeed - BowserObject.FALL_SPEED_ACCEL, -BowserObject.BONK_FALL_SPEED)
        }
    } else {
        this.anim++;
        this.sprite = this.state.SPRITE[parseInt(this.anim / BowserObject.ANIMATION_RATE) % this.state.SPRITE.length];
        this.control();
        this.physics();
        this.sound();
        if (this.fire && this.attackTimer++ > BowserObject.ATTACK_DELAY)
            this.attack();
        if (this.hammer && this.hammerAttackTimer++ > BowserObject.HAMMER_ATTACK_DELAY)
            this.hammerAttack();
        if (0 < this.attackAnimTimer) {
            this.setState(BowserObject.STATE.ATTACK);
            this.attackAnimTimer--
        } else {
            this.setState(BowserObject.STATE.RUN);
            if (0 > this.pos.y)
                this.destroy()
        }
    }
}
;
BowserObject.prototype.control = function() {
    this.grounded ? (BowserObject.JUMP_DELAY < this.groundTimer++ && (this.groundTimer = this.jumpTimer = 0),
    this.pos.x > this.loc[0] ? this.reverse = true : this.pos.x < this.loc[1] && (this.reverse = false)) : this.jumpTimer > BowserObject.JUMP_LENGTH && (this.jumpTimer = -1);
    this.moveSpeed = .75 * this.moveSpeed + .25 * (this.reverse ? -BowserObject.MOVE_SPEED_MAX : BowserObject.MOVE_SPEED_MAX)
}
;
BowserObject.prototype.physics = function() {
    -1 !== this.jumpTimer ? (this.fallSpeed = BowserObject.FALL_SPEED_MAX - this.jumpTimer * BowserObject.JUMP_DECEL,
    this.jumpTimer++,
    this.grounded = false) : (this.grounded && (this.fallSpeed = 0),
    this.fallSpeed = Math.max(this.fallSpeed - BowserObject.FALL_SPEED_ACCEL, -BowserObject.FALL_SPEED_MAX));
    var e = vec2.add(this.pos, vec2.make(this.moveSpeed, 0))
      , t = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed))
      , i = vec2.make(0 <= this.moveSpeed ? this.pos.x : this.pos.x + this.moveSpeed, 0 >= this.fallSpeed ? this.pos.y : this.pos.y + this.fallSpeed)
      , s = vec2.make(this.dim.y + Math.abs(this.moveSpeed), this.dim.y + Math.abs(this.fallSpeed))
      , i = this.game.world.getZone(this.level, this.zone).getTiles(i, s)
      , s = vec2.make(1, 1);
    this.grounded = false;
    for (var o = 0; o < i.length; o++) {
        var a = i[o];
        a.definition.COLLIDE && squar.intersection(a.pos, s, e, this.dim) && (this.pos.x + this.dim.x <= a.pos.x && e.x + this.dim.x > a.pos.x ? (e.x = a.pos.x - this.dim.x,
        t.x = e.x,
        this.moveSpeed = 0) : this.pos.x >= a.pos.x + s.x && e.x < a.pos.x + s.x && (e.x = a.pos.x + s.x,
        t.x = e.x,
        this.moveSpeed = 0))
    }
    for (o = 0; o < i.length; o++)
        a = i[o],
        a.definition.COLLIDE && squar.intersection(a.pos, s, t, this.dim) && (this.pos.y >= a.pos.y + s.y && t.y < a.pos.y + s.y ? (t.y = a.pos.y + s.y,
        this.fallSpeed = 0,
        this.grounded = true) : this.pos.y + this.dim.y <= a.pos.y && t.y + this.dim.y > a.pos.y && (t.y = a.pos.y - this.dim.y,
        this.jumpTimer = -1,
        this.fallSpeed = 0));
    this.pos = vec2.make(e.x, t.y)
}
;
BowserObject.prototype.sound = GameObject.prototype.sound;
BowserObject.prototype.attack = function() {
    this.attackAnimTimer = BowserObject.ATTACK_ANIM_LENGTH;
    this.attackTimer = 0;
    this.game.createObject(FireBreathObject.ID, this.level, this.zone, vec2.add(this.pos, BowserObject.PROJ_OFFSET), []);
    this.play("breath.mp3", 1.5, .04)
}
;
BowserObject.prototype.hammerAttack = function() {
    var e = this.hammerAttackTimer - this.lastHammerTime;
    if (this.hammersThrown == 0 || e >= BowserObject.HAMMER_VOLLEY_DELAY) {
        this.lastHammerTime = this.hammersThrown == 0 ? BowserObject.HAMMER_ATTACK_DELAY : this.lastHammerTime + BowserObject.HAMMER_VOLLEY_DELAY;
        this.game.createObject(HammerObject.ID, this.level, this.zone, vec2.add(this.pos, BowserObject.HAMMER_PROJ_OFFSET), [this, BowserObject.HAMMER_HOLD_TIME]);
        this.hammersThrown += 1;
        if (this.hammersThrown >= BowserObject.HAMMER_VOLLEY_SIZE) {
            this.hammerAttackTimer = 0;
            this.lastHammerTime = 0;
            this.hammersThrown = 0
        }
    }
}
;
BowserObject.prototype.playerCollide = function(e) {
    this.dead || this.garbage || e.damage(this)
}
;
BowserObject.prototype.playerStomp = BowserObject.prototype.playerCollide;
BowserObject.prototype.playerBump = BowserObject.prototype.playerCollide;
BowserObject.prototype.damage = function(e) {
    this.dead || 0 >= --this.health && this.bonk()
}
;
BowserObject.prototype.bonk = function() {
    this.dead || (this.setState(BowserObject.STATE.BONK),
    this.moveSpeed = BowserObject.BONK_IMP.x,
    this.fallSpeed = BowserObject.BONK_IMP.y,
    this.dead = true,
    this.play("kick.mp3", 1, .04))
}
;
BowserObject.prototype.kill = function() {}
;
BowserObject.prototype.isTangible = GameObject.prototype.isTangible;
BowserObject.prototype.destroy = GameObject.prototype.destroy;
BowserObject.prototype.setState = function(e) {
    e !== this.state && (this.state = e,
    0 < e.SPRITE.length && (this.sprite = e.SPRITE[0]),
    this.anim = 0)
}
;
BowserObject.prototype.draw = function(e) {
    var t;
    t = this.state === BowserObject.STATE.BONK ? 3 : 0;
    if (this.sprite.INDEX instanceof Array)
        for (var i = this.sprite.INDEX, s = 0; s < i.length; s++)
            for (var o = 0; o < i[s].length; o++)
                e.push({
                    pos: vec2.add(this.pos, vec2.make(o, s)),
                    reverse: !this.dir,
                    index: i[t ? i.length - 1 - s : s][o],
                    mode: t
                });
    else
        e.push({
            pos: this.pos,
            reverse: !this.dir,
            index: this.sprite.INDEX,
            mode: t
        })
}
;
BowserObject.prototype.play = GameObject.prototype.play;
GameObject.REGISTER_OBJECT(BowserObject);
"use strict";
function MovingPlatformObject(e, t, i, s, o, a, r, n, p, c, l, h) {
    GameObject.call(this, e, t, i, s);
    this.oid = o;
    this.setState(MovingPlatformObject.STATE.IDLE);
    this.loc = 0 === parseInt(h) ? [s, vec2.add(s, vec2.make(parseInt(r), parseInt(n)))] : [vec2.add(s, vec2.make(parseInt(r), parseInt(n))), s];
    this.anim = 0;
    this.dim = vec2.make(parseInt(a), .5);
    this.speed = parseFloat(p);
    this.riders = [];
    this.dir = false;
    this.loop = 0 === parseInt(c) ? false : true;
    this.delay = parseInt(l)
}
MovingPlatformObject.ASYNC = true;
MovingPlatformObject.ID = 145;
MovingPlatformObject.NAME = "PLATFORM";
MovingPlatformObject.ANIMATION_RATE = 3;
MovingPlatformObject.SPRITE = {};
MovingPlatformObject.SPRITE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    INDEX: 160
}];
for (_0x1bec55 = 0; _0x1bec55 < MovingPlatformObject.SPRITE_LIST.length; _0x1bec55++)
    MovingPlatformObject.SPRITE[MovingPlatformObject.SPRITE_LIST[_0x1bec55].NAME] = MovingPlatformObject.SPRITE_LIST[_0x1bec55],
    MovingPlatformObject.SPRITE[MovingPlatformObject.SPRITE_LIST[_0x1bec55].ID] = MovingPlatformObject.SPRITE_LIST[_0x1bec55];
MovingPlatformObject.STATE = {};
MovingPlatformObject.STATE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    SPRITE: [MovingPlatformObject.SPRITE.IDLE]
}];
for (_0x1bec55 = 0; _0x1bec55 < MovingPlatformObject.STATE_LIST.length; _0x1bec55++)
    MovingPlatformObject.STATE[MovingPlatformObject.STATE_LIST[_0x1bec55].NAME] = MovingPlatformObject.STATE_LIST[_0x1bec55],
    MovingPlatformObject.STATE[MovingPlatformObject.STATE_LIST[_0x1bec55].ID] = MovingPlatformObject.STATE_LIST[_0x1bec55];
MovingPlatformObject.prototype.update = function(e) {}
;
MovingPlatformObject.prototype.step = function() {
    0 < this.delay-- || (this.anim++,
    this.sprite = this.state.SPRITE[parseInt(this.anim / MovingPlatformObject.ANIMATION_RATE) % this.state.SPRITE.length],
    this.physics())
}
;
MovingPlatformObject.prototype.physics = function() {
    var e = vec2.normalize(vec2.subtract(this.loc[this.dir ? 0 : 1], this.pos))
      , t = vec2.distance(this.pos, this.loc[this.dir ? 0 : 1]);
    if (t < this.speed)
        if (this.loop)
            this.dir = !this.dir;
        else {
            this.pos = this.loc[0];
            this.riders = [];
            return
        }
    e = vec2.scale(e, Math.min(this.speed, t));
    this.pos = vec2.add(this.pos, e);
    for (t = 0; t < this.riders.length; t++) {
        var i = this.riders[0];
        i.pos = vec2.add(i.pos, e)
    }
    this.riders = []
}
;
MovingPlatformObject.prototype.riding = function(e) {
    this.riders.push(e)
}
;
MovingPlatformObject.prototype.kill = function() {}
;
MovingPlatformObject.prototype.destroy = GameObject.prototype.destroy;
MovingPlatformObject.prototype.isTangible = GameObject.prototype.isTangible;
MovingPlatformObject.prototype.setState = function(e) {
    e !== this.state && (this.state = e,
    this.sprite = e.SPRITE[0],
    this.anim = 0)
}
;
MovingPlatformObject.prototype.draw = function(e) {
    if (!(0 < this.delay))
        for (var t = 0; t < this.dim.x; t++)
            e.push({
                pos: vec2.add(this.pos, vec2.make(t, 0)),
                reverse: this.reverse,
                index: this.sprite.INDEX,
                mode: 0
            })
}
;
GameObject.REGISTER_OBJECT(MovingPlatformObject);
"use strict";
function BusPlatformObject(e, t, i, s, o, a, r, n, p) {
    GameObject.call(this, e, t, i, s);
    this.oid = o;
    this.setState(BusPlatformObject.STATE.IDLE);
    this.loc = [s, vec2.add(s, vec2.make(parseInt(r), parseInt(n)))];
    this.anim = 0;
    this.dim = vec2.make(parseInt(a), .5);
    this.speed = parseFloat(p);
    this.riders = [];
    this.dir = this.go = false
}
BusPlatformObject.ASYNC = false;
BusPlatformObject.ID = 146;
BusPlatformObject.NAME = "BUS PLATFORM";
BusPlatformObject.ANIMATION_RATE = 3;
BusPlatformObject.SPRITE = {};
BusPlatformObject.SPRITE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    INDEX: 160
}];
for (_0x1bec55 = 0; _0x1bec55 < BusPlatformObject.SPRITE_LIST.length; _0x1bec55++)
    BusPlatformObject.SPRITE[BusPlatformObject.SPRITE_LIST[_0x1bec55].NAME] = BusPlatformObject.SPRITE_LIST[_0x1bec55],
    BusPlatformObject.SPRITE[BusPlatformObject.SPRITE_LIST[_0x1bec55].ID] = BusPlatformObject.SPRITE_LIST[_0x1bec55];
BusPlatformObject.STATE = {};
BusPlatformObject.STATE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    SPRITE: [BusPlatformObject.SPRITE.IDLE]
}];
for (_0x1bec55 = 0; _0x1bec55 < BusPlatformObject.STATE_LIST.length; _0x1bec55++)
    BusPlatformObject.STATE[BusPlatformObject.STATE_LIST[_0x1bec55].NAME] = BusPlatformObject.STATE_LIST[_0x1bec55],
    BusPlatformObject.STATE[BusPlatformObject.STATE_LIST[_0x1bec55].ID] = BusPlatformObject.STATE_LIST[_0x1bec55];
BusPlatformObject.prototype.update = function(e) {
    switch (e) {
    case 161:
        this.start()
    }
}
;
BusPlatformObject.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / BusPlatformObject.ANIMATION_RATE) % this.state.SPRITE.length];
    this.physics()
}
;
BusPlatformObject.prototype.physics = function() {
    if (this.go) {
        var e = vec2.normalize(vec2.subtract(this.loc[this.dir ? 0 : 1], this.pos))
          , t = vec2.distance(this.pos, this.loc[this.dir ? 0 : 1])
          , e = vec2.scale(e, Math.min(this.speed, t));
        this.pos = vec2.add(this.pos, e);
        for (t = 0; t < this.riders.length; t++) {
            var i = this.riders[0];
            i.pos = vec2.add(i.pos, e)
        }
    }
    this.riders = []
}
;
BusPlatformObject.prototype.start = function() {
    this.go = true
}
;
BusPlatformObject.prototype.riding = function(e) {
    e.pid !== this.game.pid || this.go || this.game.out.push(NET020.encode(this.level, this.zone, this.oid, 161));
    this.riders.push(e)
}
;
BusPlatformObject.prototype.kill = function() {}
;
BusPlatformObject.prototype.isTangible = GameObject.prototype.isTangible;
BusPlatformObject.prototype.destroy = GameObject.prototype.destroy;
BusPlatformObject.prototype.setState = function(e) {
    e !== this.state && (this.state = e,
    this.sprite = e.SPRITE[0],
    this.anim = 0)
}
;
BusPlatformObject.prototype.draw = function(e) {
    if (!(0 < this.delay))
        for (var t = 0; t < this.dim.x; t++)
            e.push({
                pos: vec2.add(this.pos, vec2.make(t, 0)),
                reverse: this.reverse,
                index: this.sprite.INDEX,
                mode: 0
            })
}
;
GameObject.REGISTER_OBJECT(BusPlatformObject);
"use strict";
function SpringObject(e, t, i, s, o) {
    GameObject.call(this, e, t, i, s);
    this.oid = o;
    this.setState(SpringObject.STATE.EXTEND);
    this.anim = 0;
    this.pos = vec2.add(this.pos, SpringObject.SOFFSET);
    this.dim = vec2.make(.8, 2)
}
SpringObject.ASYNC = true;
SpringObject.ID = 149;
SpringObject.NAME = "SPRING";
SpringObject.ANIMATION_RATE = 3;
SpringObject.SOFFSET = vec2.make(.1, 0);
SpringObject.THRESHOLD = [1, .5];
SpringObject.POWER = .45;
SpringObject.SPRITE = {};
SpringObject.SPRITE_LIST = [{
    NAME: "STAGE0",
    ID: 0,
    INDEX: [[161], [145]]
}, {
    NAME: "STAGE1",
    ID: 1,
    INDEX: 162
}, {
    NAME: "STAGE2",
    ID: 2,
    INDEX: 163
}];
for (var i = 0; i < SpringObject.SPRITE_LIST.length; i++) {
    SpringObject.SPRITE[SpringObject.SPRITE_LIST[i].NAME] = SpringObject.SPRITE_LIST[i];
    SpringObject.SPRITE[SpringObject.SPRITE_LIST[i].ID] = SpringObject.SPRITE_LIST[i]
}
SpringObject.STATE = {};
SpringObject.STATE_LIST = [{
    NAME: "EXTEND",
    ID: 0,
    SPRITE: [SpringObject.SPRITE.STAGE0]
}, {
    NAME: "HALF",
    ID: 1,
    SPRITE: [SpringObject.SPRITE.STAGE1]
}, {
    NAME: "COMPRESS",
    ID: 2,
    SPRITE: [SpringObject.SPRITE.STAGE2]
}];
for (var i = 0; i < SpringObject.STATE_LIST.length; i++) {
    SpringObject.STATE[SpringObject.STATE_LIST[i].NAME] = SpringObject.STATE_LIST[i];
    SpringObject.STATE[SpringObject.STATE_LIST[i].ID] = SpringObject.STATE_LIST[i]
}
SpringObject.prototype.update = function(e) {}
;
SpringObject.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / SpringObject.ANIMATION_RATE) % this.state.SPRITE.length];
    this.interaction()
}
;
SpringObject.prototype.interaction = function() {
    var e = this.game.getPlayer();
    if (e && e.level === this.level && e.zone === this.zone && e.isTangible() && squar.intersection(this.pos, this.dim, e.pos, e.dim)) {
        var t = Math.pow(1 - .5 * Math.min(Math.max(0, e.pos.y - this.pos.y), 2), 2);
        if (e.fallSpeed >= .75 * PlayerObject.FALL_SPEED_MAX && e.btnA) {
            e.jumping = 0;
            if (!e.isSpring) {
                this.game.play("spring.mp3", 1, 0);
                e.isSpring = true
            }
        }
        if (!e.tfmTimer)
            e.fallSpeed += Math.min(2 * PlayerObject.FALL_SPEED_MAX, t * SpringObject.POWER);
        e.grounded = false
    }
    var t = 2;
    for (i = 0; i < this.game.objects.length; i++) {
        var s = this.game.objects[i];
        if (s instanceof PlayerObject && s.level === this.level && s.zone === this.zone && s.isTangible() && squar.intersection(this.pos, this.dim, s.pos, s.dim)) {
            var o = Math.min(Math.max(0, s.pos.y - this.pos.y), 2);
            if (o < t)
                t = o
        }
    }
    if (t < SpringObject.THRESHOLD[1])
        this.setState(SpringObject.STATE.COMPRESS);
    else if (t < SpringObject.THRESHOLD[0])
        this.setState(SpringObject.STATE.HALF);
    else
        this.setState(SpringObject.STATE.EXTEND)
}
;
SpringObject.prototype.kill = function() {}
;
SpringObject.prototype.destroy = GameObject.prototype.destroy;
SpringObject.prototype.isTangible = GameObject.prototype.isTangible;
SpringObject.prototype.setState = function(e) {
    e !== this.state && (this.state = e,
    this.sprite = e.SPRITE[0],
    this.anim = 0)
}
;
SpringObject.prototype.draw = function(e) {
    if (this.sprite.INDEX instanceof Array)
        for (var t = this.sprite.INDEX, i = 0; i < t.length; i++)
            for (var s = 0; s < t[i].length; s++)
                e.push({
                    pos: vec2.subtract(vec2.add(this.pos, vec2.make(s, i)), SpringObject.SOFFSET),
                    reverse: false,
                    index: t[i][s]
                });
    else
        e.push({
            pos: vec2.subtract(this.pos, SpringObject.SOFFSET),
            reverse: false,
            index: this.sprite.INDEX,
            mode: 0
        })
}
;
GameObject.REGISTER_OBJECT(SpringObject);
"use strict";
function FlagpoleObject(e, t, i, s, o) {
    GameObject.call(this, e, t, i, s);
    this.oid = o;
    this.setState(FlagpoleObject.STATE.IDLE);
    this.anim = 0
}
FlagpoleObject.ASYNC = true;
FlagpoleObject.ID = 177;
FlagpoleObject.NAME = "FLAG";
FlagpoleObject.ANIMATION_RATE = 3;
FlagpoleObject.OFFSET = vec2.make(-.5, 0);
FlagpoleObject.SPRITE = {};
FlagpoleObject.SPRITE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    INDEX: 144
}];
for (_0x1bec55 = 0; _0x1bec55 < FlagpoleObject.SPRITE_LIST.length; _0x1bec55++)
    FlagpoleObject.SPRITE[FlagpoleObject.SPRITE_LIST[_0x1bec55].NAME] = FlagpoleObject.SPRITE_LIST[_0x1bec55],
    FlagpoleObject.SPRITE[FlagpoleObject.SPRITE_LIST[_0x1bec55].ID] = FlagpoleObject.SPRITE_LIST[_0x1bec55];
FlagpoleObject.STATE = {};
FlagpoleObject.STATE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    SPRITE: [FlagpoleObject.SPRITE.IDLE]
}];
for (_0x1bec55 = 0; _0x1bec55 < FlagpoleObject.STATE_LIST.length; _0x1bec55++)
    FlagpoleObject.STATE[FlagpoleObject.STATE_LIST[_0x1bec55].NAME] = FlagpoleObject.STATE_LIST[_0x1bec55],
    FlagpoleObject.STATE[FlagpoleObject.STATE_LIST[_0x1bec55].ID] = FlagpoleObject.STATE_LIST[_0x1bec55];
FlagpoleObject.prototype.update = function(e) {}
;
FlagpoleObject.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / FlagpoleObject.ANIMATION_RATE) % this.state.SPRITE.length]
}
;
FlagpoleObject.prototype.kill = function() {}
;
FlagpoleObject.prototype.isTangible = GameObject.prototype.isTangible;
FlagpoleObject.prototype.destroy = GameObject.prototype.destroy;
FlagpoleObject.prototype.setState = function(e) {
    e !== this.state && (this.state = e,
    this.sprite = e.SPRITE[0],
    this.anim = 0)
}
;
FlagpoleObject.prototype.draw = function(e) {
    e.push({
        pos: vec2.add(this.pos, FlagpoleObject.OFFSET),
        reverse: false,
        index: this.sprite.INDEX,
        mode: 0
    })
}
;
GameObject.REGISTER_OBJECT(FlagpoleObject);
"use strict";
function FireBarObject(e, t, i, s, o, a, r) {
    GameObject.call(this, e, t, i, s);
    this.oid = o;
    this.state = FireBarObject.STATE.IDLE;
    this.sprite = this.state.SPRITE[0];
    this.anim = 1 === parseInt(a) ? 2 * FireBarObject.SPIN_RATE : 0;
    this.dim = vec2.make(.5, .5);
    this.size = isNaN(parseInt(r)) ? FireBarObject.PARTS : parseInt(r)
}
FireBarObject.ASYNC = true;
FireBarObject.ID = 33;
FireBarObject.NAME = "FIRE BAR";
FireBarObject.ANIMATION_RATE = 2;
FireBarObject.OFFSET = vec2.make(.25, .25);
FireBarObject.PARTS = 6;
FireBarObject.SPACING = .5;
FireBarObject.SPIN_RATE = 23;
FireBarObject.SPRITE = {};
FireBarObject.SPRITE_LIST = [{
    NAME: "IDLE0",
    ID: 0,
    INDEX: 208
}, {
    NAME: "IDLE1",
    ID: 1,
    INDEX: 209
}, {
    NAME: "IDLE2",
    ID: 2,
    INDEX: 210
}, {
    NAME: "IDLE3",
    ID: 3,
    INDEX: 211
}];
for (_0x1bec55 = 0; _0x1bec55 < FireBarObject.SPRITE_LIST.length; _0x1bec55++)
    FireBarObject.SPRITE[FireBarObject.SPRITE_LIST[_0x1bec55].NAME] = FireBarObject.SPRITE_LIST[_0x1bec55],
    FireBarObject.SPRITE[FireBarObject.SPRITE_LIST[_0x1bec55].ID] = FireBarObject.SPRITE_LIST[_0x1bec55];
FireBarObject.STATE = {};
FireBarObject.STATE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    SPRITE: [FireBarObject.SPRITE.IDLE0, FireBarObject.SPRITE.IDLE1, FireBarObject.SPRITE.IDLE2, FireBarObject.SPRITE.IDLE3]
}];
for (_0x1bec55 = 0; _0x1bec55 < FireBarObject.STATE_LIST.length; _0x1bec55++)
    FireBarObject.STATE[FireBarObject.STATE_LIST[_0x1bec55].NAME] = FireBarObject.STATE_LIST[_0x1bec55],
    FireBarObject.STATE[FireBarObject.STATE_LIST[_0x1bec55].ID] = FireBarObject.STATE_LIST[_0x1bec55];
FireBarObject.prototype.update = function() {}
;
FireBarObject.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / FireBarObject.ANIMATION_RATE) % this.state.SPRITE.length];
    this.control();
    this.interaction()
}
;
FireBarObject.prototype.control = function() {
    this.rot += FireBarObject.SPIN_RATE
}
;
FireBarObject.prototype.interaction = function() {
    var e = vec2.normalize(vec2.make(Math.sin(-this.anim / FireBarObject.SPIN_RATE), Math.cos(-this.anim / FireBarObject.SPIN_RATE)))
      , t = this.game.getPlayer();
    if (t && t.isTangible() && t.level === this.level && t.zone === this.zone)
        for (var i = 0; i < this.size; i++) {
            var s = vec2.add(vec2.add(this.pos, FireBarObject.OFFSET), vec2.scale(e, FireBarObject.SPACING * i));
            squar.intersection(t.pos, t.dim, s, this.dim) && t.damage(this)
        }
}
;
FireBarObject.prototype.playerCollide = function(e) {}
;
FireBarObject.prototype.playerStomp = function(e) {}
;
FireBarObject.prototype.playerBump = function(e) {}
;
FireBarObject.prototype.kill = function() {}
;
FireBarObject.prototype.isTangible = GameObject.prototype.isTangible;
FireBarObject.prototype.destroy = GameObject.prototype.destroy;
FireBarObject.prototype.setState = function(e) {
    e !== this.state && (this.state = e,
    this.sprite = e.SPRITE[0],
    this.anim = 0)
}
;
FireBarObject.prototype.draw = function(e) {
    for (var t = vec2.normalize(vec2.make(Math.sin(-this.anim / FireBarObject.SPIN_RATE), Math.cos(-this.anim / FireBarObject.SPIN_RATE))), i = 0; i < this.size; i++)
        e.push({
            pos: vec2.add(this.pos, vec2.scale(t, FireBarObject.SPACING * i)),
            reverse: false,
            index: this.sprite.INDEX,
            mode: 0
        })
}
;
GameObject.REGISTER_OBJECT(FireBarObject);
"use strict";
function LavaBubbleObject(e, t, i, s, o, a, r) {
    GameObject.call(this, e, t, i, s);
    this.oid = o;
    this.setState(LavaBubbleObject.STATE.IDLE);
    this.delay = isNaN(parseInt(a)) ? LavaBubbleObject.DELAY_DEFAULT : parseInt(a);
    this.impulse = isNaN(parseFloat(r)) ? 1 : parseFloat(r);
    this.anim = 0;
    this.delayTimer = this.delay;
    this.pos.x += LavaBubbleObject.SOFFSET.x;
    this.loc = vec2.copy(this.pos);
    this.fallSpeed = 0;
    this.dim = vec2.make(.7, .7)
}
LavaBubbleObject.ASYNC = true;
LavaBubbleObject.ID = 34;
LavaBubbleObject.NAME = "LAVA BUBBLE";
LavaBubbleObject.ANIMATION_RATE = 3;
LavaBubbleObject.DELAY_DEFAULT = 90;
LavaBubbleObject.IMPULSE = 1.35;
LavaBubbleObject.DRAG = .95;
LavaBubbleObject.FALL_SPEED_ACCEL = .055;
LavaBubbleObject.SOFFSET = vec2.make(.15, .15);
LavaBubbleObject.SPRITE = {};
LavaBubbleObject.SPRITE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    INDEX: 219
}];
for (_0x1bec55 = 0; _0x1bec55 < LavaBubbleObject.SPRITE_LIST.length; _0x1bec55++)
    LavaBubbleObject.SPRITE[LavaBubbleObject.SPRITE_LIST[_0x1bec55].NAME] = LavaBubbleObject.SPRITE_LIST[_0x1bec55],
    LavaBubbleObject.SPRITE[LavaBubbleObject.SPRITE_LIST[_0x1bec55].ID] = LavaBubbleObject.SPRITE_LIST[_0x1bec55];
LavaBubbleObject.STATE = {};
LavaBubbleObject.STATE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    SPRITE: [LavaBubbleObject.SPRITE.IDLE]
}];
for (_0x1bec55 = 0; _0x1bec55 < LavaBubbleObject.STATE_LIST.length; _0x1bec55++)
    LavaBubbleObject.STATE[LavaBubbleObject.STATE_LIST[_0x1bec55].NAME] = LavaBubbleObject.STATE_LIST[_0x1bec55],
    LavaBubbleObject.STATE[LavaBubbleObject.STATE_LIST[_0x1bec55].ID] = LavaBubbleObject.STATE_LIST[_0x1bec55];
LavaBubbleObject.prototype.update = function(e) {}
;
LavaBubbleObject.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / LavaBubbleObject.ANIMATION_RATE) % this.state.SPRITE.length];
    0 < this.delayTimer ? this.delayTimer-- : this.blast();
    this.physics()
}
;
LavaBubbleObject.prototype.physics = function() {
    if (this.pos.y > this.loc.y || 0 < this.fallSpeed)
        this.fallSpeed = (this.fallSpeed - LavaBubbleObject.FALL_SPEED_ACCEL) * LavaBubbleObject.DRAG,
        this.pos.y += this.fallSpeed
}
;
LavaBubbleObject.prototype.blast = function() {
    this.pos = vec2.copy(this.loc);
    this.fallSpeed = LavaBubbleObject.IMPULSE * this.impulse;
    this.delayTimer = this.delay
}
;
LavaBubbleObject.prototype.playerCollide = function(e) {
    this.dead || this.garbage || e.damage(this)
}
;
LavaBubbleObject.prototype.playerStomp = function(e) {
    this.playerCollide(e)
}
;
LavaBubbleObject.prototype.playerBump = function(e) {
    this.playerCollide(e)
}
;
LavaBubbleObject.prototype.kill = function() {}
;
LavaBubbleObject.prototype.isTangible = GameObject.prototype.isTangible;
LavaBubbleObject.prototype.destroy = GameObject.prototype.destroy;
LavaBubbleObject.prototype.setState = function(e) {
    e !== this.state && (this.state = e,
    this.sprite = e.SPRITE[0],
    this.anim = 0)
}
;
LavaBubbleObject.prototype.draw = function(e) {
    var t = 0 <= this.fallSpeed ? 0 : 3;
    e.push({
        pos: vec2.subtract(this.pos, LavaBubbleObject.SOFFSET),
        reverse: false,
        index: this.sprite.INDEX,
        mode: t
    })
}
;
GameObject.REGISTER_OBJECT(LavaBubbleObject);
"use strict";
function BillBlasterObject(e, t, i, s, o, a, r) {
    GameObject.call(this, e, t, i, s);
    this.oid = o;
    this.setState(BillBlasterObject.STATE.IDLE);
    this.fireTimer = 0;
    this.delay = isNaN(parseInt(a)) ? BillBlasterObject.FIRE_DELAY_DEFAULT : parseInt(a);
    this.shootDirection = isNaN(parseInt(r)) ? 0 : parseInt(r)
}
BillBlasterObject.ASYNC = true;
BillBlasterObject.ID = 35;
BillBlasterObject.NAME = "BILL BLASTER";
BillBlasterObject.ANIMATION_RATE = 3;
BillBlasterObject.FIRE_DELAY_DEFAULT = 150;
BillBlasterObject.SPRITE = {};
BillBlasterObject.SPRITE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    INDEX: 255
}];
for (_0x1bec55 = 0; _0x1bec55 < BillBlasterObject.SPRITE_LIST.length; _0x1bec55++)
    BillBlasterObject.SPRITE[BillBlasterObject.SPRITE_LIST[_0x1bec55].NAME] = BillBlasterObject.SPRITE_LIST[_0x1bec55],
    BillBlasterObject.SPRITE[BillBlasterObject.SPRITE_LIST[_0x1bec55].ID] = BillBlasterObject.SPRITE_LIST[_0x1bec55];
BillBlasterObject.STATE = {};
BillBlasterObject.STATE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    SPRITE: [BillBlasterObject.SPRITE.IDLE]
}];
for (_0x1bec55 = 0; _0x1bec55 < BillBlasterObject.STATE_LIST.length; _0x1bec55++)
    BillBlasterObject.STATE[BillBlasterObject.STATE_LIST[_0x1bec55].NAME] = BillBlasterObject.STATE_LIST[_0x1bec55],
    BillBlasterObject.STATE[BillBlasterObject.STATE_LIST[_0x1bec55].ID] = BillBlasterObject.STATE_LIST[_0x1bec55];
BillBlasterObject.prototype.update = function(e) {}
;
BillBlasterObject.prototype.step = function() {
    ++this.fireTimer > this.delay && this.fire();
    this.sound()
}
;
BillBlasterObject.prototype.sound = GameObject.prototype.sound;
BillBlasterObject.prototype.fire = function() {
    this.fireTimer = 0;
    this.game.createObject(BulletBillObject.ID, this.level, this.zone, vec2.copy(this.pos), [undefined, this.shootDirection]);
    this.play("firework.mp3", 1, .04)
}
;
BillBlasterObject.prototype.kill = function() {}
;
BillBlasterObject.prototype.isTangible = GameObject.prototype.isTangible;
BillBlasterObject.prototype.destroy = GameObject.prototype.destroy;
BillBlasterObject.prototype.setState = function(e) {
    e !== this.state && (this.state = e,
    this.sprite = e.SPRITE[0],
    this.anim = 0)
}
;
BillBlasterObject.prototype.draw = function(e) {}
;
BillBlasterObject.prototype.play = GameObject.prototype.play;
GameObject.REGISTER_OBJECT(BillBlasterObject);
function BulletBillObject(e, t, i, s, o, a) {
    GameObject.call(this, e, t, i, s);
    this.oid = o;
    this.setState(BulletBillObject.STATE.IDLE);
    this.bonkTimer = this.anim = 0;
    this.dim = vec2.make(.8, .8);
    this.fallSpeed = this.moveSpeed = 0;
    this.direction = isNaN(parseInt(a)) ? 0 : parseInt(a)
}
BulletBillObject.ASYNC = true;
BulletBillObject.ID = 36;
BulletBillObject.NAME = "BULLET";
BulletBillObject.ANIMATION_RATE = 3;
BulletBillObject.SPEED = .215;
BulletBillObject.BONK_TIME = 90;
BulletBillObject.BONK_IMP = vec2.make(0, .4);
BulletBillObject.BONK_DECEL = .925;
BulletBillObject.BONK_FALL_SPEED = .5;
BulletBillObject.BONK_FALL_ACCEL = .085;
BulletBillObject.DELAY_DEFAULT = 275;
BulletBillObject.IMPULSE = vec2.make(.225, .335);
BulletBillObject.DRAG = .996;
BulletBillObject.FALL_SPEED_ACCEL = .0055;
BulletBillObject.SOFFSET = vec2.make(.15, .15);
BulletBillObject.SPRITE = {};
BulletBillObject.SPRITE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    INDEX: 205
}];
for (_0x1bec55 = 0; _0x1bec55 < BulletBillObject.SPRITE_LIST.length; _0x1bec55++)
    BulletBillObject.SPRITE[BulletBillObject.SPRITE_LIST[_0x1bec55].NAME] = BulletBillObject.SPRITE_LIST[_0x1bec55],
    BulletBillObject.SPRITE[BulletBillObject.SPRITE_LIST[_0x1bec55].ID] = BulletBillObject.SPRITE_LIST[_0x1bec55];
BulletBillObject.STATE = {};
BulletBillObject.STATE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    SPRITE: [BulletBillObject.SPRITE.IDLE]
}, {
    NAME: "BONK",
    ID: 81,
    SPRITE: []
}];
for (_0x1bec55 = 0; _0x1bec55 < BulletBillObject.STATE_LIST.length; _0x1bec55++)
    BulletBillObject.STATE[BulletBillObject.STATE_LIST[_0x1bec55].NAME] = BulletBillObject.STATE_LIST[_0x1bec55],
    BulletBillObject.STATE[BulletBillObject.STATE_LIST[_0x1bec55].ID] = BulletBillObject.STATE_LIST[_0x1bec55];
BulletBillObject.prototype.update = function(e) {}
;
BulletBillObject.prototype.step = function() {
    this.state === BulletBillObject.STATE.BONK ? this.bonkTimer++ > BulletBillObject.BONK_TIME || 0 > this.pos.y + this.dim.y ? this.destroy() : (this.pos = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed)),
    this.moveSpeed *= BulletBillObject.BONK_DECEL,
    this.fallSpeed = Math.max(this.fallSpeed - BulletBillObject.BONK_FALL_ACCEL, -BulletBillObject.BONK_FALL_SPEED)) : (this.anim++,
    this.sprite = this.state.SPRITE[parseInt(this.anim / BulletBillObject.ANIMATION_RATE) % this.state.SPRITE.length],
    this.physics(),
    this.sound())
}
;
BulletBillObject.prototype.physics = function() {
    0 < this.pos.x ? this.direction === 0 ? this.pos.x -= BulletBillObject.SPEED : this.pos.x += BulletBillObject.SPEED : this.destroy()
}
;
BulletBillObject.prototype.sound = GameObject.prototype.sound;
BulletBillObject.prototype.disable = function() {
    this.disabled = true
}
;
BulletBillObject.prototype.enable = function() {
    this.disabled = false
}
;
BulletBillObject.prototype.damage = function(e) {}
;
BulletBillObject.prototype.bonk = function() {
    this.dead || (this.setState(BulletBillObject.STATE.BONK),
    this.moveSpeed = BulletBillObject.BONK_IMP.x,
    this.fallSpeed = BulletBillObject.BONK_IMP.y,
    this.dead = true,
    this.play("kick.mp3", 1, .04))
}
;
BulletBillObject.prototype.playerCollide = function(e) {
    this.dead || this.garbage || e.damage(this)
}
;
BulletBillObject.prototype.playerStomp = function(e) {
    this.dead || this.garbage || (this.bonk(),
    e.bounce(),
    this.play("stomp.mp3", 1, .04),
    this.game.out.push(NET020.encode(this.level, this.zone, this.oid, 1)))
}
;
BulletBillObject.prototype.playerBump = function(e) {
    this.playerCollide(e)
}
;
BulletBillObject.prototype.kill = function() {}
;
BulletBillObject.prototype.isTangible = GameObject.prototype.isTangible;
BulletBillObject.prototype.destroy = GameObject.prototype.destroy;
BulletBillObject.prototype.setState = function(e) {
    e !== this.state && (this.state = e,
    0 < e.SPRITE.length && (this.sprite = e.SPRITE[0]),
    this.anim = 0)
}
;
BulletBillObject.prototype.draw = function(e) {
    var t;
    t = this.state === BulletBillObject.STATE.BONK ? 3 : 0;
    e.push({
        pos: vec2.subtract(this.pos, BulletBillObject.SOFFSET),
        reverse: this.direction !== 0,
        index: this.sprite.INDEX,
        mode: t
    })
}
;
BulletBillObject.prototype.play = GameObject.prototype.play;
GameObject.REGISTER_OBJECT(BulletBillObject);
"use strict";
function SpawnerObject(e, t, i, s, o, a, r, n) {
    GameObject.call(this, e, t, i, s);
    this.oid = o;
    this.objectType = parseInt(a);
    this.fireTimer = 0;
    this.delay = isNaN(parseInt(r)) ? SpawnerObject.FIRE_DELAY_DEFAULT : parseInt(r);
    this.shootDirection = isNaN(parseInt(n)) ? 0 : parseInt(n);
    this.disable()
}
SpawnerObject.ID = 37;
SpawnerObject.FIRE_DELAY_DEFAULT = 150;
SpawnerObject.ENABLE_DIST = 26;
SpawnerObject.prototype.update = function(e) {
    switch (e) {
    case 160:
        this.enable();
        break
    }
}
;
SpawnerObject.prototype.disable = function() {
    this.disabled = true
}
;
SpawnerObject.prototype.enable = function() {
    this.disabled = false
}
;
SpawnerObject.prototype.proximity = function() {
    var e = this.game.getPlayer();
    e && !e.dead && e.level === this.level && e.zone === this.zone && !this.proxHit && vec2.distance(e.pos, this.pos) < GoombaObject.ENABLE_DIST && (this.game.out.push(NET020.encode(this.level, this.zone, this.oid, 160)),
    this.proxHit = true)
}
;
SpawnerObject.prototype.step = function() {
    if (this.disabled)
        return this.proximity();
    if (++this.fireTimer > this.delay)
        this.fire()
}
;
SpawnerObject.prototype.fire = function() {
    this.fireTimer = 0;
    var e = this.game.createObject(this.objectType, this.level, this.zone, vec2.copy(this.pos), [this.game.world.getZone(this.level, this.zone).maxOid += 1]);
    e.enable && e.enable();
    if (this.shootDirection)
        e.dir = !e.dir;
    this.disable();
    this.proxHit = false
}
;
SpawnerObject.prototype.isTangible = function() {
    return false
}
;
GameObject.REGISTER_OBJECT(SpawnerObject);
function FireballObject(e, t, i, s, o, a, r, n) {
    GameObject.call(this, e, t, i, s);
    this.owner = r;
    this.skin = n;
    this.state = FireballObject.STATE.IDLE;
    this.sprite = this.state.SPRITE[0];
    this.deadTimer = this.anim = 0;
    this.dim = vec2.make(.5, .5);
    this.fallSpeed = -FireballObject.FALL_SPEED_MAX;
    this.dir = a
}
FireballObject.ASYNC = true;
FireballObject.ID = 161;
FireballObject.NAME = "FIREBALL PROJECTILE";
FireballObject.ANIMATION_RATE = 2;
FireballObject.SOFFSET = vec2.make(-.25, -.25);
FireballObject.DEAD_ANIM_LENGTH = 3;
FireballObject.SPEED = .475;
FireballObject.BOUNCE_SPEED = .375;
FireballObject.FALL_SPEED_MAX = .425;
FireballObject.FALL_SPEED_ACCEL = .065;
FireballObject.SPRITE = {};
FireballObject.SPRITE_LIST = [{
    NAME: "IDLE0",
    ID: 0,
    INDEX: 1
}, {
    NAME: "IDLE1",
    ID: 1,
    INDEX: 2
}, {
    NAME: "IDLE2",
    ID: 2,
    INDEX: 3
}, {
    NAME: "IDLE3",
    ID: 3,
    INDEX: 4
}, {
    NAME: "DEAD0",
    ID: 4,
    INDEX: 14
}, {
    NAME: "DEAD1",
    ID: 5,
    INDEX: 15
}, {
    NAME: "DEAD2",
    ID: 6,
    INDEX: 31
}];
for (_0x1bec55 = 0; _0x1bec55 < FireballObject.SPRITE_LIST.length; _0x1bec55++)
    FireballObject.SPRITE[FireballObject.SPRITE_LIST[_0x1bec55].NAME] = FireballObject.SPRITE_LIST[_0x1bec55],
    FireballObject.SPRITE[FireballObject.SPRITE_LIST[_0x1bec55].ID] = FireballObject.SPRITE_LIST[_0x1bec55];
FireballObject.STATE = {};
FireballObject.STATE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    SPRITE: [FireballObject.SPRITE.IDLE0, FireballObject.SPRITE.IDLE1, FireballObject.SPRITE.IDLE2, FireballObject.SPRITE.IDLE3]
}, {
    NAME: "DEAD",
    ID: 80,
    SPRITE: [FireballObject.SPRITE.DEAD0, FireballObject.SPRITE.DEAD1, FireballObject.SPRITE.DEAD2]
}];
for (_0x1bec55 = 0; _0x1bec55 < FireballObject.STATE_LIST.length; _0x1bec55++)
    FireballObject.STATE[FireballObject.STATE_LIST[_0x1bec55].NAME] = FireballObject.STATE_LIST[_0x1bec55],
    FireballObject.STATE[FireballObject.STATE_LIST[_0x1bec55].ID] = FireballObject.STATE_LIST[_0x1bec55];
FireballObject.prototype.update = function(e) {}
;
FireballObject.prototype.step = function() {
    this.state === FireballObject.STATE.DEAD ? this.deadTimer < FireballObject.DEAD_ANIM_LENGTH ? this.sprite = this.state.SPRITE[this.deadTimer++] : this.destroy() : (this.anim++,
    this.sprite = this.state.SPRITE[parseInt(this.anim / FireballObject.ANIMATION_RATE) % this.state.SPRITE.length],
    this.control(),
    this.physics(),
    this.interaction(),
    this.sound(),
    0 > this.pos.y && this.kill())
}
;
FireballObject.prototype.control = function() {}
;
FireballObject.prototype.physics = function() {
    var e = this.dir ? FireballObject.SPEED : -FireballObject.SPEED;
    this.fallSpeed = Math.max(this.fallSpeed - FireballObject.FALL_SPEED_ACCEL, -FireballObject.FALL_SPEED_MAX);
    for (var t = vec2.add(this.pos, vec2.make(e, this.fallSpeed)), i = vec2.make(this.pos.x + Math.min(0, e), this.pos.y + Math.min(0, this.fallSpeed)), e = vec2.make(this.dim.x + Math.max(0, e), this.dim.y + Math.max(0, this.fallSpeed)), s = this.game.world.getZone(this.level, this.zone).getTiles(i, e), i = vec2.make(1, 1), e = [], o = 0; o < s.length; o++) {
        var a = s[o];
        a.definition.COLLIDE && (squar.intersection(a.pos, i, t, this.dim) || squar.intersection(a.pos, i, this.pos, this.dim)) && e.push(a)
    }
    s = vec2.make(t.x, this.pos.y);
    for (o = 0; o < e.length; o++)
        a = e[o],
        squar.intersection(a.pos, i, s, this.dim) && (s.x = s.x + .5 * this.dim.x < a.pos.x + .5 * i.x ? a.pos.x - this.dim.x : a.pos.x + i.x,
        this.kill());
    t.x = s.x;
    for (o = 0; o < e.length; o++)
        a = e[o],
        squar.intersection(a.pos, i, t, this.dim) && (this.pos.y >= t.y ? (t.y = a.pos.y + i.y,
        this.fallSpeed = FireballObject.BOUNCE_SPEED) : (t.y = a.pos.y - this.dim.y,
        this.fallSpeed = -FireballObject.BOUNCE_SPEED));
    this.pos = t
}
;
FireballObject.prototype.interaction = function() {
    for (var e = 0; e < this.game.objects.length; e++) {
        var t = this.game.objects[e];
        if (t !== this && t.pid !== this.owner && t.isTangible() && (!(t instanceof PlayerObject) || app.net.gameMode === 1) && t.damage && t.level === this.level && t.zone === this.zone && squar.intersection(t.pos, t.dim, this.pos, this.dim)) {
            (app.net.gameMode !== 1 ? this.owner === this.game.pid : t instanceof PlayerObject ? t.pid == this.game.pid : this.owner === this.game.pid) && t.damage(this);
            if (app.net.gameMode === 1 && t instanceof PlayerObject && t.pid == this.game.pid && t.dead)
                this.game.out.push(NET017.encode(this.owner));
            this.kill();
            break
        }
    }
}
;
FireballObject.prototype.sound = GameObject.prototype.sound;
FireballObject.prototype.playerCollide = function(e) {}
;
FireballObject.prototype.playerStomp = function(e) {}
;
FireballObject.prototype.playerBump = function(e) {}
;
FireballObject.prototype.kill = function() {
    this.setState(FireballObject.STATE.DEAD);
    this.play("firework.mp3", .7, .04);
    this.dead = true
}
;
FireballObject.prototype.isTangible = GameObject.prototype.isTangible;
FireballObject.prototype.destroy = GameObject.prototype.destroy;
FireballObject.prototype.setState = function(e) {
    e !== this.state && (this.state = e,
    this.sprite = e.SPRITE[0],
    this.anim = 0)
}
;
FireballObject.prototype.draw = function(e) {
    e.push({
        pos: vec2.add(this.pos, FireballObject.SOFFSET),
        reverse: false,
        index: this.sprite.INDEX,
        skin: this.skin,
        mode: 0
    })
}
;
FireballObject.prototype.play = GameObject.prototype.play;
GameObject.REGISTER_OBJECT(FireballObject);
"use strict";
function FireBreathObject(e, t, i, s) {
    GameObject.call(this, e, t, i, s);
    this.state = FireBreathObject.STATE.IDLE;
    this.sprite = this.state.SPRITE[0];
    this.anim = 0;
    this.life = FireBreathObject.LIFE_MAX;
    this.deadTimer = 0;
    this.dim = vec2.make(1, .5)
}
FireBreathObject.ASYNC = true;
FireBreathObject.ID = 162;
FireBreathObject.NAME = "FIRE BREATH PROJECTILE";
FireBreathObject.ANIMATION_RATE = 2;
FireBreathObject.SOFFSET = vec2.make(-.5, -.25);
FireBreathObject.LIFE_MAX = 175;
FireBreathObject.DEAD_ANIM_LENGTH = 3;
FireBreathObject.SPEED = .175;
FireBreathObject.SPRITE = {};
FireBreathObject.SPRITE_LIST = [{
    NAME: "IDLE0",
    ID: 0,
    INDEX: [[215, 216]]
}, {
    NAME: "IDLE1",
    ID: 1,
    INDEX: [[217, 218]]
}, {
    NAME: "DEAD0",
    ID: 4,
    INDEX: 212
}, {
    NAME: "DEAD1",
    ID: 5,
    INDEX: 213
}, {
    NAME: "DEAD2",
    ID: 6,
    INDEX: 214
}];
for (_0x1bec55 = 0; _0x1bec55 < FireBreathObject.SPRITE_LIST.length; _0x1bec55++)
    FireBreathObject.SPRITE[FireBreathObject.SPRITE_LIST[_0x1bec55].NAME] = FireBreathObject.SPRITE_LIST[_0x1bec55],
    FireBreathObject.SPRITE[FireBreathObject.SPRITE_LIST[_0x1bec55].ID] = FireBreathObject.SPRITE_LIST[_0x1bec55];
FireBreathObject.STATE = {};
FireBreathObject.STATE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    SPRITE: [FireBreathObject.SPRITE.IDLE0, FireBreathObject.SPRITE.IDLE1]
}, {
    NAME: "DEAD",
    ID: 80,
    SPRITE: [FireBreathObject.SPRITE.DEAD0, FireBreathObject.SPRITE.DEAD1, FireBreathObject.SPRITE.DEAD2]
}];
for (_0x1bec55 = 0; _0x1bec55 < FireBreathObject.STATE_LIST.length; _0x1bec55++)
    FireBreathObject.STATE[FireBreathObject.STATE_LIST[_0x1bec55].NAME] = FireBreathObject.STATE_LIST[_0x1bec55],
    FireBreathObject.STATE[FireBreathObject.STATE_LIST[_0x1bec55].ID] = FireBreathObject.STATE_LIST[_0x1bec55];
FireBreathObject.prototype.update = function(e) {}
;
FireBreathObject.prototype.step = function() {
    this.state === FireBreathObject.STATE.DEAD ? this.deadTimer < FireBreathObject.DEAD_ANIM_LENGTH ? this.sprite = this.state.SPRITE[this.deadTimer++] : this.destroy() : (this.anim++,
    this.sprite = this.state.SPRITE[parseInt(this.anim / FireBreathObject.ANIMATION_RATE) % this.state.SPRITE.length],
    this.control(),
    this.physics(),
    this.interaction(),
    1 > this.life-- && this.kill())
}
;
FireBreathObject.prototype.control = function() {}
;
FireBreathObject.prototype.physics = function() {
    this.pos = vec2.add(this.pos, vec2.make(-FireBreathObject.SPEED, 0))
}
;
FireBreathObject.prototype.interaction = function() {
    for (var e = 0; e < this.game.objects.length; e++) {
        var t = this.game.objects[e];
        if (t instanceof PlayerObject && t.isTangible() && t.level === this.level && t.zone === this.zone && squar.intersection(t.pos, t.dim, this.pos, this.dim)) {
            t.pid === this.game.pid && t.damage(this);
            this.kill();
            break
        }
    }
}
;
FireBreathObject.prototype.playerCollide = function(e) {}
;
FireBreathObject.prototype.playerStomp = function(e) {}
;
FireBreathObject.prototype.playerBump = function(e) {}
;
FireBreathObject.prototype.kill = function() {
    this.dead = true;
    this.setState(FireBreathObject.STATE.DEAD)
}
;
FireBreathObject.prototype.isTangible = GameObject.prototype.isTangible;
FireBreathObject.prototype.destroy = GameObject.prototype.destroy;
FireBreathObject.prototype.setState = function(e) {
    e !== this.state && (this.state = e,
    this.sprite = e.SPRITE[0],
    this.anim = 0)
}
;
FireBreathObject.prototype.draw = function(e) {
    if (this.sprite.INDEX instanceof Array)
        for (var t = this.sprite.INDEX, i = 0; i < t.length; i++)
            for (var s = 0; s < t[i].length; s++)
                e.push({
                    pos: vec2.add(vec2.add(this.pos, FireBreathObject.SOFFSET), vec2.make(s, i)),
                    reverse: false,
                    index: t[i][s]
                });
    else
        e.push({
            pos: vec2.add(this.pos, FireBreathObject.SOFFSET),
            reverse: false,
            index: this.sprite.INDEX,
            mode: 0
        })
}
;
GameObject.REGISTER_OBJECT(FireBreathObject);
"use strict";
function HammerObject(e, t, i, s, o, a) {
    GameObject.call(this, e, t, i, s);
    this.owner = o;
    this.setState(HammerObject.STATE.IDLE);
    this.anim = 0;
    this.throwTimer = a === undefined ? HammerObject.THROW_DELAY : a;
    this.dir = false;
    this.dim = vec2.make(.5, .5)
}
HammerObject.ASYNC = true;
HammerObject.ID = 163;
HammerObject.NAME = "HAMMER PROJECTILE";
HammerObject.ANIMATION_RATE = 2;
HammerObject.SOFFSET = vec2.make(-.25, -.25);
HammerObject.THROW_DELAY = 13;
HammerObject.IMPULSE = vec2.make(.48, .915);
HammerObject.DRAG = .965;
HammerObject.FALL_SPEED_MAX = .65;
HammerObject.FALL_SPEED_ACCEL = .095;
HammerObject.SPRITE = {};
HammerObject.SPRITE_LIST = [{
    NAME: "IDLE0",
    ID: 0,
    INDEX: 221
}, {
    NAME: "IDLE1",
    ID: 1,
    INDEX: 220
}, {
    NAME: "IDLE2",
    ID: 2,
    INDEX: 223
}, {
    NAME: "IDLE3",
    ID: 3,
    INDEX: 222
}];
for (_0x1bec55 = 0; _0x1bec55 < HammerObject.SPRITE_LIST.length; _0x1bec55++)
    HammerObject.SPRITE[HammerObject.SPRITE_LIST[_0x1bec55].NAME] = HammerObject.SPRITE_LIST[_0x1bec55],
    HammerObject.SPRITE[HammerObject.SPRITE_LIST[_0x1bec55].ID] = HammerObject.SPRITE_LIST[_0x1bec55];
HammerObject.STATE = {};
HammerObject.STATE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    SPRITE: [HammerObject.SPRITE.IDLE0]
}, {
    NAME: "THROW",
    ID: 1,
    SPRITE: [HammerObject.SPRITE.IDLE0, HammerObject.SPRITE.IDLE1, HammerObject.SPRITE.IDLE2, HammerObject.SPRITE.IDLE3]
}];
for (_0x1bec55 = 0; _0x1bec55 < HammerObject.STATE_LIST.length; _0x1bec55++)
    HammerObject.STATE[HammerObject.STATE_LIST[_0x1bec55].NAME] = HammerObject.STATE_LIST[_0x1bec55],
    HammerObject.STATE[HammerObject.STATE_LIST[_0x1bec55].ID] = HammerObject.STATE_LIST[_0x1bec55];
HammerObject.prototype.update = function(e) {}
;
HammerObject.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / HammerObject.ANIMATION_RATE) % this.state.SPRITE.length];
    0 < this.throwTimer ? this.throwTimer-- : (this.state === HammerObject.STATE.IDLE && this.throw(),
    this.physics(),
    this.interaction(),
    0 > this.pos.y && this.destroy())
}
;
HammerObject.prototype.physics = function() {
    this.moveSpeed *= HammerObject.DRAG;
    this.fallSpeed = Math.max(this.fallSpeed - HammerObject.FALL_SPEED_ACCEL, -HammerObject.FALL_SPEED_MAX);
    this.pos = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed))
}
;
HammerObject.prototype.interaction = function() {
    if (this.state === HammerObject.STATE.THROW) {
        var e = this.game.getPlayer();
        e && e.isTangible() && e.level === this.level && e.zone === this.zone && squar.intersection(e.pos, e.dim, this.pos, this.dim) && e.damage(this)
    }
}
;
HammerObject.prototype.throw = function() {
    this.moveSpeed = this.dir ? HammerObject.IMPULSE.x : -HammerObject.IMPULSE.x;
    this.fallSpeed = HammerObject.IMPULSE.y;
    this.setState(HammerObject.STATE.THROW)
}
;
HammerObject.prototype.playerCollide = function(e) {}
;
HammerObject.prototype.playerStomp = function(e) {}
;
HammerObject.prototype.playerBump = function(e) {}
;
HammerObject.prototype.kill = function() {}
;
HammerObject.prototype.destroy = GameObject.prototype.destroy;
HammerObject.prototype.isTangible = GameObject.prototype.isTangible;
HammerObject.prototype.setState = function(e) {
    e !== this.state && (this.state = e,
    this.sprite = e.SPRITE[0],
    this.anim = 0)
}
;
HammerObject.prototype.draw = function(e) {
    if (this.sprite.INDEX instanceof Array)
        for (var t = this.sprite.INDEX, i = 0; i < t.length; i++)
            for (var s = 0; s < t[i].length; s++)
                e.push({
                    pos: vec2.add(vec2.add(this.pos, HammerObject.SOFFSET), vec2.make(s, i)),
                    reverse: false,
                    index: t[i][s]
                });
    else
        e.push({
            pos: vec2.add(this.pos, HammerObject.SOFFSET),
            reverse: this.dir,
            index: this.sprite.INDEX,
            mode: 0
        })
}
;
GameObject.REGISTER_OBJECT(HammerObject);
"use strict";
function PowerUpObject(e, t, i, s, o) {
    GameObject.call(this, e, t, i, s);
    this.oid = o;
    this.anim = 0;
    this.dim = vec2.make(1, 1);
    this.fallSpeed = this.moveSpeed = 0;
    this.rise = this.grounded = false;
    var a = vec2.make(1, 1);
    var r = this.game.world.getZone(this.level, this.zone).getTiles(this.pos, this.dim);
    for (var n = 0; n < r.length; n++)
        if (squar.intersection(r[n].pos, a, this.pos, this.dim)) {
            this.rise = true;
            break
        }
    this.dir = false;
    this.jump = -1
}
PowerUpObject.ASYNC = true;
PowerUpObject.ID = 80;
PowerUpObject.ANIMATION_RATE = 3;
PowerUpObject.MOVE_SPEED_MAX = .075;
PowerUpObject.FALL_SPEED_MAX = .45;
PowerUpObject.FALL_SPEED_ACCEL = .075;
PowerUpObject.JUMP_DECEL = .015;
PowerUpObject.JUMP_LENGTH = 3;
PowerUpObject.RISE_RATE = .15;
PowerUpObject.prototype.update = function(e) {
    switch (e) {
    case 0:
        this.kill()
    }
}
;
PowerUpObject.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / PowerUpObject.ANIMATION_RATE) % this.state.SPRITE.length];
    this.control();
    this.physics();
    0 > this.pos.y && this.kill()
}
;
PowerUpObject.prototype.control = function() {
    this.jump >= PowerUpObject.JUMP_LENGTH && (this.jump = -1)
}
;
PowerUpObject.prototype.physics = function() {
    if (this.rise) {
        this.rise = false;
        for (var e = vec2.make(1, 1), t = this.game.world.getZone(this.level, this.zone).getTiles(this.pos, this.dim), i = 0; i < t.length; i++) {
            var s = t[i];
            if (s.definition.COLLIDE && squar.intersection(s.pos, e, this.pos, this.dim)) {
                this.rise = true;
                break
            }
        }
        this.rise && (this.pos.y += PowerUpObject.RISE_RATE)
    } else {
        -1 !== this.jump ? (this.fallSpeed = PowerUpObject.FALL_SPEED_MAX - this.jump * PowerUpObject.JUMP_DECEL,
        this.jump++) : (this.grounded && (this.fallSpeed = 0),
        this.fallSpeed = Math.max(this.fallSpeed - PowerUpObject.FALL_SPEED_ACCEL, -PowerUpObject.FALL_SPEED_MAX));
        var o = vec2.add(this.pos, vec2.make(this.moveSpeed, 0))
          , a = vec2.add(this.pos, vec2.make(this.moveSpeed, this.fallSpeed))
          , e = vec2.make(0 <= this.moveSpeed ? this.pos.x : this.pos.x + this.moveSpeed, 0 >= this.fallSpeed ? this.pos.y : this.pos.y + this.fallSpeed)
          , t = vec2.make(this.dim.y + Math.abs(this.moveSpeed), this.dim.y + Math.abs(this.fallSpeed))
          , t = this.game.world.getZone(this.level, this.zone).getTiles(e, t)
          , e = vec2.make(1, 1)
          , r = false;
        this.grounded = false;
        for (i = 0; i < t.length; i++)
            s = t[i],
            s.definition.COLLIDE && squar.intersection(s.pos, e, o, this.dim) && (this.pos.x <= o.x && o.x + this.dim.x > s.pos.x ? (o.x = s.pos.x - this.dim.x,
            a.x = o.x,
            this.moveSpeed = 0,
            r = true) : this.pos.x >= o.x && o.x < s.pos.x + e.x && (o.x = s.pos.x + e.x,
            a.x = o.x,
            this.moveSpeed = 0,
            r = true));
        for (i = 0; i < t.length; i++)
            s = t[i],
            s.definition.COLLIDE && squar.intersection(s.pos, e, a, this.dim) && (this.pos.y >= a.y && a.y < s.pos.y + e.y ? (a.y = s.pos.y + e.y,
            this.grounded = true) : this.pos.y <= a.y && a.y + this.dim.y > s.pos.y && (a.y = s.pos.y - this.dim.y,
            this.jumping = -1,
            this.fallSpeed = 0));
        this.pos = vec2.make(o.x, a.y);
        r && (this.dir = !this.dir)
    }
}
;
PowerUpObject.prototype.bounce = function() {
    this.grounded && (this.dir = !this.dir);
    this.jump = 0
}
;
PowerUpObject.prototype.playerCollide = function(e) {
    this.dead || this.garbage || (e.powerup(this),
    this.kill(),
    this.game.out.push(NET020.encode(this.level, this.zone, this.oid, 0)))
}
;
PowerUpObject.prototype.playerStomp = function(e) {
    this.playerCollide(e)
}
;
PowerUpObject.prototype.playerBump = function(e) {
    this.playerCollide(e)
}
;
PowerUpObject.prototype.kill = function() {
    this.dead = true;
    this.destroy()
}
;
PowerUpObject.prototype.destroy = GameObject.prototype.destroy;
PowerUpObject.prototype.isTangible = GameObject.prototype.isTangible;
PowerUpObject.prototype.setState = function(e) {
    e !== this.state && (this.state = e,
    this.sprite = e.SPRITE[0],
    this.anim = 0)
}
;
PowerUpObject.prototype.draw = function(e) {
    e.push({
        pos: this.pos,
        reverse: this.reverse,
        index: this.sprite.INDEX,
        mode: 0
    })
}
;
"use strict";
function MushroomObject(e, t, i, s, o) {
    PowerUpObject.call(this, e, t, i, s, o);
    this.state = MushroomObject.STATE.IDLE;
    this.sprite = this.state.SPRITE[0]
}
MushroomObject.ASYNC = false;
MushroomObject.ID = 81;
MushroomObject.NAME = "MUSHROOM";
MushroomObject.SPRITE = {};
MushroomObject.SPRITE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    INDEX: 233
}];
for (_0x1bec55 = 0; _0x1bec55 < MushroomObject.SPRITE_LIST.length; _0x1bec55++)
    MushroomObject.SPRITE[MushroomObject.SPRITE_LIST[_0x1bec55].NAME] = MushroomObject.SPRITE_LIST[_0x1bec55],
    MushroomObject.SPRITE[MushroomObject.SPRITE_LIST[_0x1bec55].ID] = MushroomObject.SPRITE_LIST[_0x1bec55];
MushroomObject.STATE = {};
MushroomObject.STATE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    SPRITE: [MushroomObject.SPRITE.IDLE]
}];
for (_0x1bec55 = 0; _0x1bec55 < MushroomObject.STATE_LIST.length; _0x1bec55++)
    MushroomObject.STATE[MushroomObject.STATE_LIST[_0x1bec55].NAME] = MushroomObject.STATE_LIST[_0x1bec55],
    MushroomObject.STATE[MushroomObject.STATE_LIST[_0x1bec55].ID] = MushroomObject.STATE_LIST[_0x1bec55];
MushroomObject.prototype.update = PowerUpObject.prototype.update;
MushroomObject.prototype.step = PowerUpObject.prototype.step;
MushroomObject.prototype.control = function() {
    PowerUpObject.prototype.control.call(this);
    this.moveSpeed = this.dir ? -PowerUpObject.MOVE_SPEED_MAX : PowerUpObject.MOVE_SPEED_MAX
}
;
MushroomObject.prototype.physics = PowerUpObject.prototype.physics;
MushroomObject.prototype.bounce = PowerUpObject.prototype.bounce;
MushroomObject.prototype.playerCollide = PowerUpObject.prototype.playerCollide;
MushroomObject.prototype.playerStomp = PowerUpObject.prototype.playerStomp;
MushroomObject.prototype.playerBump = PowerUpObject.prototype.playerBump;
MushroomObject.prototype.kill = PowerUpObject.prototype.kill;
MushroomObject.prototype.destroy = GameObject.prototype.destroy;
MushroomObject.prototype.isTangible = GameObject.prototype.isTangible;
MushroomObject.prototype.setState = PowerUpObject.prototype.setState;
MushroomObject.prototype.draw = PowerUpObject.prototype.draw;
GameObject.REGISTER_OBJECT(MushroomObject);
"use strict";
function FlowerObject(e, t, i, s, o) {
    PowerUpObject.call(this, e, t, i, s, o);
    this.state = FlowerObject.STATE.IDLE;
    this.sprite = this.state.SPRITE[0]
}
FlowerObject.ASYNC = false;
FlowerObject.ID = 82;
FlowerObject.NAME = "FIRE FLOWER";
FlowerObject.SPRITE = {};
FlowerObject.SPRITE_LIST = [{
    NAME: "IDLE0",
    ID: 0,
    INDEX: 228
}, {
    NAME: "IDLE1",
    ID: 1,
    INDEX: 229
}, {
    NAME: "IDLE2",
    ID: 2,
    INDEX: 230
}, {
    NAME: "IDLE3",
    ID: 3,
    INDEX: 231
}];
for (_0x1bec55 = 0; _0x1bec55 < FlowerObject.SPRITE_LIST.length; _0x1bec55++)
    FlowerObject.SPRITE[FlowerObject.SPRITE_LIST[_0x1bec55].NAME] = FlowerObject.SPRITE_LIST[_0x1bec55],
    FlowerObject.SPRITE[FlowerObject.SPRITE_LIST[_0x1bec55].ID] = FlowerObject.SPRITE_LIST[_0x1bec55];
FlowerObject.STATE = {};
FlowerObject.STATE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    SPRITE: [FlowerObject.SPRITE.IDLE0, FlowerObject.SPRITE.IDLE1, FlowerObject.SPRITE.IDLE2, FlowerObject.SPRITE.IDLE3]
}];
for (_0x1bec55 = 0; _0x1bec55 < FlowerObject.STATE_LIST.length; _0x1bec55++)
    FlowerObject.STATE[FlowerObject.STATE_LIST[_0x1bec55].NAME] = FlowerObject.STATE_LIST[_0x1bec55],
    FlowerObject.STATE[FlowerObject.STATE_LIST[_0x1bec55].ID] = FlowerObject.STATE_LIST[_0x1bec55];
FlowerObject.prototype.update = PowerUpObject.prototype.update;
FlowerObject.prototype.step = PowerUpObject.prototype.step;
FlowerObject.prototype.control = function() {}
;
FlowerObject.prototype.physics = PowerUpObject.prototype.physics;
FlowerObject.prototype.playerCollide = PowerUpObject.prototype.playerCollide;
FlowerObject.prototype.playerStomp = PowerUpObject.prototype.playerStomp;
FlowerObject.prototype.playerBump = PowerUpObject.prototype.playerBump;
FlowerObject.prototype.kill = PowerUpObject.prototype.kill;
FlowerObject.prototype.destroy = GameObject.prototype.destroy;
FlowerObject.prototype.isTangible = GameObject.prototype.isTangible;
FlowerObject.prototype.setState = PowerUpObject.prototype.setState;
FlowerObject.prototype.draw = PowerUpObject.prototype.draw;
GameObject.REGISTER_OBJECT(FlowerObject);
"use strict";
function GoldFlowerObject(e, t, i, s, o) {
    PowerUpObject.call(this, e, t, i, s, o);
    this.state = GoldFlowerObject.STATE.IDLE;
    this.sprite = this.state.SPRITE[0]
}
GoldFlowerObject.ASYNC = false;
GoldFlowerObject.ID = 100;
GoldFlowerObject.NAME = "GOLD FLOWER";
GoldFlowerObject.SPRITE = {};
GoldFlowerObject.SPRITE_LIST = [{
    NAME: "IDLE0",
    ID: 0,
    INDEX: 184
}, {
    NAME: "IDLE1",
    ID: 1,
    INDEX: 185
}, {
    NAME: "IDLE2",
    ID: 2,
    INDEX: 186
}, {
    NAME: "IDLE3",
    ID: 3,
    INDEX: 187
}];
for (_0x1bec55 = 0; _0x1bec55 < GoldFlowerObject.SPRITE_LIST.length; _0x1bec55++)
    GoldFlowerObject.SPRITE[GoldFlowerObject.SPRITE_LIST[_0x1bec55].NAME] = GoldFlowerObject.SPRITE_LIST[_0x1bec55],
    GoldFlowerObject.SPRITE[GoldFlowerObject.SPRITE_LIST[_0x1bec55].ID] = GoldFlowerObject.SPRITE_LIST[_0x1bec55];
GoldFlowerObject.STATE = {};
GoldFlowerObject.STATE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    SPRITE: [GoldFlowerObject.SPRITE.IDLE0, GoldFlowerObject.SPRITE.IDLE1, GoldFlowerObject.SPRITE.IDLE2, GoldFlowerObject.SPRITE.IDLE3]
}];
for (_0x1bec55 = 0; _0x1bec55 < GoldFlowerObject.STATE_LIST.length; _0x1bec55++)
    GoldFlowerObject.STATE[GoldFlowerObject.STATE_LIST[_0x1bec55].NAME] = GoldFlowerObject.STATE_LIST[_0x1bec55],
    GoldFlowerObject.STATE[GoldFlowerObject.STATE_LIST[_0x1bec55].ID] = GoldFlowerObject.STATE_LIST[_0x1bec55];
GoldFlowerObject.prototype.update = PowerUpObject.prototype.update;
GoldFlowerObject.prototype.step = PowerUpObject.prototype.step;
GoldFlowerObject.prototype.control = function() {}
;
GoldFlowerObject.prototype.physics = PowerUpObject.prototype.physics;
GoldFlowerObject.prototype.playerCollide = function(e) {
    if (!(this.dead || this.garbage)) {
        e.powerupVisual(this);
        this.kill();
        this.game.out.push(NET020.encode(this.level, this.zone, this.oid, 0))
    }
}
;
GoldFlowerObject.prototype.playerStomp = PowerUpObject.prototype.playerStomp;
GoldFlowerObject.prototype.playerBump = PowerUpObject.prototype.playerBump;
GoldFlowerObject.prototype.kill = PowerUpObject.prototype.kill;
GoldFlowerObject.prototype.destroy = GameObject.prototype.destroy;
GoldFlowerObject.prototype.isTangible = GameObject.prototype.isTangible;
GoldFlowerObject.prototype.setState = PowerUpObject.prototype.setState;
GoldFlowerObject.prototype.draw = PowerUpObject.prototype.draw;
GameObject.REGISTER_OBJECT(GoldFlowerObject);
"use strict";
function StarObject(e, t, i, s, o) {
    PowerUpObject.call(this, e, t, i, s, o);
    this.state = StarObject.STATE.IDLE;
    this.sprite = this.state.SPRITE[0];
    this.groundTimer = 0
}
StarObject.ASYNC = false;
StarObject.ID = 84;
StarObject.NAME = "STAR";
StarObject.JUMP_LENGTH = 6;
StarObject.MOVE_SPEED_MAX = .125;
StarObject.JUMP_DELAY = 2;
StarObject.SPRITE = {};
StarObject.SPRITE_LIST = [{
    NAME: "IDLE0",
    ID: 0,
    INDEX: 224
}, {
    NAME: "IDLE1",
    ID: 1,
    INDEX: 225
}, {
    NAME: "IDLE2",
    ID: 2,
    INDEX: 226
}, {
    NAME: "IDLE3",
    ID: 3,
    INDEX: 227
}];
for (_0x1bec55 = 0; _0x1bec55 < StarObject.SPRITE_LIST.length; _0x1bec55++)
    StarObject.SPRITE[StarObject.SPRITE_LIST[_0x1bec55].NAME] = StarObject.SPRITE_LIST[_0x1bec55],
    StarObject.SPRITE[StarObject.SPRITE_LIST[_0x1bec55].ID] = StarObject.SPRITE_LIST[_0x1bec55];
StarObject.STATE = {};
StarObject.STATE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    SPRITE: [StarObject.SPRITE.IDLE0, StarObject.SPRITE.IDLE1, StarObject.SPRITE.IDLE2, StarObject.SPRITE.IDLE3]
}];
for (_0x1bec55 = 0; _0x1bec55 < StarObject.STATE_LIST.length; _0x1bec55++)
    StarObject.STATE[StarObject.STATE_LIST[_0x1bec55].NAME] = StarObject.STATE_LIST[_0x1bec55],
    StarObject.STATE[StarObject.STATE_LIST[_0x1bec55].ID] = StarObject.STATE_LIST[_0x1bec55];
StarObject.prototype.update = PowerUpObject.prototype.update;
StarObject.prototype.step = PowerUpObject.prototype.step;
StarObject.prototype.control = function() {
    this.moveSpeed = this.dir ? -StarObject.MOVE_SPEED_MAX : StarObject.MOVE_SPEED_MAX;
    this.grounded && ++this.groundTimer >= StarObject.JUMP_DELAY ? this.jump = 0 : this.jump > StarObject.JUMP_LENGTH && (this.jump = -1,
    this.groundTimer = 0)
}
;
StarObject.prototype.physics = PowerUpObject.prototype.physics;
StarObject.prototype.bounce = PowerUpObject.prototype.bounce;
StarObject.prototype.playerCollide = PowerUpObject.prototype.playerCollide;
StarObject.prototype.playerStomp = PowerUpObject.prototype.playerStomp;
StarObject.prototype.playerBump = PowerUpObject.prototype.playerBump;
StarObject.prototype.kill = PowerUpObject.prototype.kill;
StarObject.prototype.destroy = GameObject.prototype.destroy;
StarObject.prototype.isTangible = GameObject.prototype.isTangible;
StarObject.prototype.setState = PowerUpObject.prototype.setState;
StarObject.prototype.draw = PowerUpObject.prototype.draw;
GameObject.REGISTER_OBJECT(StarObject);
"use strict";
function LifeObject(e, t, i, s, o) {
    PowerUpObject.call(this, e, t, i, s, o);
    this.state = LifeObject.STATE.IDLE;
    this.sprite = this.state.SPRITE[0]
}
LifeObject.ASYNC = false;
LifeObject.ID = 83;
LifeObject.NAME = "ONEUP";
LifeObject.SPRITE = {};
LifeObject.SPRITE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    INDEX: 232
}];
for (_0x1bec55 = 0; _0x1bec55 < LifeObject.SPRITE_LIST.length; _0x1bec55++)
    LifeObject.SPRITE[LifeObject.SPRITE_LIST[_0x1bec55].NAME] = LifeObject.SPRITE_LIST[_0x1bec55],
    LifeObject.SPRITE[LifeObject.SPRITE_LIST[_0x1bec55].ID] = LifeObject.SPRITE_LIST[_0x1bec55];
LifeObject.STATE = {};
LifeObject.STATE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    SPRITE: [LifeObject.SPRITE.IDLE]
}];
for (_0x1bec55 = 0; _0x1bec55 < LifeObject.STATE_LIST.length; _0x1bec55++)
    LifeObject.STATE[LifeObject.STATE_LIST[_0x1bec55].NAME] = LifeObject.STATE_LIST[_0x1bec55],
    LifeObject.STATE[LifeObject.STATE_LIST[_0x1bec55].ID] = LifeObject.STATE_LIST[_0x1bec55];
LifeObject.prototype.update = PowerUpObject.prototype.update;
LifeObject.prototype.step = PowerUpObject.prototype.step;
LifeObject.prototype.control = function() {
    PowerUpObject.prototype.control.call(this);
    this.moveSpeed = this.dir ? -PowerUpObject.MOVE_SPEED_MAX : PowerUpObject.MOVE_SPEED_MAX
}
;
LifeObject.prototype.physics = PowerUpObject.prototype.physics;
LifeObject.prototype.bounce = PowerUpObject.prototype.bounce;
LifeObject.prototype.playerCollide = PowerUpObject.prototype.playerCollide;
LifeObject.prototype.playerStomp = PowerUpObject.prototype.playerStomp;
LifeObject.prototype.playerBump = PowerUpObject.prototype.playerBump;
LifeObject.prototype.kill = PowerUpObject.prototype.kill;
LifeObject.prototype.destroy = GameObject.prototype.destroy;
LifeObject.prototype.isTangible = GameObject.prototype.isTangible;
LifeObject.prototype.setState = PowerUpObject.prototype.setState;
LifeObject.prototype.draw = PowerUpObject.prototype.draw;
GameObject.REGISTER_OBJECT(LifeObject);
"use strict";
function AxeObject(e, t, i, s, o) {
    PowerUpObject.call(this, e, t, i, s, o);
    this.state = AxeObject.STATE.IDLE;
    this.sprite = this.state.SPRITE[0];
    this.used = false;
    this.dim = vec2.make(1, 3)
}
AxeObject.ASYNC = true;
AxeObject.ID = 85;
AxeObject.NAME = "AXE";
AxeObject.SPRITE = {};
AxeObject.SPRITE_LIST = [{
    NAME: "IDLE0",
    ID: 0,
    INDEX: 236
}, {
    NAME: "IDLE1",
    ID: 1,
    INDEX: 237
}, {
    NAME: "IDLE2",
    ID: 2,
    INDEX: 238
}, {
    NAME: "IDLE3",
    ID: 3,
    INDEX: 239
}];
for (_0x1bec55 = 0; _0x1bec55 < AxeObject.SPRITE_LIST.length; _0x1bec55++)
    AxeObject.SPRITE[AxeObject.SPRITE_LIST[_0x1bec55].NAME] = AxeObject.SPRITE_LIST[_0x1bec55],
    AxeObject.SPRITE[AxeObject.SPRITE_LIST[_0x1bec55].ID] = AxeObject.SPRITE_LIST[_0x1bec55];
AxeObject.STATE = {};
AxeObject.STATE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    SPRITE: [AxeObject.SPRITE.IDLE0, AxeObject.SPRITE.IDLE1, AxeObject.SPRITE.IDLE2, AxeObject.SPRITE.IDLE3]
}];
for (_0x1bec55 = 0; _0x1bec55 < AxeObject.STATE_LIST.length; _0x1bec55++)
    AxeObject.STATE[AxeObject.STATE_LIST[_0x1bec55].NAME] = AxeObject.STATE_LIST[_0x1bec55],
    AxeObject.STATE[AxeObject.STATE_LIST[_0x1bec55].ID] = AxeObject.STATE_LIST[_0x1bec55];
AxeObject.prototype.update = function(e) {}
;
AxeObject.prototype.step = PowerUpObject.prototype.step;
AxeObject.prototype.control = function() {}
;
AxeObject.prototype.physics = PowerUpObject.prototype.physics;
AxeObject.prototype.playerCollide = function(e) {
    if (!(this.dead || this.garbage || this.used))
        for (e.powerup(this),
        this.used = true,
        e = 0; e < this.game.objects.length; e++) {
            var t = this.game.objects[e];
            if (t instanceof BowserObject && t.level === this.level && t.zone === t.zone && !t.dead) {
                t.bonk();
                break
            }
        }
}
;
AxeObject.prototype.playerStomp = PowerUpObject.prototype.playerStomp;
AxeObject.prototype.playerBump = PowerUpObject.prototype.playerBump;
AxeObject.prototype.kill = PowerUpObject.prototype.kill;
AxeObject.prototype.isTangible = GameObject.prototype.isTangible;
AxeObject.prototype.destroy = GameObject.prototype.destroy;
AxeObject.prototype.setState = PowerUpObject.prototype.setState;
AxeObject.prototype.draw = PowerUpObject.prototype.draw;
GameObject.REGISTER_OBJECT(AxeObject);
"use strict";
function PoisonMushroomObject(e, t, i, s, o) {
    PowerUpObject.call(this, e, t, i, s, o);
    this.state = PoisonMushroomObject.STATE.IDLE;
    this.sprite = this.state.SPRITE[0]
}
PoisonMushroomObject.ASYNC = false;
PoisonMushroomObject.ID = 86;
PoisonMushroomObject.NAME = "POISON MUSHROOM";
PoisonMushroomObject.SPRITE = {};
PoisonMushroomObject.SPRITE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    INDEX: 234
}];
for (_0x1bec55 = 0; _0x1bec55 < PoisonMushroomObject.SPRITE_LIST.length; _0x1bec55++)
    PoisonMushroomObject.SPRITE[PoisonMushroomObject.SPRITE_LIST[_0x1bec55].NAME] = PoisonMushroomObject.SPRITE_LIST[_0x1bec55],
    PoisonMushroomObject.SPRITE[PoisonMushroomObject.SPRITE_LIST[_0x1bec55].ID] = PoisonMushroomObject.SPRITE_LIST[_0x1bec55];
PoisonMushroomObject.STATE = {};
PoisonMushroomObject.STATE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    SPRITE: [PoisonMushroomObject.SPRITE.IDLE]
}];
for (_0x1bec55 = 0; _0x1bec55 < PoisonMushroomObject.STATE_LIST.length; _0x1bec55++)
    PoisonMushroomObject.STATE[PoisonMushroomObject.STATE_LIST[_0x1bec55].NAME] = PoisonMushroomObject.STATE_LIST[_0x1bec55],
    PoisonMushroomObject.STATE[PoisonMushroomObject.STATE_LIST[_0x1bec55].ID] = PoisonMushroomObject.STATE_LIST[_0x1bec55];
PoisonMushroomObject.prototype.update = PowerUpObject.prototype.update;
PoisonMushroomObject.prototype.step = PowerUpObject.prototype.step;
PoisonMushroomObject.prototype.control = function() {
    PowerUpObject.prototype.control.call(this);
    this.moveSpeed = this.dir ? -PowerUpObject.MOVE_SPEED_MAX : PowerUpObject.MOVE_SPEED_MAX
}
;
PoisonMushroomObject.prototype.physics = PowerUpObject.prototype.physics;
PoisonMushroomObject.prototype.bounce = PowerUpObject.prototype.bounce;
PoisonMushroomObject.prototype.playerCollide = PowerUpObject.prototype.playerCollide;
PoisonMushroomObject.prototype.playerStomp = PowerUpObject.prototype.playerStomp;
PoisonMushroomObject.prototype.playerBump = PowerUpObject.prototype.playerBump;
PoisonMushroomObject.prototype.kill = PowerUpObject.prototype.kill;
PoisonMushroomObject.prototype.destroy = GameObject.prototype.destroy;
PoisonMushroomObject.prototype.isTangible = GameObject.prototype.isTangible;
PoisonMushroomObject.prototype.setState = PowerUpObject.prototype.setState;
PoisonMushroomObject.prototype.draw = PowerUpObject.prototype.draw;
GameObject.REGISTER_OBJECT(PoisonMushroomObject);
"use strict";
function CoinObject(e, t, i, s, o) {
    GameObject.call(this, e, t, i, s);
    this.oid = o;
    this.state = CoinObject.STATE.IDLE;
    this.sprite = this.state.SPRITE[0];
    this.anim = 0;
    this.dim = vec2.make(1, 1)
}
CoinObject.ASYNC = false;
CoinObject.ID = 97;
CoinObject.NAME = "COIN";
CoinObject.ANIMATION_RATE = 5;
CoinObject.SPRITE = {};
CoinObject.SPRITE_LIST = [{
    NAME: "IDLE0",
    ID: 0,
    INDEX: 240
}, {
    NAME: "IDLE1",
    ID: 1,
    INDEX: 241
}, {
    NAME: "IDLE2",
    ID: 2,
    INDEX: 242
}, {
    NAME: "IDLE3",
    ID: 3,
    INDEX: 243
}];
for (_0x1bec55 = 0; _0x1bec55 < CoinObject.SPRITE_LIST.length; _0x1bec55++)
    CoinObject.SPRITE[CoinObject.SPRITE_LIST[_0x1bec55].NAME] = CoinObject.SPRITE_LIST[_0x1bec55],
    CoinObject.SPRITE[CoinObject.SPRITE_LIST[_0x1bec55].ID] = CoinObject.SPRITE_LIST[_0x1bec55];
CoinObject.STATE = {};
CoinObject.STATE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    SPRITE: [CoinObject.SPRITE.IDLE0, CoinObject.SPRITE.IDLE1, CoinObject.SPRITE.IDLE2, CoinObject.SPRITE.IDLE3]
}];
for (_0x1bec55 = 0; _0x1bec55 < CoinObject.STATE_LIST.length; _0x1bec55++)
    CoinObject.STATE[CoinObject.STATE_LIST[_0x1bec55].NAME] = CoinObject.STATE_LIST[_0x1bec55],
    CoinObject.STATE[CoinObject.STATE_LIST[_0x1bec55].ID] = CoinObject.STATE_LIST[_0x1bec55];
CoinObject.prototype.update = function(e) {
    switch (e) {
    case 0:
        this.kill();
        break;
    case 160:
        this.kill();
        break
    }
}
;
CoinObject.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / CoinObject.ANIMATION_RATE) % this.state.SPRITE.length]
}
;
CoinObject.prototype.playerCollide = function(e, t) {
    if (this.dead || this.garbage)
        return;
    e.powerupVisual(this);
    this.kill();
    this.game.out.push(NET020.encode(this.level, this.zone, this.oid, this.jump ? 161 : 160))
}
;
CoinObject.prototype.playerStomp = function(e) {
    this.playerCollide(e)
}
;
CoinObject.prototype.playerBump = function(e) {
    this.playerCollide(e)
}
;
CoinObject.prototype.kill = function() {
    this.dead = true;
    this.destroy()
}
;
CoinObject.prototype.isTangible = GameObject.prototype.isTangible;
CoinObject.prototype.destroy = GameObject.prototype.destroy;
CoinObject.prototype.setState = function(e) {
    e !== this.state && (this.state = e,
    this.sprite = e.SPRITE[0],
    this.anim = 0)
}
;
CoinObject.prototype.draw = function(e) {
    e.push({
        pos: this.pos,
        reverse: this.reverse,
        index: this.sprite.INDEX,
        mode: 0
    })
}
;
GameObject.REGISTER_OBJECT(CoinObject);
"use strict";
function CheckObject(e, t, i, s, o) {
    GameObject.call(this, e, t, i, s);
    this.oid = o;
    this.setState(CheckObject.STATE.IDLE);
    this.anim = 0
}
CheckObject.ASYNC = true;
CheckObject.ID = 254;
CheckObject.NAME = "CHECKMARK";
CheckObject.ANIMATION_RATE = 3;
CheckObject.SPRITE = {};
CheckObject.SPRITE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    INDEX: 254
}];
for (_0x1bec55 = 0; _0x1bec55 < CheckObject.SPRITE_LIST.length; _0x1bec55++)
    CheckObject.SPRITE[CheckObject.SPRITE_LIST[_0x1bec55].NAME] = CheckObject.SPRITE_LIST[_0x1bec55],
    CheckObject.SPRITE[CheckObject.SPRITE_LIST[_0x1bec55].ID] = CheckObject.SPRITE_LIST[_0x1bec55];
CheckObject.STATE = {};
CheckObject.STATE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    SPRITE: [CheckObject.SPRITE.IDLE]
}];
for (_0x1bec55 = 0; _0x1bec55 < CheckObject.STATE_LIST.length; _0x1bec55++)
    CheckObject.STATE[CheckObject.STATE_LIST[_0x1bec55].NAME] = CheckObject.STATE_LIST[_0x1bec55],
    CheckObject.STATE[CheckObject.STATE_LIST[_0x1bec55].ID] = CheckObject.STATE_LIST[_0x1bec55];
CheckObject.prototype.update = function(e) {}
;
CheckObject.prototype.step = function() {
    this.anim++;
    this.sprite = this.state.SPRITE[parseInt(this.anim / CheckObject.ANIMATION_RATE) % this.state.SPRITE.length]
}
;
CheckObject.prototype.kill = function() {}
;
CheckObject.prototype.isTangible = GameObject.prototype.isTangible;
CheckObject.prototype.destroy = GameObject.prototype.destroy;
CheckObject.prototype.setState = function(e) {
    e !== this.state && (this.state = e,
    this.sprite = e.SPRITE[0],
    this.anim = 0)
}
;
CheckObject.prototype.draw = function(e) {
    e.push({
        pos: this.pos,
        reverse: false,
        index: this.sprite.INDEX,
        mode: 0
    })
}
;
GameObject.REGISTER_OBJECT(CheckObject);
"use strict";
function TextObject(e, t, i, s, o, a, r, n, p) {
    GameObject.call(this, e, t, i, s);
    this.oid = o;
    this.setState(TextObject.STATE.IDLE);
    this.offset = vec2.make(0, parseFloat(a));
    this.size = parseFloat(r);
    this.color = n;
    this.text = p
}
TextObject.ASYNC = true;
TextObject.ID = 253;
TextObject.NAME = "TEXT";
TextObject.ANIMATION_RATE = 3;
TextObject.SPRITE = {};
TextObject.SPRITE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    INDEX: 255
}];
for (_0x1bec55 = 0; _0x1bec55 < TextObject.SPRITE_LIST.length; _0x1bec55++)
    TextObject.SPRITE[TextObject.SPRITE_LIST[_0x1bec55].NAME] = TextObject.SPRITE_LIST[_0x1bec55],
    TextObject.SPRITE[TextObject.SPRITE_LIST[_0x1bec55].ID] = TextObject.SPRITE_LIST[_0x1bec55];
TextObject.STATE = {};
TextObject.STATE_LIST = [{
    NAME: "IDLE",
    ID: 0,
    SPRITE: [TextObject.SPRITE.IDLE]
}];
for (_0x1bec55 = 0; _0x1bec55 < TextObject.STATE_LIST.length; _0x1bec55++)
    TextObject.STATE[TextObject.STATE_LIST[_0x1bec55].NAME] = TextObject.STATE_LIST[_0x1bec55],
    TextObject.STATE[TextObject.STATE_LIST[_0x1bec55].ID] = TextObject.STATE_LIST[_0x1bec55];
TextObject.prototype.update = function(e) {}
;
TextObject.prototype.step = function() {}
;
TextObject.prototype.kill = function() {}
;
TextObject.prototype.destroy = GameObject.prototype.destroy;
TextObject.prototype.isTangible = GameObject.prototype.isTangible;
TextObject.prototype.setState = function(e) {
    e !== this.state && (this.state = e,
    this.sprite = e.SPRITE[0],
    this.anim = 0)
}
;
TextObject.prototype.write = function(e) {
    e.push({
        pos: vec2.add(this.pos, this.offset),
        size: this.size,
        color: this.color,
        text: this.text
    })
}
;
GameObject.REGISTER_OBJECT(TextObject);
"use strict";
function TempEffect(e) {
    this.pos = e;
    this.garbage = false
}
TempEffect.prototype.step = function() {
    1 > this.life-- && this.destroy()
}
;
TempEffect.prototype.destroy = function() {
    this.garbage = true
}
;
TempEffect.prototype.draw = function(e, t) {}
;
"use strict";
function _0x5296e0(e, t) {
    TempEffect.call(this, e);
    this.sprite = t;
    this.life = 25;
    this.bits = [{
        pos: vec2.add(this.pos, vec2.make(0, 0)),
        vel: vec2.make(-.24, .9),
        rot: 0,
        ang: -.3,
        sp: vec2.make(0, 0),
        ss: vec2.make(.5, .5),
        so: vec2.make(.25, .25)
    }, {
        pos: vec2.add(this.pos, vec2.make(.5, 0)),
        vel: vec2.make(.24, .9),
        rot: 0,
        ang: .3,
        sp: vec2.make(.5, 0),
        ss: vec2.make(.5, .5),
        so: vec2.make(.25, .25)
    }, {
        pos: vec2.add(this.pos, vec2.make(0, -.5)),
        vel: vec2.make(-.3, .5),
        rot: 0,
        ang: -.33,
        sp: vec2.make(0, .5),
        ss: vec2.make(.5, .5),
        so: vec2.make(.25, .25)
    }, {
        pos: vec2.add(this.pos, vec2.make(.5, -.5)),
        vel: vec2.make(.3, .5),
        rot: 0,
        ang: .33,
        sp: vec2.make(.5, .5),
        ss: vec2.make(.5, .5),
        so: vec2.make(.25, .25)
    }]
}
_0x5296e0.FALL_SPEED = .0775;
_0x5296e0.DRAG = .975;
_0x5296e0.prototype.step = function() {
    for (var e = 0; e < this.bits.length; e++) {
        var t = this.bits[e];
        t.vel.y -= _0x5296e0.FALL_SPEED;
        t.vel = vec2.scale(t.vel, _0x5296e0.DRAG);
        t.pos = vec2.add(t.pos, t.vel);
        t.ang *= _0x5296e0.DRAG;
        t.rot += t.ang
    }
    TempEffect.prototype.step.call(this)
}
;
_0x5296e0.prototype.destroy = TempEffect.prototype.destroy;
_0x5296e0.prototype.draw = function(e, t) {
    for (var i = 0; i < this.bits.length; i++) {
        var s = this.bits[i];
        e.push({
            tex: "map",
            ind: this.sprite,
            pos: s.pos,
            off: s.so,
            rot: s.rot,
            sp: s.sp,
            ss: s.ss
        })
    }
}
;
"use strict";
function JumpingCoinEffect(e) {
    TempEffect.call(this, e);
    this.life = JumpingCoinEffect.UP_TIME + JumpingCoinEffect.DOWN_TIME;
    this.anim = this.sprite = 0;
    this.bits = [{
        pos: vec2.add(this.pos, vec2.make(0, 0)),
        sp: vec2.make(0, 0),
        ss: vec2.make(1, 1),
        so: vec2.make(0, 0)
    }]
}
JumpingCoinEffect.SPRITE = [244, 245, 246, 247];
JumpingCoinEffect.ANIMATION_RATE = 2;
JumpingCoinEffect.MOVE_SPEED = .375;
JumpingCoinEffect.UP_TIME = 8;
JumpingCoinEffect.DOWN_TIME = 6;
JumpingCoinEffect.prototype.step = function() {
    TempEffect.prototype.step.call(this);
    this.sprite = JumpingCoinEffect.SPRITE[parseInt(this.anim++ / JumpingCoinEffect.ANIMATION_RATE) % JumpingCoinEffect.SPRITE.length];
    this.bits[0].pos.y = this.life >= JumpingCoinEffect.DOWN_TIME ? this.bits[0].pos.y + JumpingCoinEffect.MOVE_SPEED : this.bits[0].pos.y - JumpingCoinEffect.MOVE_SPEED
}
;
JumpingCoinEffect.prototype.destroy = TempEffect.prototype.destroy;
JumpingCoinEffect.prototype.draw = function(e, t) {
    for (var i = 0; i < this.bits.length; i++) {
        var s = this.bits[i];
        e.push({
            tex: "obj",
            ind: this.sprite,
            pos: s.pos,
            off: s.so,
            rot: 0,
            sp: s.sp,
            ss: s.ss
        })
    }
}
;
function RisingLabelEffect(e, t) {
    TempEffect.call(this, vec2.add(e, vec2.make(0, .5)));
    this.pos.y = Math.min(this.pos.y, 12);
    this.label = t;
    this.life = RisingLabelEffect.UP_TIME
}
RisingLabelEffect.SPRITE = [244, 245, 246, 247];
RisingLabelEffect.ANIMATION_RATE = 2;
RisingLabelEffect.MOVE_SPEED = .375;
RisingLabelEffect.UP_TIME = 60;
RisingLabelEffect.prototype.step = function() {
    TempEffect.prototype.step.call(this);
    this.pos.y += .025
}
;
RisingLabelEffect.prototype.destroy = TempEffect.prototype.destroy;
RisingLabelEffect.prototype.draw = function(e, t) {
    t.push({
        pos: this.pos,
        color: "white",
        size: .4,
        text: this.label
    })
}
;
"use strict";
function Input(e, t) {
    this.game = e;
    this.container = t;
    var i = this;
    this.container.onmousemove = function(e) {
        i.mouse.event(e)
    }
    ;
    this.container.onmousedown = function(e) {
        i.mouse.event(e, true)
    }
    ;
    this.container.onmouseup = function(e) {
        i.mouse.event(e, false)
    }
    ;
    this.container.addEventListener("mousewheel", (function(e) {
        i.mouse.wheel(e)
    }
    ), false);
    this.container.addEventListener("DOMMouseScroll", (function(e) {
        i.mouse.wheel(e)
    }
    ), false);
    document.onkeyup = function(e) {
        i.keyboard.event(e, false)
    }
    ;
    document.onkeydown = function(e) {
        i.keyboard.event(e, true)
    }
    ;
    this.touchEvt = function(e) {
        app.game.input.touch.event(e)
    }
    ;
    document.addEventListener("touchstart", this.touchEvt, true);
    document.addEventListener("touchmove", this.touchEvt, true);
    document.addEventListener("touchend", this.touchEvt, true);
    this.mouse.input = this;
    this.keyboard.input = this;
    this.touch.input = this;
    this.load()
}
Input.INPUTS = "up down left right a b ta".split(" ");
Input.K_DEFAULT = [87, 83, 65, 68, 32, 16, 89];
Input.G_DEFAULT = [0, 1, 2, 3, 4, 5, 6];
Input.prototype.load = function() {
    this.assignK = {};
    for (var e = 0; e < Input.INPUTS.length; e++) {
        var t = Cookies.get("k_" + Input.INPUTS[e]);
        this.assignK[Input.INPUTS[e]] = t ? parseInt(t) : Input.K_DEFAULT[e]
    }
    this.assignG = {};
    for (e = 0; e < Input.INPUTS.length; e++) {
        var i = Cookies.get("g_" + Input.INPUTS[e]);
        this.assignG[Input.INPUTS[e]] = i ? parseInt(i) : Input.G_DEFAULT[e]
    }
}
;
Input.prototype.pad = {};
Input.prototype.pad.pad = undefined;
Input.prototype.pad.ax = vec2.make(0, 0);
Input.prototype.pad.update = function() {
    this.pad = navigator ? navigator.getGamepads()[0] : undefined;
    this.analog()
}
;
Input.prototype.pad.analog = function() {
    if (this.pad)
        for (var e = 0; e < this.pad.axes.length - 1; e++) {
            var t = this.pad.axes[e]
              , i = this.pad.axes[e + 1];
            if (!(.25 > Math.abs(t) && .25 > Math.abs(i))) {
                this.ax = vec2.make(t, i);
                return
            }
        }
    this.ax = vec2.make(0, 0)
}
;
Input.prototype.pad.button = function(e) {
    return this.pad ? this.pad.buttons[e].pressed : false
}
;
Input.prototype.pad.connected = function() {
    return !!this.pad
}
;
Input.prototype.mouse = {};
Input.prototype.mouse.inputs = [];
Input.prototype.mouse.pos = {};
Input.prototype.mouse.mov = {};
Input.prototype.mouse.spin = 0;
Input.prototype.mouse.nxtMov = {};
Input.prototype.mouse.nxtSpin = 0;
Input.prototype.mouse.lmb = false;
Input.prototype.mouse.rmb = false;
Input.prototype.mouse.mmb = false;
Input.prototype.mouse.nxtMov.x = 0;
Input.prototype.mouse.nxtMov.y = 0;
Input.prototype.mouse.mov.x = 0;
Input.prototype.mouse.mov.y = 0;
Input.prototype.mouse.pos.x = 0;
Input.prototype.mouse.pos.y = 0;
Input.prototype.mouse.event = function(e, t) {
    this.nxtMov = {};
    this.nxtMov.x = this.nxtMov.x + (this.pos.x - e.offsetX);
    this.nxtMov.y = this.nxtMov.y + -1 * (this.pos.y - e.offsetY);
    this.pos = {};
    this.pos.x = e.offsetX;
    this.pos.y = e.offsetY;
    if (undefined !== t) {
        switch (e.button) {
        case 0:
            this.lmb = t;
            break;
        case 2:
            this.rmb = t;
            break;
        case 1:
            this.mmb = t
        }
        t && this.inputs.push({
            btn: e.button,
            pos: this.pos
        })
    }
}
;
Input.prototype.mouse.wheel = function(e) {
    e = window.event || e;
    this.nxtSpin += Math.max(-1, Math.min(1, e.wheelDelta || -e.detail));
    return false
}
;
Input.prototype.keyboard = {};
Input.prototype.keyboard.inputs = [];
Input.prototype.keyboard.keys = [];
Input.prototype.keyboard.event = function(e, t) {
    (this.keys[e.keyCode] = t) && this.inputs.push({
        key: e.keyCode,
        char: 1 !== e.key.length ? "" : e.key
    })
}
;
Input.prototype.touch = {};
Input.prototype.touch.inputs = [];
Input.prototype.touch.pos = [];
Input.prototype.touch.event = function(e) {
    var t = this.pos;
    this.pos = [];
    for (var i = 0; i < e.touches.length; i++) {
        for (var s = e.touches[i], o = false, a = 0; a < t.length; a++)
            if (t[a].id === s.identifier) {
                o = true;
                break
            }
        o || this.inputs.push({
            id: s.identifier,
            x: s.clientX,
            y: s.clientY
        });
        this.pos.push({
            id: s.identifier,
            x: s.clientX,
            y: s.clientY
        })
    }
}
;
Input.prototype.pop = function() {
    this.mouse.mov = this.mouse.nxtMov;
    this.mouse.spin = this.mouse.nxtSpin;
    this.mouse.nxtMov = {};
    this.mouse.nxtMov.x = 0;
    this.mouse.nxtMov.y = 0;
    this.mouse.nxtSpin = 0;
    var e = {};
    e.mouse = this.mouse.inputs;
    e.keyboard = this.keyboard.inputs;
    e.touch = this.touch.inputs;
    this.keyboard.inputs = [];
    this.mouse.inputs = [];
    this.touch.inputs = [];
    return e
}
;
Input.prototype.destroy = function() {
    this.container.onmousemove = function() {}
    ;
    this.container.onmousedown = function() {}
    ;
    this.container.onmouseup = function() {}
    ;
    this.container.removeEventListener("mousewheel", this.mouse.wheel, false);
    this.container.removeEventListener("DOMMouseScroll", this.mouse.wheel, false);
    document.onkeyup = function() {}
    ;
    document.onkeydown = function() {}
}
;
"use strict";
function Resource(e) {
    this.texture = {};
    this.texture.cache = {};
    this.texture.res = {};
    this.pendingTexture = [];
    this.texture.load = 0;
    this.load(e)
}
Resource.prototype.load = function(e) {
    for (var t = 0; t < e.length; t++) {
        var i = e[t];
        this.addTexture(i)
    }
}
;
Resource.prototype.addTexture = function(e) {
    var t = e.src.split(".").pop().toLowerCase();
    switch (t) {
    case "png":
        this.loadTexture(e);
        break;
    case "gif":
        this.loadTexture(e);
        break;
    default:
        app.menu.warn.show("Failed to load resource with unknown extension: " + t)
    }
}
;
Resource.prototype.loadTexture = function(e) {
    var t = this.texture;
    t.res[e.id] = e;
    if (app.overrideSkinImg && e.id.includes("skin")) {
        t.cache[e.id] = app.overrideSkinImg;
        return
    } else if (app.overrideMapImg && e.id == "map") {
        t.cache[e.id] = app.overrideMapImg;
        return
    } else if (app.overrideObjImg && e.id == "obj") {
        t.cache[e.id] = app.overrideObjImg;
        return
    }
    if (!t.cache[e.id] && !this.pendingTexture.includes(e.id)) {
        this.pendingTexture.push(e.id);
        var i = new Image;
        var s = this;
        i.onload = function() {
            t.cache[e.id] = i;
            if (!e.isSkin)
                t.load--;
            s.pendingTexture = s.pendingTexture.filter(t=>t != e.id)
        }
        ;
        i.onerror = function() {
            console.error("failed to load resource: " + e.id + " from " + e.src);
            if (!e.isSkin)
                t.load--
        }
        ;
        i.src = e.src + "?v=" + VERSION;
        if (!e.isSkin)
            t.load++
    }
}
;
Resource.prototype.getTexture = function(e) {
    return this.texture.cache[e]
}
;
Resource.prototype.ready = function() {
    return 0 === this.texture.load
}
;
"use strict";
function Camera(e) {
    this.display = e;
    this.pos = vec2.make(0, 0);
    this.zoomMult = 3;
    var t = this;
    window.onresize = function(e) {
        t.screenScale = window.innerHeight / 768;
        t.scale = t.screenScale * t.zoomMult
    }
    ;
    window.onresize()
}
Camera.MOVE_MULT = .075;
Camera.ZOOM_MULT = .075;
Camera.ZOOM_MAX = 1;
Camera.ZOOM_MIN = 8;
Camera.prototype.move = function(e) {
    this.pos = vec2.add(this.pos, vec2.scale(e, 1 / this.scale * Camera.MOVE_MULT))
}
;
Camera.prototype.zoom = function(e) {
    this.zoomMult = Math.max(Camera.ZOOM_MAX, Math.min(Camera.ZOOM_MIN, this.zoomMult + Camera.ZOOM_MULT * e));
    this.scale = this.screenScale * this.zoomMult
}
;
Camera.prototype.position = function(e) {
    this.pos = e
}
;
Camera.prototype.unproject = function(e) {
    e = vec2.add(e, vec2.make(.5 * -this.display.canvas.width, .5 * -this.display.canvas.height));
    e = vec2.scale(e, 1 / this.scale);
    e = vec2.add(e, vec2.make(this.pos.x * Display.TEXRES, this.pos.y * Display.TEXRES));
    return vec2.scale(e, .0625)
}
;
"use strict";
function AudioData(e, t, i) {
    this.path = t;
    this.prefixes = i.slice();
    this.context = e;
    this.startLoad()
}
AudioData.prototype.startLoad = function() {
    var e = this
      , t = new XMLHttpRequest;
    t.open("GET", ASSETS_URL + "audio/" + this.prefixes[0] + "/" + this.path + "?v=" + VERSION, true);
    t.responseType = "arraybuffer";
    t.onload = function() {
        e.onload(t, e.context)
    }
    ;
    t.send()
}
;
AudioData.prototype.onload = function(e, t) {
    if (e.status != 200) {
        this.prefixes.shift();
        if (this.prefixes.length) {
            this.startLoad()
        } else {
            this.onError(e.statusText)
        }
        return
    }
    var i = this;
    t.decodeAudioData(e.response, (function(e) {
        i.buffer = e
    }
    ), e=>i.onError(e))
}
;
AudioData.prototype.onError = function(e) {
    console.error("Error while decoding audio data " + this.path + ": " + e)
}
;
AudioData.prototype.ready = function() {
    return undefined !== this.buffer
}
;
AudioData.prototype.destroy = function() {}
;
"use strict";
function SoundFile(e, t, i, s, o, a) {
    this.context = e;
    this.path = t;
    this.data = i;
    this.playing = this.played = this.ready = false;
    if (this.data.ready()) {
        this.create(s, o, a)
    } else {
        this.partialLoad = true;
        app.menu.warn.show("Attempted to instance partially loaded sound data: '" + t + "'")
    }
}
SoundFile.prototype.create = function(e, t, i) {
    this.partialLoad = false;
    var s = this;
    this.source = this.context.createBufferSource();
    this.source.buffer = this.data.buffer;
    this.source.onended = function() {
        s.playing = false
    }
    ;
    this.source.playbackRate.value = 1 + (t * Math.random() - .5 * t);
    this.gain = this.context.createGain();
    this.gain.gain.value = e;
    this.source.connect(this.gain);
    this.gain.connect(i);
    this.ready = true
}
;
SoundFile.prototype.position = function() {}
;
SoundFile.prototype.volume = function(e) {
    this.ready && (this.gain.gain.value = e)
}
;
SoundFile.prototype.play = function() {
    this.ready && !this.played ? (this.source.start(0),
    this.playing = true,
    this.played = true) : this.played && app.menu.warn.show("Attempted to replay sound instance: '" + this.path + "'")
}
;
SoundFile.prototype.stop = function() {
    this.ready && this.played && this.source.stop()
}
;
SoundFile.prototype.loop = function(e) {
    this.ready && (this.source.loop = e)
}
;
SoundFile.prototype.done = function() {
    return this.played && !this.playing
}
;
function SpatialSoundFile(e, t, i, s, o, a) {
    SoundFile.call(this, e, t, i, s, o, a)
}
SpatialSoundFile.prototype.create = function(e, t, i) {
    var s = this;
    this.source = this.context.createBufferSource();
    this.source.buffer = this.data.buffer;
    this.source.onended = function() {
        s.playing = false
    }
    ;
    this.source.playbackRate.value = 1 + (t * Math.random() - .5 * t);
    this.gain = this.context.createGain();
    this.gain.gain.value = e;
    this.panner = this.context.createPanner();
    this.panner.panningModel = "HRTF";
    this.panner.distanceModel = "linear";
    this.panner.refDistance = Audio.FALLOFF_MIN;
    this.panner.maxDistance = Audio.FALLOFF_MAX;
    this.panner.rolloffFactor = 1;
    this.panner.coneInnerAngle = 360;
    this.panner.coneOuterAngle = 0;
    this.panner.coneOuterGain = 0;
    this.source.connect(this.gain);
    this.gain.connect(this.panner);
    this.panner.connect(i);
    this.panner.setPosition(0, 0, 0);
    this.panner.setOrientation(1, 0, 0);
    this.ready = true
}
;
SpatialSoundFile.prototype.position = function(e) {
    this.data.ready() && this.ready && (this.panner.setPosition ? this.panner.setPosition(e.x, e.y, 0) : (this.panner.positionX.value = e.x,
    this.panner.positionY.value = e.y,
    this.panner.positionZ.value = 0))
}
;
SpatialSoundFile.prototype.volume = SoundFile.prototype.volume;
SpatialSoundFile.prototype.play = function(e) {
    this.position(e);
    this.ready && !this.played ? (this.source.start(0),
    this.playing = true) : this.played && app.menu.warn.show("Attempted to replay sound instance: '" + this.path + "'");
    this.played = true
}
;
SpatialSoundFile.prototype.stop = SoundFile.prototype.stop;
SpatialSoundFile.prototype.loop = SoundFile.prototype.loop;
SpatialSoundFile.prototype.done = SoundFile.prototype.done;
"use strict";
function Audio(e) {
    this.soundPrefix = ["sfx"];
    this.musicPrefix = ["music"];
    this.initWebAudio(e) || this.initFallback()
}
Audio.FALLOFF_MIN = 1;
Audio.FALLOFF_MAX = 24;
Audio.prototype.setCustomSoundPrefix = function(e) {
    this.customSoundPrefix = e;
    this.soundPrefix = [e, "sfx"]
}
;
Audio.prototype.setCustomMusicPrefix = function(e) {
    this.customMusicPrefix = e;
    this.musicPrefix = [e, "music"]
}
;
Audio.prototype.initWebAudio = function(e) {
    try {
        this.context = new (window.AudioContext || window.webkitAudioContext)
    } catch (t) {
        return e.menu.warn.show("WebAudio not supported. Intializing fallback mode..."),
        false
    }
    var t = ["alert.mp3", "break.mp3", "breath.mp3", "bump.mp3", "gold.mp3", "spring.mp3", "coin.mp3", "fireball.mp3", "firework.mp3", "flagpole.mp3", "item.mp3", "jump0.mp3", "jump1.mp3", "kick.mp3", "life.mp3", "pipe.mp3", "powerup.mp3", "stomp.mp3", "vine.mp3"];
    var i = ["main0.mp3", "main1.mp3", "main2.mp3", "main3.mp3", "level.mp3", "castle.mp3", "victory.mp3", "star.mp3", "dead.mp3", "gameover.mp3", "hurry.mp3"];
    this.sounds = [];
    for (var s = 0; s < t.length; s++)
        if (!this.createAudio(t[s], this.soundPrefix))
            return false;
    for (var s = 0; s < i.length; s++)
        if (!this.createAudio(i[s], this.musicPrefix))
            return false;
    this.masterVolume = this.context.createGain();
    this.masterVolume.gain.value = 1;
    this.masterVolume.connect(this.context.destination);
    this.effectVolume = this.context.createGain();
    this.effectVolume.gain.value = 1;
    this.effectVolume.connect(this.masterVolume);
    this.musicVolume = this.context.createGain();
    this.musicVolume.gain.value = 1;
    this.musicVolume.connect(this.masterVolume);
    this.masterVolume.gain.value = .5;
    this.effectVolume.gain.value = e.settings.muteSound ? 0 : .75;
    this.musicVolume.gain.value = e.settings.muteMusic ? 0 : .5;
    this.context.listener.setPosition(0, 0, 0);
    this.context.listener.setOrientation(1, 0, 0, 0, 1, 0);
    return true
}
;
Audio.prototype.initFallback = function() {
    this.context = undefined;
    this.sounds = []
}
;
Audio.prototype.update = function() {
    this.updateVolume();
    var e = app.game.getPlayer() ? app.game.getPlayer().pos : app.game.display.camera.pos;
    this.context.listener.setPosition ? (this.context.listener.setPosition(e.x, e.y, 0),
    this.context.listener.setOrientation(1, 0, 0, 0, 1, 0)) : (this.context.listener.positionX.value = e.x,
    this.context.listener.positionY.value = e.y,
    this.context.listener.positionZ.value = 0,
    this.context.listener.forwardX.value = 1,
    this.context.listener.forwardY.value = 0,
    this.context.listener.forwardZ.value = 0,
    this.context.listener.upX.value = 0,
    this.context.listener.upY.value = 1,
    this.context.listener.upZ.value = 0)
}
;
Audio.prototype.updateVolume = function() {
    this.masterVolume.gain.value = .5;
    this.effectVolume.gain.value = app.settings.muteSound ? 0 : .75;
    this.musicVolume.gain.value = app.settings.muteMusic ? 0 : .5;
    if (!app.settings.muteSound && !app.settings.muteMusic) {
        for (var e = app.game.getZone(), t = app.game.getPlayer() ? app.game.getPlayer().pos : app.game.display.camera.pos, i = 999, s = 0; s < app.game.objects.length; s++) {
            var o = app.game.objects[s];
            if (o instanceof PlayerObject && o.level === e.level && o.zone === e.id && 0 < o.starTimer) {
                var a = vec2.distance(t, o.pos);
                a < i && (i = a)
            }
        }
        i < Audio.FALLOFF_MAX && (this.musicVolume.gain.value = .5 * Math.max(0, Math.min(1, Math.pow(a / Audio.FALLOFF_MAX, 2))))
    }
}
;
Audio.prototype.saveSettings = function() {
    Cookies.set("music", app.settings.muteMusic ? 1 : 0, {
        expires: 30
    });
    Cookies.set("sound", app.settings.muteSound ? 1 : 0, {
        expires: 30
    })
}
;
Audio.prototype.setMusic = function(e, t) {
    if (this.music) {
        if (!(!this.music.played && this.music.data.ready() && this.music.partialLoad)) {
            if (this.music.path === e)
                return;
            this.music.stop()
        }
    }
    this.music = this.getAudio(e, 1, 0, "music");
    this.music.loop(t);
    this.music.play()
}
;
Audio.prototype.stopMusic = function() {
    this.music && (this.music.stop(),
    this.music = undefined)
}
;
Audio.prototype.createAudio = function(e, t) {
    sound = new AudioData(this.context,e,t);
    this.sounds.push(sound);
    return true
}
;
Audio.prototype.createCustomAudio = function(e) {
    e = new CustomAudioData(this.context,e);
    this.sounds.push(e);
    return true
}
;
Audio.prototype.addMusic = function(e) {
    for (var t = 0; t < this.sounds.length; t++)
        if (this.sounds[t].path === e)
            return;
    this.createAudio(e, this.musicPrefix)
}
;
Audio.prototype.getAudioLength = function(e) {
    for (var t = 0; t < this.sounds.length; t++)
        if (this.sounds[t].path === e)
            return this.sounds[t].buffer.duration;
    return 1
}
;
Audio.prototype.getAudio = function(e, t, i, s) {
    var o;
    switch (s) {
    case "effect":
        o = this.effectVolume;
        break;
    case "music":
        o = this.musicVolume;
        break;
    default:
        o = this.effectVolume
    }
    for (var a = 0; a < this.sounds.length; a++)
        if (this.sounds[a].path === e)
            return new SoundFile(this.context,e,this.sounds[a],t,i,o);
    if (this.createAudio(e, s == "music" ? this.musicPrefix : this.soundPrefix))
        return this.getAudio(e);
    app.menu.warn.show("Failed to load sound: '" + e + "'");
    return this.getAudio("default.mp3")
}
;
Audio.prototype.getSpatialAudio = function(e, t, i, s) {
    var o;
    switch (s) {
    case "effect":
        o = this.effectVolume;
        break;
    case "music":
        o = this.musicVolume;
        break;
    default:
        o = this.effectVolume
    }
    for (var a = 0; a < this.sounds.length; a++)
        if (this.sounds[a].path === e)
            return new SpatialSoundFile(this.context,e,this.sounds[a],t,i,o);
    if (this.createAudio(e, s == "music" ? this.musicPrefix : this.soundPrefix))
        return this.getSpatialAudio(e);
    app.menu.warn.show("Failed to load sound: '" + e + "'");
    return this.getSpatialAudio("multi/default.mp3")
}
;
Audio.prototype.destroy = function() {
    for (var e = 0; e < this.sounds.length; e++)
        this.sounds[e].destroy();
    this.stopMusic();
    this.sounds = [];
    this.context.close().catch((function(e) {
        console.error("Error closing audio context.")
    }
    ))
}
;
"use strict";
td32.collideTest = function(e) {
    return e.split("").reverse().join("")
}
;
td32.state = function(e) {
    return e[td32.collideTest("reyalPteg")]() ? .39 < e[td32.collideTest("reyalPteg")]()[td32.collideTest("deepSevom")] || 20 < e[td32.collideTest("reyalPteg")]()[td32.collideTest("gnipmuj")] || 15 < e[td32.collideTest("sevil")] || 200 < e[td32.collideTest("reyalPteg")]()[td32.collideTest("remiTegamad")] || 400 < e[td32.collideTest("reyalPteg")]()[td32.collideTest("remiTrats")] || 0 < e[td32.collideTest("reyalPteg")]()[td32.collideTest("rewop")] && !e[td32.collideTest("reyalPteg")]()[td32.collideTest("etar")] || 0 < e[td32.collideTest("reyalPteg")]()[td32.collideTest("remiTrats")] && !e[td32.collideTest("reyalPteg")]()[td32.collideTest("etar")] || td32.onHit !== StarObject.prototype[td32.collideTest("scisyhp")] || td32.onCollide !== PlayerObject.prototype[td32.collideTest("scisyhp")] : false
}
;
td32.update = function(e) {}
;
td32.onHit = StarObject.prototype[td32.collideTest("scisyhp")];
td32.onCollide = PlayerObject.prototype[td32.collideTest("scisyhp")];
"use strict";
function Display(e, t, i, s) {
    this.game = e;
    this.container = t;
    this.canvas = i;
    this.context = this.canvas.getContext("2d");
    s.push({
        id: "skin0",
        src: ASSETS_URL + "img/game/smb_skin0.png"
    });
    s.push({
        id: "ui",
        src: ASSETS_URL + "img/game/smb_ui.png"
    });
    this.resource = new Resource(s);
    this.camera = new Camera(this)
}
Display.TEXRES = 16;
Display.prototype.ensureSkin = function(e) {
    var t = this.resource.getTexture("skin" + e);
    if (t === undefined) {
        this.resource.addTexture({
            id: "skin" + e,
            src: ASSETS_URL + "img/game/smb_skin" + e + ".png",
            isSkin: true
        })
    }
}
;
Display.prototype.clear = function() {
    var e = this.context;
    if (this.container.clientWidth !== this.canvas.width || this.container.clientHeight !== this.canvas.height)
        this.canvas.width = this.container.clientWidth,
        this.canvas.height = this.container.clientHeight;
    e.clearRect(0, 0, this.canvas.width, this.canvas.height);
    e.webkitImageSmoothingEnabled = false;
    e.msImageSmoothingEnabled = false;
    e.imageSmoothingEnabled = false
}
;
Display.prototype.draw = function() {
    var e = this.context;
    this.clear();
    e.fillStyle = this.game.getZone().color;
    e.fillRect(0, 0, this.canvas.width, this.canvas.height);
    if (this.resource.ready()) {
        this.game.getZone().dimensions();
        e.save();
        e.translate(parseInt(.5 * this.canvas.width), parseInt(.5 * this.canvas.height));
        e.scale(this.camera.scale, this.camera.scale);
        e.translate(parseInt(-this.camera.pos.x * Display.TEXRES), parseInt(-this.camera.pos.y * Display.TEXRES));
        var t = this.game.getZone();
        for (var i = 0; i < t.layers.length; i++) {
            this.drawMap(t.layers[i].data, false);
            if (t.layers[i].z == 0) {
                this.drawObject();
                this.drawMap(t.layers[i].data, true)
            }
        }
        this.drawEffect();
        e.restore();
        this.drawTouch();
        this.drawUI()
    } else {
        this.drawLoad()
    }
}
;
Display.prototype.drawMap = function(e, t) {
    var i = this.context;
    var s = this.resource.getTexture("map");
    var o = this.game.getZone();
    var a = o.dimensions();
    var r = this.canvas.width / Display.TEXRES * .55 / this.camera.scale;
    var n = Math.max(0, Math.min(a.x, parseInt(this.camera.pos.x - r)));
    var p = Math.max(0, Math.min(a.x, parseInt(this.camera.pos.x + r)));
    for (var c = 0; c < e.length; c++) {
        var l = e[c];
        for (var h = n; h < p; h++) {
            var d = td32.decode16(l[h]);
            if (d.depth === t) {
                var m = 0;
                var b = d.index;
                if (b in TILE_ANIMATION_FILTERED) {
                    var u = TILE_ANIMATION_FILTERED[b];
                    var E = u.delay;
                    var T = Math.floor(this.game.frame % (u.tiles.length * E) / E);
                    m = util.sprite.getSprite(s, u.tiles[T])
                } else
                    m = util.sprite.getSprite(s, b);
                var y = 0
                  , S = Math.max(0, d.bump - 7);
                0 < S && (y = .22 * Math.sin((1 - (S - 2) / 8) * Math.PI));
                i.drawImage(s, m[0], m[1], Display.TEXRES, Display.TEXRES, Display.TEXRES * h, Display.TEXRES * (c - y), Display.TEXRES, Display.TEXRES)
            }
        }
    }
}
;
Display.prototype.drawObject = function() {
    for (var e = this.context, t = this.game.getZone(), i = t.dimensions(), s = this.canvas.width / Display.TEXRES * .75 / this.camera.scale, o = Math.max(0, Math.min(i.x, parseInt(this.camera.pos.x - s))), a = Math.max(0, Math.min(i.x, parseInt(this.camera.pos.x + s))), r = [], n = [], p = 0; p < this.game.objects.length; p++) {
        var c = this.game.objects[p];
        c.level === t.level && c.zone === t.id && c.pid !== this.game.pid && c.pos.x >= o && c.pos.x <= a && (c.write && !app.settings.disableText && c.write(n),
        c.draw && c.draw(r))
    }
    var l = this.game.getPlayer();
    if (l && l.level === t.level && l.zone === t.id) {
        l.draw(r);
        l.write(n)
    }
    var h = this.resource.getTexture("obj");
    var d = {};
    d[0] = this.resource.getTexture("skin0");
    for (var p = 0; p < r.length; p++) {
        var m = r[p];
        var b = m.skin;
        if (app.settings.forcemodel && m.pid !== undefined && m.pid != this.game.pid)
            b = 0;
        if (b && !(b in d))
            d[b] = this.resource.getTexture("skin" + b);
        var u = b != undefined ? d[b] : h;
        if (b && u === undefined)
            u = d[0];
        var E = m.index;
        OBJ_ANIMATION;
        if (E in OBJ_ANIMATION_FILTERED) {
            var T = OBJ_ANIMATION_FILTERED[E];
            var y = T.delay;
            var S = Math.floor(this.game.frame % (T.tiles.length * y) / y);
            E = T.tiles[S]
        }
        var O = util.sprite.getSprite(u, E)
          , f = !!m.reverse
          , I = false
          , j = false;
        switch (m.mode) {
        case 0:
            break;
        case 1:
            e.save();
            j = true;
            e.globalAlpha = .5;
            break;
        case 2:
            0 === parseInt(.5 * this.game.frame) % 2 && (e.save(),
            j = true,
            e.globalCompositeOperation = "lighter");
            break;
        case 3:
            I = true;
            break;
        default:
            160 <= m.mode && 192 > m.mode && (e.save(),
            j = true,
            e.globalAlpha = parseFloat(m.mode - 160) / 32)
        }
        if (f || I)
            e.save(),
            e.scale(f ? -1 : 1, I ? -1 : 1);
        var g = f ? -1 * Display.TEXRES * m.pos.x - Display.TEXRES : Display.TEXRES * m.pos.x;
        var A = I ? -1 * Display.TEXRES * (i.y - m.pos.y - 1) - Display.TEXRES : Display.TEXRES * (i.y - m.pos.y - 1);
        e.drawImage(u, O[0], O[1], Display.TEXRES, Display.TEXRES, g, A, Display.TEXRES, Display.TEXRES);
        (f || I) && e.restore();
        j && e.restore()
    }
    for (var p = 0; p < n.length; p++) {
        var v = n[p];
        var g = Display.TEXRES * v.pos.x + .5 * Display.TEXRES;
        var A = Display.TEXRES * (i.y - v.pos.y - 1) + .5 * Display.TEXRES;
        e.fillStyle = v.color,
        e.font = v.size * Display.TEXRES + "px SmbWeb",
        e.textAlign = "center",
        e.fillText(v.text, g, A)
    }
}
;
Display.prototype.drawEffect = function() {
    var e = this.context
      , t = this.game.getZone()
      , i = t.dimensions()
      , s = this.resource.getTexture("map")
      , o = this.resource.getTexture("obj")
      , a = []
      , r = [];
    t.getEffects(a, r);
    var n = t.dimensions();
    for (var p = 0; p < a.length; p++) {
        var c = a[p], l;
        switch (c.tex) {
        case "map":
            l = s;
            break;
        case "obj":
            l = o
        }
        var h = util.sprite.getSprite(l, c.ind);
        h[0] = parseInt(h[0] + c.sp.x * Display.TEXRES);
        h[1] = parseInt(h[1] + c.sp.y * Display.TEXRES);
        e.save();
        e.translate(parseInt(Display.TEXRES * c.ss.x * .5), parseInt(Display.TEXRES * c.ss.y * .5));
        e.translate(Display.TEXRES * c.pos.x, Display.TEXRES * (i.y - c.pos.y - 1));
        e.rotate(c.rot);
        e.translate(-parseInt(Display.TEXRES * c.ss.x * .5), -parseInt(Display.TEXRES * c.ss.y * .5));
        e.drawImage(l, h[0], h[1], parseInt(Display.TEXRES * c.ss.x), parseInt(Display.TEXRES * c.ss.y), 0, 0, parseInt(Display.TEXRES * c.ss.x), parseInt(Display.TEXRES * c.ss.y));
        e.restore()
    }
    for (var p = 0; p < r.length; p++) {
        var d = r[p];
        var m = Display.TEXRES * d.pos.x + .5 * Display.TEXRES;
        var b = Display.TEXRES * (n.y - d.pos.y - 1) + .5 * Display.TEXRES;
        e.fillStyle = d.color,
        e.font = d.size * Display.TEXRES + "px SmbWeb",
        e.textAlign = "center",
        e.fillText(d.text, m, b)
    }
}
;
HudButtonOffset = 24 + 8;
ingameGuiButtons = [{
    name: "music",
    iconIndex: [251, 249],
    padMode: false,
    settingName: "muteMusic",
    click: function() {
        app.settings.muteMusic = !app.settings.muteMusic;
        if (app.audioElement !== undefined)
            if (app.settings.muteMusic)
                app.audioElement.pause();
            else
                app.audioElement.play();
        app.audio.saveSettings()
    }
}, {
    name: "sound",
    iconIndex: [252, 250],
    padMode: false,
    settingName: "muteSound",
    click: function() {
        app.settings.muteSound = !app.settings.muteSound;
        app.audio.saveSettings()
    }
}, {
    name: "text",
    iconIndex: [203, 202],
    padMode: false,
    settingName: "disableText",
    click: function() {
        app.settings.disableText = !app.settings.disableText;
        Cookies.set("text", app.settings.disableText ? 1 : 0, {
            expires: 30
        })
    }
}, {
    name: "forcemodel",
    iconIndex: [200, 201],
    padMode: false,
    settingName: "forcemodel",
    click: function() {
        app.settings.forcemodel = !app.settings.forcemodel;
        Cookies.set("forcemodel", app.settings.forcemodel ? 1 : 0, {
            expires: 30
        })
    }
}, {
    name: "showSettings",
    iconIndex: [235],
    padMode: false,
    click: function() {
        var e = app.settings.showSettings = !app.settings.showSettings;
        document.getElementById("settingsPanel").style.display = e ? "" : "none";
        if (e)
            document.getElementById("privLobby").style.display = "none"
    }
}, {
    name: "pad",
    iconIndex: [248],
    padMode: true
}];
Display.prototype.drawUI = function() {
    var e = this.context
      , t = this.canvas.width
      , i = this.canvas.height
      , s = [240, 241, 242, 241]
      , o = s[parseInt(this.game.frame / 3) % s.length]
      , a = this.resource.getTexture("obj")
      , r = this.game.skin != undefined ? this.resource.getTexture("skin" + this.game.skin) : a;
    if (this.game.skin && r === undefined)
        r = this.resource.getTexture("skin0");
    var n = app.getPlayerInfo(this.game.pid), p;
    undefined !== this.game.levelWarpId ? p = this.game.world.getLevel(this.game.levelWarpId) : undefined === this.game.startDelta && (p = this.game.world.getInitialLevel());
    this.game.gameOver ? (e.fillStyle = "black",
    e.fillRect(0, 0, t, i),
    e.fillStyle = "white",
    e.font = "32px SmbWeb",
    e.textAlign = "center",
    e.fillText("GAME OVER", .5 * t, .5 * i)) : p && (e.fillStyle = "black",
    e.fillRect(0, 0, t, i),
    e.fillStyle = "white",
    e.font = "32px SmbWeb",
    e.textAlign = "center",
    e.fillText(p.name, .5 * t, .5 * i),
    0 <= this.game.startTimer && (e.font = "24px SmbWeb",
    e.textAlign = "center",
    e.fillText("GAME STARTS IN: " + parseInt(this.game.startTimer / 30), .5 * t, .5 * i + 40)));
    var c, l, h, d, m, b, u, E;
    if (3 >= this.game.victory && 0 !== this.game.victory) {
        victoryTex = this.resource.getTexture("ui");
        m = Math.min(victoryTex.width, t);
        b = parseInt(m * .196);
        e.drawImage(victoryTex, .5 * t - m * .5, 0, m, b);
        u = b / victoryTex.height;
        if (this.game.victory == 1) {
            E = Math.max(195, Math.min(255, this.game.frame % 60 >= 30 ? 255 - parseInt(this.game.frame % 30 * 2 / 10) * 10 : 195 + parseInt(this.game.frame % 30 * 2 / 10) * 10));
            e.fillStyle = "rgba(" + E + "," + E + ",0,1)"
        } else if (this.game.victory == 2) {
            e.fillStyle = "silver"
        } else {
            e.fillStyle = "#B87333"
        }
        e.font = parseInt(64 * u) + "px SmbWeb";
        e.textAlign = "left";
        e.shadowOffsetY = 4;
        e.shadowColor = "rgba(0,0,0,0.3)";
        e.fillText("#" + this.game.victory, .5 * t - m * .5 + 40 * u, 60 * u + .5 * b - 32 * u);
        e.shadowOffsetY = null;
        e.shadowColor = null;
        e.fillStyle = "white";
        e.font = "24px SmbWeb";
        e.textAlign = "center";
        e.fillText(this.game.world.getLevel(this.game.getPlayer().level).name + " MATCH STATS:", .8 * t, .3 * i);
        e.font = "16px SmbWeb";
        e.fillText(this.game.getGameTimer() + " ELAPSED TIME", .8 * t, .3 * i + 24);
        e.fillText(this.game.playersKilled + " PLAYERS KILLED", .8 * t, .3 * i + 28 + 16);
        e.fillText(this.game.coinsCollected + " COINS COLLECTED", .8 * t, .3 * i + 32 + 16 + 16)
    } else if (3 < this.game.victory) {
        e.fillStyle = "white";
        e.font = "32px SmbWeb";
        e.textAlign = "center";
        e.fillText("TOO BAD #" + this.game.victory, .5 * t, 40)
    } else {
        e.fillStyle = "white";
        e.font = "24px SmbWeb";
        e.textAlign = "left";
        e.fillText(n ? n.displayName : DEFAULT_PLAYER_NAME, 8, 32);
        c = util.sprite.getSprite(a, o);
        l = "x" + (9 >= this.game.coins ? "0" + this.game.coins : this.game.coins);
        e.drawImage(a, c[0], c[1], Display.TEXRES, Display.TEXRES, 4, 40, 24, 24);
        e.fillText(l, 30, 64);
        c = util.sprite.getSprite(r, 13);
        h = e.measureText(l).width + 30;
        e.drawImage(r, c[0], c[1], Display.TEXRES, Display.TEXRES, 4 + h + 16, 40, 24, 24);
        e.fillText("x" + (9 >= this.game.lives ? "0" + this.game.lives : this.game.lives), 4 + h + 16 + 26, 64);
        if (this.game instanceof Game) {
            l = this.game.getGameTimer(this.game.touchMode);
            h = e.measureText(l).width;
            e.fillText(l, t / 2 - h / 2, 32);
            l = this.game.remain + (this.game.touchMode ? "" : " PLAYERS REMAIN");
            h = e.measureText(l).width;
            e.fillText(l, t - h - 8, 32)
        } else if (this.game instanceof LobbyGame) {
            var T = app.players.length;
            l = this.game.touchMode ? T : "P:" + T + "/" + app.maxPlayers + " V:" + (T < app.minPlayers ? "<" + app.minPlayers + "P" : Math.floor(100 * app.votes / T) + "/" + Math.floor(100 * app.voteRateToStart) + "%") + " T:" + app.ticks;
            h = e.measureText(l).width;
            e.fillText(l, t - h - 8, 32)
        }
        if (app.hurryingUp) {
            var y = Math.max(0, Math.floor((app.hurryUpTime - Date.now()) / 1e3));
            if (y % 2 == 1) {
                l = "HURRY UP!";
                h = e.measureText(l).width;
                e.fillText(l, t / 2 - h / 2, 64)
            }
            l = "" + y;
            h = e.measureText(l).width;
            e.fillText(l, t / 2 - h / 2, 96)
        }
        var S = 0;
        var O = function(i, s) {
            S += HudButtonOffset;
            c = util.sprite.getSprite(a, i[s ? 1 : 0]);
            e.drawImage(a, c[0], c[1], Display.TEXRES, Display.TEXRES, t - S, 40, 24, 24)
        };
        for (var f of ingameGuiButtons) {
            if (!f.padMode || this.game.input.pad.connected())
                O(f.iconIndex, f.settingName ? app.settings[f.settingName] : false)
        }
    }
}
;
Display.prototype.drawTouch = function() {
    if (this.game.touchMode) {
        var e = this.context
          , t = this.canvas.width
          , i = this.canvas.height;
        this.game.thumbOrigin && (e.fillStyle = "rgba(0,0,0,0.5)",
        e.fillRect(this.game.thumbOrigin.x - 42.5, this.game.thumbOrigin.y - 42.5, 85, 85),
        e.fillStyle = "rgba(255,255,255,1.0)",
        e.fillRect(this.game.thumbPos.x - 32.5, this.game.thumbPos.y - 32.5, 65, 65));
        e.fillStyle = "rgba(0,0,0,0.5)";
        e.fillRect(t - 85, i - 85, 85, 85);
        e.fillRect(t - 85, i - 170, 85, 85);
        e.fillStyle = this.game.touchRun ? "rgba(255,255,255,0.75)" : "rgba(0,0,0,0.5)";
        e.fillRect(t - 85, i - 255, 85, 85);
        e.fillStyle = "white";
        e.font = "65px SmbWeb";
        e.textAlign = "left";
        var s = "A"
          , o = e.measureText(s).width;
        e.fillText(s, t - o - 10, i - 10);
        s = "B";
        o = e.measureText(s).width;
        e.fillText(s, t - o - 7.5, i - 85 - 10);
        e.fillStyle = this.game.touchRun ? "black" : "white";
        s = "R";
        o = e.measureText(s).width;
        e.fillText(s, t - o - 7.5, i - 170 - 10)
    }
}
;
Display.prototype.drawLoad = function() {
    var e = this.context
      , t = this.canvas.width
      , i = this.canvas.height;
    e.fillStyle = "black";
    e.fillRect(0, 0, t, i);
    e.font = "32px SmbWeb";
    e.fillStyle = "white";
    e.textAlign = "center";
    e.fillText("Loading Resources...", .5 * t, .5 * i)
}
;
Display.prototype.destroy = function() {}
;
"use strict";
function World(e, t) {
    this.game = e;
    this.initial = t.initial;
    this.levels = [];
    for (var i = 0; i < t.world.length; i++)
        this.levels.push(new Level(e,t.world[i]))
}
World.prototype.step = function() {
    for (var e = 0; e < this.levels.length; e++)
        this.levels[e].step()
}
;
World.prototype.getInitialLevel = function() {
    return this.getLevel(this.initial)
}
;
World.prototype.getInitialZone = function() {
    var e = this.getLevel(this.initial);
    return this.getZone(e.id, e.initial)
}
;
World.prototype.getLevel = function(e) {
    for (var t = 0; t < this.levels.length; t++) {
        var i = this.levels[t];
        if (i.id === e)
            return i
    }
}
;
World.prototype.getZone = function(e, t) {
    for (var i = 0; i < this.levels.length; i++) {
        var s = this.levels[i];
        if (s.id === e)
            for (var o = 0; o < s.zones.length; o++) {
                var a = s.zones[o];
                if (a.id === t)
                    return a
            }
    }
}
;
function Level(e, t) {
    this.game = e;
    this.id = t.id;
    this.name = t.name;
    this.initial = t.initial;
    this.zones = [];
    for (var i = 0; i < t.zone.length; i++)
        this.zones.push(new Zone(e,this.id,t.zone[i]))
}
Level.prototype.step = function() {
    for (var e = 0; e < this.zones.length; e++)
        this.zones[e].step()
}
;
Level.prototype.getInitial = function() {
    for (var e = 0; e < this.zones.length; e++) {
        var t = this.zones[e];
        if (t.id === this.initial)
            return t
    }
}
;
Level.prototype.getWarp = function(e) {
    for (var t = 0; t < this.zones.length; t++)
        for (var i = this.zones[t], s = 0; s < i.warp.length; s++) {
            var o = i.warp[s];
            if (o.id === e)
                return {
                    level: this.id,
                    zone: i.id,
                    pos: shor2.decode(o.pos),
                    data: o.data
                }
        }
}
;
function Zone(e, t, i) {
    this.game = e;
    this.id = i.id;
    this.level = t;
    this.initial = i.initial;
    this.color = i.color;
    this.music = i.music ? i.music : "";
    if (this.music)
        app.audio.addMusic(this.music);
    this.fastMusic = this.music ? this.music.replace(".mp3", "_fast.mp3") : "";
    if (this.fastMusic)
        app.audio.addMusic(this.fastMusic);
    this.winmusic = i.winmusic ? i.winmusic : "";
    if (this.winmusic)
        app.audio.addMusic(this.winmusic);
    this.layers = i.layers || [];
    if (i.data) {
        for (var s = 0; s < this.layers.length && this.layers[s].z < 0; s++)
            ;
        this.layers.splice(s, 0, {
            z: 0,
            data: i.data
        })
    }
    this.mainLayer = undefined;
    for (var o of this.layers)
        if (o.z == 0) {
            this.mainLayer = o;
            break
        }
    this.obj = i.obj;
    this.warp = i.warp;
    this.bumped = [];
    this.effects = [];
    this.vines = [];
    this.sounds = []
}
Zone.prototype.update = function(e, t, i, s, o, a, r) {
    var n = this.dimensions().y - 1 - a
      , p = td32.decode(this.mainLayer.data[n][o]);
    p.definition.TRIGGER(e, t, p, i, s, o, a, r)
}
;
Zone.prototype.step = function() {
    for (var e = 0; e < this.bumped.length; e++) {
        var t = this.bumped[e]
          , i = td32.decode(this.mainLayer.data[t.y][t.x]);
        0 < i.bump ? this.mainLayer.data[t.y][t.x] = td32.bump(this.mainLayer.data[t.y][t.x], i.bump - 1) : this.bumped.splice(e--, 1)
    }
    for (var e = 0; e < this.effects.length; e++) {
        var t = this.effects[e];
        if (t.garbage) {
            this.effects.splice(e--, 1)
        } else {
            t.step()
        }
    }
    for (var e = 0; e < this.vines.length; e++) {
        var s = this.vines[e];
        if (0 > s.y) {
            this.vines.splice(e--, 1)
        } else {
            this.mainLayer.data[s.y--][s.x] = s.td
        }
    }
    for (var e = 0; e < this.sounds.length; e++)
        this.sounds[e].done() && this.sounds.splice(e--, 1);
    td32.update(this.game)
}
;
Zone.prototype.tile = function(e, t) {
    t = this.height() - 1 - t;
    return this.mainLayer.data[t][e]
}
;
Zone.prototype.bump = function(e, t) {
    var i = this.dimensions().y - 1 - t;
    this.mainLayer.data[i][e] = td32.bump(this.mainLayer.data[i][e], 15);
    this.bumped.push({
        x: e,
        y: i
    });
    this.play(e, t, "bump.mp3", .5, .04)
}
;
Zone.prototype.replace = function(e, t, i) {
    t = this.height() - 1 - t;
    this.mainLayer.data[t][e] = i
}
;
Zone.prototype.grow = function(e, t, i) {
    t = this.dimensions().y - 1 - t;
    this.vines.push({
        x: e,
        y: t,
        td: i
    })
}
;
Zone.prototype.break = function(e, t, i) {
    var s = this.dimensions().y - 1 - t
      , o = td32.decode16(this.mainLayer.data[s][e]);
    this.mainLayer.data[s][e] = i;
    this.effects.push(new _0x5296e0(vec2.make(e, t),o.index));
    this.play(e, t, "break.mp3", 1.5, .04)
}
;
Zone.prototype.coin = function(e, t) {
    this.dimensions();
    this.effects.push(new JumpingCoinEffect(vec2.make(e, t)))
}
;
Zone.prototype.play = function(e, t, i, s, o) {
    if (this.game.getZone() === this) {
        var a = app.audio.getSpatialAudio(i, s, o, "effect");
        a.play(vec2.make(e, t));
        this.sounds.push(a)
    }
}
;
Zone.prototype.width = function() {
    return this.layers[0].data[0].length
}
;
Zone.prototype.height = function() {
    return this.layers[0].data.length
}
;
Zone.prototype.dimensions = function() {
    return vec2.make(this.width(), this.height())
}
;
Zone.prototype.getTile = function(e) {
    var t = this.dimensions();
    e = vec2.copy(e);
    e.y = t.y - e.y - 1;
    return td32.decode(this.mainLayer.data[Math.max(0, Math.min(t.y, Math.floor(e.y)))][Math.max(0, Math.min(t.x, Math.floor(e.x)))])
}
;
Zone.prototype.getTiles = function(e, t) {
    var i = this.dimensions()
      , s = vec2.copy(e);
    s.y = i.y - s.y;
    var o = parseInt(Math.max(Math.min(Math.floor(s.x) - 1, i.x), 0));
    var a = parseInt(Math.max(Math.min(Math.ceil(s.x + t.x) + 1, i.x), 0));
    var r = parseInt(Math.max(Math.min(Math.floor(s.y - t.y) - 1, i.y), 0));
    var n = parseInt(Math.max(Math.min(Math.ceil(s.y) + 1, i.y), 0));
    var p = [];
    for (; r < n; r++)
        for (var c = o; c < a; c++) {
            var l = td32.decode(this.mainLayer.data[r][c]);
            l.pos = vec2.make(c, i.y - 1 - r);
            l.ind = [r, c];
            p.push(l)
        }
    return p
}
;
Zone.prototype.getEffects = function(e, t) {
    for (var i = 0; i < this.effects.length; i++)
        this.effects[i].draw(e, t)
}
;
"use strict";
function Game(e) {
    document.getElementById("privLobby").style.display = "none";
    document.getElementById("settings-show-privLobby").style.display = "none";
    this.container = document.getElementById("game");
    this.canvas = document.getElementById("game-canvas");
    this.input = new Input(this,this.canvas);
    this.display = new Display(this,this.container,this.canvas,e.resource);
    this.display.ensureSkin(app.net.skin);
    if (!(this instanceof LobbyGame) && !(this instanceof JailGame) && app.charMusic && app.net.skin in SKIN_MUSIC_URL) {
        app.settings.muteMusic = true
    }
    this.objects = [];
    this.team = this.pid = undefined;
    this.sounds = [];
    this.load(e);
    this.lastDraw = this.frame = 0;
    this.delta = util.time.now();
    this.buffer = [[], []];
    this.out = [];
    this.ready = false;
    this.startTimer = -1;
    this.touchFull = this.touchMode = false;
    this.thumbPos = this.thumbOrigin = this.thumbId = undefined;
    this.touchRun = false;
    this.fillSS = this.cullSS = undefined;
    this.victory = this.coins = this.lives = this.remain = 0;
    this.victoryMusic = false;
    this.gameOverTimer = this.rate = 0;
    this.gameOver = false;
    var t = this.getZone().dimensions();
    this.display.camera.position(vec2.scale(t, .5));
    this.levelWarpTimer = 0;
    this.levelWarpId = undefined;
    this.gameoverReloading = false;
    this.padReturnToLobby = false;
    this.playersKilled = 0;
    this.coinsCollected = 0;
    this.gameTimerStopped = null;
    this.gameTimerStopTime = 0;
    this.poleTimes = 0;
    var i = this;
    this.frameReq = requestAnimFrameFunc.call(window, (function() {
        i.draw()
    }
    ));
    this.loopReq = setTimeout((function() {
        i.loop()
    }
    ), 2)
}
Game.TICK_RATE = 33;
Game.FDLC_TARGET = 3;
Game.FDLC_MAX = Game.FDLC_TARGET + 2;
Game.LEVEL_WARP_TIME = 60;
Game.GAME_OVER_TIME = 120;
Game.COINS_TO_LIFE = 30;
Game.prototype.load = function(e) {
    if (this instanceof LobbyGame)
        app.menu.main.winElement.style.display = "";
    else
        app.menu.main.winElement.style.display = "none";
    app.menu.load.show();
    this.world = new World(this,e);
    var t = false;
    if (e.soundOverridePath) {
        app.audio.setCustomSoundPrefix(e.soundOverridePath);
        t = true
    }
    if (e.musicOverridePath) {
        app.audio.setCustomMusicPrefix(e.musicOverridePath);
        t = true
    }
    if (t)
        app.audio.initWebAudio(app);
    var i = function(e, t) {
        return Object.keys(e).filter(i=>e[i].tilesets.length == 0 || e[i].tilesets.includes(t)).reduce((t,i)=>(t[i] = e[i],
        t), {})
    };
    TILE_ANIMATION_FILTERED = i(TILE_ANIMATION, e.resource.filter(e=>e.id == "map")[0].src);
    OBJ_ANIMATION_FILTERED = i(OBJ_ANIMATION, e.resource.filter(e=>e.id == "obj")[0].src);
    this.forceAutoMove = e.autoMove;
    app.autoMove = e.autoMove;
    for (var s = 0; s < this.world.levels.length; s++) {
        var o = this.world.levels[s];
        for (var a = 0; a < o.zones.length; a++) {
            var r = o.zones[a];
            for (var n = 0; n < r.obj.length; n++) {
                var p = r.obj[n];
                var c = p.pos;
                var l = [c];
                for (var h = 0; h < p.param.length; h++) {
                    l.push(p.param[h])
                }
                if (r.maxOid === undefined || c > r.maxOid)
                    r.maxOid = c;
                this.createObject(p.type, o.id, r.id, shor2.decode(p.pos), l)
            }
        }
    }
}
;
Game.prototype.send = function(e) {
    app.net.send(e)
}
;
Game.prototype.handlePacket = function(e) {
    switch (e.type) {
    case "g12":
        {
            this.updatePlayerList(e);
            return true
        }
    case "g13":
        {
            this.gameStartTimer(e);
            return true
        }
    default:
        {
            return false
        }
    }
}
;
Game.prototype.updatePlayerList = function(e) {
    app.players = e.players;
    app.enrichPlayers();
    if (undefined === this.pid) {
        return
    }
    this.updateTeam();
    if (this.isDev)
        app.menu.game.updatePlayerList(app.players)
}
;
Game.prototype.getGameTimer = function(e) {
    if (this.gameTimerStopped !== null)
        return this.gameTimerStopped;
    if (this.startDelta === undefined)
        return e ? "00:00" : "00:00:000";
    var t = util.time.now() - this.poleTimes;
    var i = t - this.startDelta;
    var s = Math.floor(i / 6e4);
    var o = Math.floor(i / 1e3) % 60;
    var a = i % 1e3;
    if (s < 10)
        s = "0" + s;
    if (o < 10)
        o = "0" + o;
    if (a < 10)
        a = "00" + a;
    else if (a < 100)
        a = "0" + a;
    return s + ":" + o + (e ? "" : ":" + a)
}
;
Game.prototype.resumeGameTimer = function() {
    if (this.gameTimerStopped === null)
        return;
    this.gameTimerStopped = null;
    this.poleTimes += util.time.now() - this.gameTimerStopTime
}
;
Game.prototype.stopGameTimer = function() {
    if (this.gameTimerStopped !== null)
        return;
    this.gameTimerStopped = this.getGameTimer();
    this.gameTimerStopTime = util.time.now()
}
;
Game.prototype.gameStartTimer = function(e) {
    if (this.startTimer < 0) {
        this.play("alert.mp3", 1, 0)
    }
    if (e.time > 0) {
        this.startTimer = e.time;
        this.remain = app.players.length
    } else {
        this.doStart()
    }
}
;
Game.prototype.updateTeam = function() {
    var e = app.getPlayerInfo(this.pid);
    if (undefined === e) {
        return
    }
    for (var t = 0; t < app.players.length; t++) {
        var i = app.players[t];
        if (i.id !== this.pid) {
            var s = this.getGhost(i.id);
            s && (s.name = i.displayName)
        }
    }
}
;
Game.prototype.handleBinary = function(e) {
    var t = NETX.decode(e);
    if (!this.ready) {
        this.doUpdate(t);
        return
    }
    this.updatePacket(t)
}
;
Game.prototype.updatePacket = function(e) {
    this.buffer.push(e);
    while (this.buffer.length > Game.FDLC_MAX) {
        var t = this.buffer.shift();
        this.doUpdate(t)
    }
}
;
Game.prototype.doUpdate = function(e) {
    for (var t = 0; t < e.length; t++) {
        var i = e[t];
        switch (i.designation) {
        case 2:
            {
                this.doNET002(i);
                break
            }
        case 16:
            {
                this.doNET010(i);
                break
            }
        case 17:
            {
                this.doNET011(i);
                break
            }
        case 18:
            {
                this.doNET012(i);
                break
            }
        case 19:
            {
                this.doNET013(i);
                break
            }
        case 23:
            {
                this.doNET017(i);
                break
            }
        case 24:
            {
                this.doNET018(i);
                break
            }
        case 32:
            {
                this.doNET020(i);
                break
            }
        case 33:
            {
                this.doNET021(i);
                break
            }
        case 34:
            {
                this.doNET022(i);
                break
            }
        case 48:
            {
                this.doNET030(i);
                break
            }
        }
    }
}
;
Game.prototype.doNET002 = function(e) {
    this.pid = e.pid;
    this.skin = e.skin;
    this.isDev = e.isDev;
    this.ready = true;
    app.menu.game.show()
}
;
Game.prototype.doNET010 = function(e) {
    if (e.pid === this.pid) {
        return
    }
    if (this.getGhost(e.pid))
        return;
    var t = this.createObject(PlayerObject.ID, e.level, e.zone, shor2.decode(e.pos), [e.pid, e.skin, e.isDev]);
    t.setState(PlayerObject.SNAME.GHOST);
    if (e.isDev)
        t.name = app.getPlayerInfo(e.pid).name;
    var i = app.getPlayerInfo(e.pid);
    if (i && i.id !== this.pid && i.team === this.team) {
        var s = this.getGhost(i.id);
        if (s)
            s.name = i.displayName
    }
}
;
Game.prototype.doNET011 = function(e) {
    e.pid !== this.pid && ((e = this.getGhost(e.pid)) && e.kill(),
    this.remain = this.getRemain())
}
;
Game.prototype.doNET012 = function(e) {
    if (e.pid !== this.pid) {
        var t = this.getGhost(e.pid);
        if (t) {
            t.lastTime = Date.now();
            t.lastData = e
        }
    }
}
;
Game.prototype.doNET013 = function(e) {
    e.pid !== this.pid && this.getGhost(e.pid).trigger(e.type)
}
;
Game.prototype.doNET017 = function(e) {
    this.playersKilled++
}
;
Game.prototype.doNET018 = function(e) {
    console.log(e);
    if (!(0 >= e.result)) {
        e.pid === this.pid ? this.rate = e.extra : 0 !== this.rate && e.result++;
        var t = this.getGhost(e.pid);
        if (t) {
            var i = this.getText(t.level, t.zone, e.result.toString());
            if (i) {
                var s = app.getPlayerInfo(e.pid).displayName;
                this.createObject(TextObject.ID, i.level, i.zone, vec2.add(i.pos, vec2.make(0, -3)), [undefined, -.1, .25, "#FFFFFF", s])
            }
        }
        if (e.pid === this.pid) {
            var o = this.getPlayer();
            if (o) {
                o.axe(e.result);
                this.victory = e.result;
                var a = this;
                setTimeout((function() {
                    document.getElementById("return").style.display = "block";
                    a.padReturnToLobby = true
                }
                ), 3e3)
            }
        }
    }
}
;
Game.prototype.doNET020 = function(e) {
    var t = e.pid === this.pid;
    if (!(t && 160 > e.type)) {
        var i = this.getObject(e.level, e.zone, e.oid);
        i && i.update(e.type)
    }
}
;
Game.prototype.doNET021 = function(e) {
    this.addCoin(e.type, false)
}
;
Game.prototype.doNET022 = function(e) {
    var t = this.getPlayer();
    var i = this.getZone(t.level, t.zone);
    i.effects.push(new RisingLabelEffect(t.pos,"coins: " + e.coins))
}
;
Game.prototype.doNET030 = function(e) {
    var t = e.pid === this.pid;
    if (!t)
        this.world.getZone(e.level, e.zone).update(this, e.pid, e.level, e.zone, e.pos.x, e.pos.y, e.type)
}
;
Game.prototype.doStart = function() {
    if (this.pid === undefined)
        return;
    this.startTimer = -1;
    this.startDelta = util.time.now();
    // this.lives = 1;
    this.doSpawn()
}
;
Game.prototype.doDetermine = function() {
    var e = this.input.pop();
    0 < e.touch.length ? this.touchMode = true : 0 < e.keyboard.length && (this.touchMode = false);
    this.touchMode ? this.doTouch(e) : this.doInput(e)
}
;
Game.prototype.doTouch = function(e) {
    var t = this.input
      , i = this.getPlayer();
    this.display.camera.scale = 2;
    if (!this.touchFull || window.innerHeight != screen.height) {
        var s = document.documentElement;
        s.requestFullscreen ? document.body.requestFullscreen() : s.mozRequestFullScreen ? s.mozRequestFullScreen() : s.webkitRequestFullscreen ? s.webkitRequestFullscreen() : s.msRequestFullscreen && s.msRequestFullscreen();
        this.touchFull = true
    }
    var o = this;
    var a = this.display.canvas.width;
    var r = this.display.canvas.height;
    var n = false;
    var p = false;
    var c = 0;
    var l = [{
        pos: vec2.make(a - 85, r - 85),
        dim: vec2.make(85, 85),
        press: function() {
            n = true
        }
    }, {
        pos: vec2.make(a - 85, r - 170),
        dim: vec2.make(85, 85),
        press: function() {
            p = true
        }
    }, {
        pos: vec2.make(a - 85, r - 255),
        dim: vec2.make(85, 85),
        click: function() {
            o.touchRun = !o.touchRun
        }
    }];
    for (var h, d = 0; d < t.touch.pos.length; d++) {
        var m = t.touch.pos[d];
        if (this.thumbId === m.id)
            h = m,
            this.thumbId = m.id,
            this.thumbPos = m;
        else
            for (d = 0; d < l.length; d++) {
                var b = l[d];
                squar.inside(m, b.pos, b.dim) && b.press && b.press()
            }
    }
    for (d = 0; d < e.touch.length; d++) {
        m = e.touch[d];
        t = false;
        for (d = 0; d < l.length; d++)
            if (b = l[d],
            squar.inside(m, b.pos, b.dim)) {
                t = true;
                b.click && b.click();
                break
            }
        h || t || (h = m,
        this.thumbId = m.id,
        this.thumbPos = this.thumbOrigin = m)
    }
    var u;
    if (h) {
        var E = Math.min(64, vec2.distance(this.thumbPos, this.thumbOrigin));
        var T = vec2.normalize(vec2.subtract(this.thumbPos, this.thumbOrigin));
        u = vec2.scale(T, E / 64);
        this.thumbPos = vec2.add(this.thumbOrigin, vec2.scale(T, E))
    } else
        this.thumbPos = this.thumbOrigin = this.thumbId = undefined;
    i && T ? (T = [0, 0],
    .33 < u.x && T[0]++,
    -.33 > u.x && T[0]--,
    .33 < u.y && T[1]--,
    -.33 > u.y && T[1]++,
    i.input(T, n, this.touchRun ? !p : p)) : i && i.input([0, 0], n, this.touchRun ? !p : p)
}
;
Game.prototype.doInput = function(e) {
    this.input.pad.update();
    var t = this.input
      , i = this.input.mouse
      , s = this.input.keyboard.keys
      , o = this.input.pad;
    this.inx27 = s[27];
    var a = this.getPlayer();
    if (a) {
        var r = [0, 0];
        (s[t.assignK.up] || o.button(t.assignG.up) || -.1 > o.ax.y) && r[1]++;
        (s[t.assignK.down] || o.button(t.assignG.down) || .1 < o.ax.y) && r[1]--;
        (s[t.assignK.left] || o.button(t.assignG.left) || -.1 > o.ax.x) && r[0]--;
        (s[t.assignK.right] || o.button(t.assignG.right) || .1 < o.ax.x) && r[0]++;
        var n = s[t.assignK.a] || o.button(t.assignG.a)
          , p = s[t.assignK.b] || o.button(t.assignG.b)
          , c = s[t.assignK.ta] || o.button(t.assignG.ta);
        i.spin && this.display.camera.zoom(i.spin);
        if (this.padReturnToLobby && n) {
            Cookies.set("go_to_lobby", "1");
            location.reload();
            this.padReturnToLobby = false
        }
        a.input(r, n, p, c);
        var l = this;
        var h = this.display.canvas.width;
        for (var d = 0; d < e.mouse.length; d++) {
            var i = e.mouse[d];
            if (0 === i.btn) {
                var m = 0;
                for (var b of ingameGuiButtons) {
                    if (!b.padMode || this.input.pad.connected()) {
                        m += HudButtonOffset;
                        if (b.click && squar.inside(i.pos, vec2.make(h - m, 40), vec2.make(24, 24)))
                            b.click()
                    }
                }
            }
        }
    }
}
;
Game.prototype.doStep = function() {
    var e = this.getPlayer();
    if (e && undefined !== this.levelWarpId && 0 < this.levelWarpTimer && 1 > --this.levelWarpTimer) {
        var t = this.world.getLevel(this.levelWarpId).getInitial();
        e.level = t.level;
        e.zone = t.id;
        e.pos = shor2.decode(t.initial);
        e.autoTarget = undefined;
        e.grounded = false;
        e.moveSpeed = 0;
        e.fallSpeed = 0;
        e.show();
        e.invuln();
        this.levelWarpId = undefined;
        this.resumeGameTimer()
    }
    e && this.cullSS && !vec2.equals(e.pos, this.cullSS) && this.out.push(NET015.encode());
    e && this.fillSS && this.fillSS !== e.fallSpeed && this.out.push(NET015.encode());
    for (var i = 0; i < this.objects.length; i++) {
        var s = this.objects[i];
        s.step();
        s.garbage && this.objects.splice(i--, 1)
    }
    this.cullSS = e ? vec2.copy(e.pos) : undefined;
    this.fillSS = e ? e.fallSpeed : undefined;
    var o = this.getZone();
    e && !e.dead && this.display.camera.position(vec2.make(e.pos.x, .5 * o.dimensions().y));
    this.world.step();
    if (app.hurryingUp && app.hurryUpTime <= Date.now() && 0 >= this.levelWarpTimer) {
        app.hurryingUp = false;
        this.lives = 0;
        if (e)
            e.kill()
    }
    for (var i = 0; i < this.sounds.length; i++)
        this.sounds[i].done() && this.sounds.splice(i--, 1);
    this.doMusic();
    app.audio.update();
    if (undefined === this.startDelta || this.gameOver || e) {
        if (this.gameOver) {
            ++this.gameOverTimer;
            if (this.gameOverTimer > Game.GAME_OVER_TIME && !this.gameoverReloading && !(this.game instanceof JailGame)) {
                Cookies.set("go_to_lobby", "1");
                location.reload();
                this.gameoverReloading = true
            }
        } else
            this.gameOverTimer = 0
    } else if (0 < this.lives && 0 >= this.victory) {
        var a = this.getZone().level;
        this.doSpawn();
        this.levelWarp(a);
        this.lives--
    } else if (45 < ++this.gameOverTimer && !(this instanceof JailGame)) {
        this.gameOver = true;
        this.gameOverTimer = 0
    }
    this.lastDraw = this.frame;
    this.frame++
}
;
Game.prototype.doSpawn = function() {
    if (!this.getPlayer()) {
        var e = this.getZone()
          , t = e.initial;
        var i = this.createObject(PlayerObject.ID, e.level, e.id, shor2.decode(t), [this.pid, this.skin, this.isDev]);
        this.out.push(NET010.encode(e.level, e, t));
        if (app.net.gameMode === 1 && !(this instanceof LobbyGame) && !(this instanceof JailGame)) {
            i.tfm(2);
            i.rate = 113
        }
    }
    this.updateTeam()
}
;
Game.prototype.doMusic = function() {
    var e = this.getPlayer()
      , t = this.getZone();
    if (this.gameOver) {
        app.audio.setMusic("gameover.mp3", false)
    } else if (e && e.dead)
        app.audio.setMusic("dead.mp3", false);
    else if (e && e.autoTarget && 0 >= this.victory)
        app.audio.setMusic(t.winmusic || "level.mp3", false);
    else if (0 < this.victory && !this.victoryMusic) {
        app.audio.setMusic(t.winmusic || "castle.mp3", false);
        this.victoryMusic = true
    } else if (0 < this.victory && 4 > this.victory && this.victoryMusic && !app.audio.music.playing) {
        app.audio.setMusic("victory.mp3", false)
    } else if (app.hurryingUp) {
        if (Date.now() - app.hurryUpStart < 1e3 * app.audio.getAudioLength("hurry.mp3")) {
            app.audio.setMusic("hurry.mp3", false)
        } else {
            if ("" !== t.fastMusic)
                app.audio.setMusic(t.fastMusic, true);
            else
                app.audio.stopMusic()
        }
    } else if (e && 0 >= this.levelWarpTimer && undefined !== this.startDelta && !this.victoryMusic) {
        if ("" !== t.music)
            app.audio.setMusic(t.music, true);
        else
            app.audio.stopMusic()
    }
}
;
Game.prototype.doPush = function() {
    var e = this.getPlayer();
    e && !e.dead && this.out.push(NET012.encode(e.level, e.zone, e.pos, e.sprite.ID, e.reverse));
    e = MERGE_BYTE(this.out);
    this.out = [];
    app.net.sendBinary(e)
}
;
Game.prototype.createObject = function(e, t, i, s, o) {
    var a = [undefined, this, t, i, s];
    for (var r = 0; r < o.length; r++)
        a.push(o[r]);
    var n = GameObject.OBJECT(e);
    if (!n)
        return undefined;
    var p = new (Function.prototype.bind.apply(n, a));
    this.objects.push(p);
    return p
}
;
Game.prototype.getObject = function(e, t, i) {
    for (var s = 0; s < this.objects.length; s++) {
        var o = this.objects[s];
        if (undefined !== o.oid && o.level === e && o.zone === t && o.oid === i)
            return o
    }
}
;
Game.prototype.getFlag = function(e, t) {
    for (var i = 0; i < this.objects.length; i++) {
        var s = this.objects[i];
        if (s.level === e && s.zone === t && s instanceof FlagpoleObject)
            return s
    }
}
;
Game.prototype.getAxe = function(e, t) {
    for (var i = 0; i < this.objects.length; i++) {
        var s = this.objects[i];
        if (s.level === e && s.zone === t && s instanceof AxeObject)
            return s
    }
}
;
Game.prototype.getText = function(e, t, i) {
    for (var s = 0; s < this.objects.length; s++) {
        var o = this.objects[s];
        if (o && o.level === e && o.zone === t && o instanceof TextObject && o.text === i.toString())
            return o
    }
}
;
Game.prototype.getPlatforms = function() {
    for (var e = this.getZone(), t = [], i = 0; i < this.objects.length; i++) {
        var s = this.objects[i];
        (s instanceof MovingPlatformObject || s instanceof BusPlatformObject) && s.level === e.level && s.zone === e.id && t.push(s)
    }
    return t
}
;
Game.prototype.getGhost = function(e) {
    for (var t = 0; t < this.objects.length; t++) {
        var i = this.objects[t];
        if (undefined !== i.pid && i.pid === e)
            return i
    }
}
;
Game.prototype.getPlayer = function() {
    for (var e = 0; e < this.objects.length; e++) {
        var t = this.objects[e];
        if (undefined !== t.pid && t.pid === this.pid)
            return t
    }
}
;
Game.prototype.getZone = function() {
    var e = this.getPlayer();
    return e ? this.lastZone = this.world.getZone(e.level, e.zone) : this.lastZone ? this.lastZone : this.world.getInitialZone()
}
;
Game.prototype.getRemain = function() {
    for (var e = 0, t = 0; t < app.players.length; t++) {
        var i = this.getGhost(app.players[t].id);
        i && !i.dead && e++
    }
    return e
}
;
Game.prototype.play = function(e, t, i) {
    var s = app.audio.getAudio(e, t, i, "effect");
    s.play();
    this.sounds.push(s)
}
;
Game.prototype.levelWarp = function(e) {
    this.levelWarpId = e;
    this.levelWarpTimer = Game.LEVEL_WARP_TIME;
    this.getPlayer().hide()
}
;
Game.prototype.addCoin = function(e, t) {
    if (t) {
        if (e)
            this.play("gold.mp3", 1, 0);
        else {
            this.play("coin.mp3", .4, 0)
        }
    } else {
        this.coinsCollected += 1;
        this.coins = Math.min(99, this.coins + 1);
        this.coins >= Game.COINS_TO_LIFE && (this.lifeage(),
        this.coins = 0)
    }
}
;
Game.prototype.lifeage = function() {
    this.lives = Math.min(99, this.lives + 1);
    this.play("life.mp3", 1, 0)
}
;
firstLoop = true;
Game.prototype.loop = function() {
    try {
        if (this.ready && undefined !== this.startDelta) {
            var e = util.time.now()
              , t = parseInt((e - this.startDelta) / Game.TICK_RATE);
            if (t > this.frame) {
                for (var i = true; this.buffer.length > Game.FDLC_TARGET || i && 0 < this.buffer.length; ) {
                    var s = this.buffer.shift();
                    this.doUpdate(s);
                    i = false
                }
                for (this.doDetermine(); t > this.frame; )
                    this.doStep();
                this.doPush();
                this.delta = e
            }
        }
    } catch (e) {
        console.error(e)
    }
    var o = this;
    if (!PERFORMANCE_HACK) {
        this.loopReq = setTimeout((function() {
            o.loop()
        }
        ), 2)
    }
}
;
Game.prototype.draw = function() {
    if (PERFORMANCE_HACK) {
        this.loop()
    }
    this.lastDraw === this.frame && undefined !== this.startDelta || this.display.draw();
    var e = this;
    this.frameReq = requestAnimFrameFunc.call(window, (function() {
        e.draw()
    }
    ))
}
;
Game.prototype.destroy = function() {
    _0x2a6b41.call(window, this.frameReq);
    if (!PERFORMANCE_HACK) {
        clearTimeout(this.loopReq)
    }
    this.input.destroy();
    this.display.destroy();
    for (var e of this.objects)
        e.destroy && e.destroy()
}
;
"use strict";
function LobbyGame(e) {
    Game.call(this, e);
    this.lobbyTimer = 90;
    if (app.audioElement !== undefined) {
        app.audioElement.setAttribute("src", app.charMusic && app.net.skin in SKIN_MUSIC_URL ? SKIN_MUSIC_URL[app.net.skin] : LOBBY_MUSIC_URL);
        app.audioElement.load;
        app.audioElement.volume = .18;
        app.audioElement.loop = true;
        if (!app.settings.muteMusic)
            app.audioElement.play()
    }
}
LobbyGame.prototype.load = Game.prototype.load;
LobbyGame.prototype.send = Game.prototype.send;
LobbyGame.prototype.handlePacket = Game.prototype.handlePacket;
LobbyGame.prototype.updatePlayerList = Game.prototype.updatePlayerList;
LobbyGame.prototype.gameStartTimer = function() {}
;
LobbyGame.prototype.updateTeam = Game.prototype.updateTeam;
LobbyGame.prototype.handleBinary = Game.prototype.handleBinary;
LobbyGame.prototype.updatePacket = Game.prototype.updatePacket;
LobbyGame.prototype.doUpdate = Game.prototype.doUpdate;
LobbyGame.prototype.doNET002 = Game.prototype.doNET002;
LobbyGame.prototype.doNET010 = Game.prototype.doNET010;
LobbyGame.prototype.doNET011 = Game.prototype.doNET011;
LobbyGame.prototype.doNET012 = Game.prototype.doNET012;
LobbyGame.prototype.doNET013 = Game.prototype.doNET013;
LobbyGame.prototype.doNET020 = Game.prototype.doNET020;
LobbyGame.prototype.doNET021 = Game.prototype.doNET021;
LobbyGame.prototype.doNET030 = Game.prototype.doNET030;
LobbyGame.prototype.doStart = Game.prototype.doStart;
LobbyGame.prototype.doDetermine = Game.prototype.doDetermine;
LobbyGame.prototype.doInput = Game.prototype.doInput;
LobbyGame.prototype.doTouch = Game.prototype.doTouch;
LobbyGame.prototype.doStep = function() {
    Game.prototype.doStep.call(this)
}
;
LobbyGame.prototype.doSpawn = Game.prototype.doSpawn;
LobbyGame.prototype.doMusic = Game.prototype.doMusic;
LobbyGame.prototype.doPush = Game.prototype.doPush;
LobbyGame.prototype.createObject = Game.prototype.createObject;
LobbyGame.prototype.getObject = Game.prototype.getObject;
LobbyGame.prototype.getFlag = Game.prototype.getFlag;
LobbyGame.prototype.getPlatforms = Game.prototype.getPlatforms;
LobbyGame.prototype.getGhost = Game.prototype.getGhost;
LobbyGame.prototype.getPlayer = Game.prototype.getPlayer;
LobbyGame.prototype.getZone = Game.prototype.getZone;
LobbyGame.prototype.getRemain = Game.prototype.getRemain;
LobbyGame.prototype.play = Game.prototype.play;
LobbyGame.prototype.levelWarp = Game.prototype.levelWarp;
LobbyGame.prototype.addCoin = Game.prototype.addCoin;
LobbyGame.prototype.lifeage = Game.prototype.lifeage;
LobbyGame.prototype.loop = function() {
    0 < this.lobbyTimer ? this.lobbyTimer-- : undefined === this.startDelta && this.doStart();
    Game.prototype.loop.call(this)
}
;
LobbyGame.prototype.draw = Game.prototype.draw;
LobbyGame.prototype.destroy = function() {
    Game.prototype.destroy.call(this);
    if (app.audioElement !== undefined && !(app.charMusic && app.net.skin in SKIN_MUSIC_URL)) {
        app.audioElement.pause();
        app.audioElement.remove();
        app.audioElement = undefined
    }
}
;
"use strict";
function JailGame(e) {
    Game.call(this, e);
    this.lobbyTimer = 90
}
JailGame.prototype.load = Game.prototype.load;
JailGame.prototype.send = Game.prototype.send;
JailGame.prototype.handlePacket = Game.prototype.handlePacket;
JailGame.prototype.updatePlayerList = Game.prototype.updatePlayerList;
JailGame.prototype.gameStartTimer = function() {}
;
JailGame.prototype.updateTeam = Game.prototype.updateTeam;
JailGame.prototype.handleBinary = Game.prototype.handleBinary;
JailGame.prototype.updatePacket = Game.prototype.updatePacket;
JailGame.prototype.doUpdate = Game.prototype.doUpdate;
JailGame.prototype.doNET002 = Game.prototype.doNET002;
JailGame.prototype.doNET010 = Game.prototype.doNET010;
JailGame.prototype.doNET011 = Game.prototype.doNET011;
JailGame.prototype.doNET012 = Game.prototype.doNET012;
JailGame.prototype.doNET013 = Game.prototype.doNET013;
JailGame.prototype.doNET020 = Game.prototype.doNET020;
JailGame.prototype.doNET021 = Game.prototype.doNET021;
JailGame.prototype.doNET030 = Game.prototype.doNET030;
JailGame.prototype.doStart = Game.prototype.doStart;
JailGame.prototype.doDetermine = Game.prototype.doDetermine;
JailGame.prototype.doInput = Game.prototype.doInput;
JailGame.prototype.doTouch = Game.prototype.doTouch;
JailGame.prototype.doStep = function() {
    Game.prototype.doStep.call(this)
}
;
JailGame.prototype.doSpawn = function() {}
;
JailGame.prototype.doMusic = Game.prototype.doMusic;
JailGame.prototype.doPush = Game.prototype.doPush;
JailGame.prototype.createObject = Game.prototype.createObject;
JailGame.prototype.getObject = Game.prototype.getObject;
JailGame.prototype.getFlag = Game.prototype.getFlag;
JailGame.prototype.getPlatforms = Game.prototype.getPlatforms;
JailGame.prototype.getGhost = Game.prototype.getGhost;
JailGame.prototype.getPlayer = Game.prototype.getPlayer;
JailGame.prototype.getZone = Game.prototype.getZone;
JailGame.prototype.getRemain = Game.prototype.getRemain;
JailGame.prototype.play = Game.prototype.play;
JailGame.prototype.levelWarp = Game.prototype.levelWarp;
JailGame.prototype.addCoin = Game.prototype.addCoin;
JailGame.prototype.lifeage = Game.prototype.lifeage;
JailGame.prototype.loop = function() {
    0 < this.lobbyTimer ? this.lobbyTimer-- : undefined === this.startDelta && this.doStart();
    Game.prototype.loop.call(this)
}
;
JailGame.prototype.draw = Game.prototype.draw;
JailGame.prototype.destroy = Game.prototype.destroy;
"use strict";
function App() {
    this.menu = new Menu;
    this.net = new Network;
    this.goToLobby = Cookies.get("go_to_lobby") === "1";
    if (this.goToLobby)
        Cookies.remove("go_to_lobby");
    this.session = Cookies.get("session");
    this.audioElement = document.createElement("audio");
    this.audioElement.setAttribute("src", MENU_MUSIC_URL);
    this.audioElement.load;
    this.audioElement.volume = .2;
    this.audioElement.loop = true;
    this.hurryingUp = false;
    this.hurryUpStart = null;
    this.hurryUpTime = null;
    this.overrideSkinImg = "overrideSkinImg"in localStorage ? makeImageFromData(localStorage["overrideSkinImg"]) : undefined;
    this.overrideMapImg = "overrideMapImg"in localStorage ? makeImageFromData(localStorage["overrideMapImg"]) : undefined;
    this.overrideObjImg = "overrideObjImg"in localStorage ? makeImageFromData(localStorage["overrideObjImg"]) : undefined;
    this.autoMove = Cookies.get("autoMove") === "true";
    this.settings = {};
    this.settings.muteMusic = 1 === parseInt(Cookies.get("music"));
    this.settings.muteSound = 1 === parseInt(Cookies.get("sound"));
    this.settings.disableText = 1 === parseInt(Cookies.get("text"));
    this.settings.forcemodel = 1 === parseInt(Cookies.get("forcemodel"));
    this.settings.showSettings = false;
    this.audio = new Audio(this);
    this.players = [];
    if (1 !== parseInt(Cookies.get("music")))
        this.audioElement.play();
    this.statusUpdater = null;
    this.charMusic = Cookies.get("char_music") === "1"
}
App.prototype.init = function() {
    document.getElementById("log").style.display = "none";
    document.getElementById("link-patch").style.display = "";
    document.getElementById("main-number").style.display = "";
    if (!this.goToLobby)
        this.menu.disclaim.show();
    var e = this;
    setTimeout((function() {
        e.menu.load.show();
        if (e.goToLobby && e.session === undefined) {
            e.menu.main.updateStatsBar();
            var t = Cookies.get("name");
            var i = Cookies.get("team");
            var s = Cookies.get("priv");
            var o = Cookies.get("skin");
            var a = Cookies.get("gamemode");
            e.join(t ? t : "", i ? i : "", s === "true", o ? parseInt(o) : 0, a ? parseInt(a) : 0);
            return
        }
        e.menu.main.show()
    }
    ), this.goToLobby ? 100 : DISCLAIMER_SCREEN_TIMEOUT)
}
;
App.prototype.load = function(e) {
    if (this.game instanceof Game)
        this.menu.error.show("State error. Game already loaded.");
    else
        switch (this.game instanceof LobbyGame && this.game.destroy(),
        e.type) {
        case "game":
            this.game = new Game(e);
            break;
        case "lobby":
            this.game = new LobbyGame(e);
            break;
        case "jail":
        case "maintenance":
            this.game = new JailGame(e);
            break;
        default:
            this.menu.error.show("Critical error! Game file missing type!")
        }
}
;
App.prototype.ingame = function() {
    return !!this.game
}
;
App.prototype.join = function(e, t, i, s, o) {
    if (this.audioElement !== undefined)
        this.audioElement.pause();
    this.ingame() ? this.menu.error.show("An error occured while starting game...") : (this.menu.load.show(),
    this.net.connect([Network.CONNECTTYPE.GUEST, e, t, i, s, o]))
}
;
App.prototype.login = function(e, t) {
    this.menu.load.show(),
    this.net.connect([Network.CONNECTTYPE.LOGIN, e, t])
}
;
App.prototype.logout = function(e, t) {
    this.net.send({
        type: "llo"
    })
}
;
App.prototype.requestCaptcha = function() {
    this.menu.load.show(),
    this.net.connect([Network.CONNECTTYPE.REQ_CAPTCHA])
}
;
App.prototype.register = function(e, t, i) {
    this.menu.load.show(),
    this.net.connect([Network.CONNECTTYPE.REGISTER, e, t, i])
}
;
App.prototype.resumeSession = function(e) {
    this.menu.load.show(),
    this.net.connect([Network.CONNECTTYPE.RESUME, e])
}
;
App.prototype.close = function() {
    this.menu.load.show();
    this.ingame() && this.net.close();
    location.reload()
}
;
App.prototype.getPlayerInfo = function(e) {
    for (var t = 0; t < app.players.length; t++) {
        var i = app.players[t];
        if (i.id === e)
            return i
    }
}
;
App.prototype.hurryUp = function(e) {
    if (!this.hurryingUp) {
        this.hurryingUp = true;
        this.hurryUpStart = Date.now();
        this.hurryUpTime = this.hurryUpStart + e.time * 1e3
    }
}
;
function getPlayerDisplayName(e) {
    return (e.isDev ? "[DEV]" : "") + (e.isGuest ? "[G]" : "") + e.name
}
App.prototype.enrichPlayers = function(e) {
    this.players.map(e=>{
        e.displayName = getPlayerDisplayName(e)
    }
    )
}
;
App.prototype.tick = function(e) {
    this.ticks = e.ticks;
    this.votes = e.votes;
    this.minPlayers = e.minPlayers;
    this.maxPlayers = e.maxPlayers;
    this.voteRateToStart = e.voteRateToStart
}
;
var app = new App;
print("loading game.min.js finished")
app.init();